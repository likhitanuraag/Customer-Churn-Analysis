*------------------------------------------------------------*
User:                20161277
Date:                October 23, 2020
Time:                19:47:13
Site:                10008783
Platform:            X64_DS08R2
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                October 23, 2020
Time:                19:47:06
*------------------------------------------------------------*
14714  proc freq data=EMWS1.Tree_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.TreeMETA;
14716  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14717  proc print data=WORK.TreeMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 3 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14723  title10;
 
14724  %let EMNORLEN = %DMNORLEN;
EMWS1.VarClus_TRAIN EMWS1.VarClus_TRAIN
EMWS1.VarClus_TRAIN EMWS1.VarClus_TRAIN EMWS1 VarClus_TRAIN
EMWS1.VarClus_TRAIN EMWS1.VarClus_TRAIN
EMWS1.VarClus_TRAIN EMWS1.VarClus_TRAIN EMWS1 VarClus_TRAIN
14771  data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14772  length ORDER $20;
14773  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14774     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14775  set EMWS1.TREE_CHURNED_DM( where=(_TYPE_="TARGET"));
14776  NumLevels=2;
14777  select(upcase(ORDER));
14778  when('DESC') ORDER = 'Descending';
14779  when('ASC') ORDER = 'Ascending';
14780  when('FMTDESC') ORDER = 'Formatted Descending';
14781  when('FMTASC') ORDER = 'Formatted Ascending';
14782  otherwise ORDER = 'Descending';
14783  end;
14784  output;
14785  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14786  title9 ' ';
14787  proc print data=WORK.Tree_EVENT noobs label;
14788  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14789  title9 ' ';
14790  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14791  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14792  title10;
 
"No decisions defined for target "Churned"."
14793  proc print data = EMWS1.Tree_Churned_DM noobs label;
14794  var _type_ variable label;
14795  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14796  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14797  title9 ' ';
14798  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14799  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14800  title10;
 
14801  %let EMEXCEPTIONSTRING=;
15314  *------------------------------------------------------------*;
15315  * Tree: Generation of macros and macro variables;
15316  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15317  *------------------------------------------------------------*;
 
15318  %let EMEXCEPTIONSTRING=;
15319  *------------------------------------------------------------*;
15320  * TRAIN: Tree;
15321  *------------------------------------------------------------*;
15322  %let EM_ACTION = TRAIN;
15323  %let syscc = 0;
15324  %macro main;
15325
15326    %if %upcase(&EM_ACTION) = CREATE %then %do;
15327      filename temp catalog 'sashelp.emmodl.tree_create.source';
15328      %include temp;
15329      filename temp;
15330
15331      %em_tree_create;
15332    %end;
15333
15334     %else
15335     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15336
15337         filename temp catalog 'sashelp.emmodl.tree_train.source';
15338         %include temp;
15339         filename temp;
15340         %em_tree_train;
15341     %end;
15342
15343    %else
15344    %if %upcase(&EM_ACTION) = SCORE %then %do;
15345      filename temp catalog 'sashelp.emmodl.tree_score.source';
15346      %include temp;
15347      filename temp;
15348
15349      %em_tree_score;
15350
15351    %end;
15352
15353    %else
15354    %if %upcase(&EM_ACTION) = REPORT %then %do;
15355
15356         filename temp catalog 'sashelp.emmodl.tree_report.source';
15357         %include temp;
15358         filename temp;
15359
15360         %em_tree_report;
15361     %end;
15362
15363    %else
15364    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15365
15366         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15367         %include temp;
15368         filename temp;
15369         %EM_TREE_OPENTREEVIEWER;
15370
15371     %end;
15372
15373    %else
15374    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15375
15376         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15377         %include temp;
15378         filename temp;
15379         %EM_TREE_CLOSETREEVIEWER;
15380
15381     %end;
15382
15383
15384     %doendm:
15385  %mend main;
15386
15387  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15389 +%macro em_tree_train;
15391 +   %if &EM_IMPORT_DATA eq %then %do;
15392 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15393 +       %put &em_codebar;
15394 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15395 +       %put &errormsg;
15396 +       %put &em_codebar;
15397 +       %goto doendm;
15398 +   %end;
15399 +   %else
15400 +       %let EMEXCEPTIONSTRING =;
15402 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15403 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15404 +        %put &em_codebar;
15405 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15406 +        %put &errormsg;
15407 +        %put &em_codebar;
15408 +        %goto doendm;
15409 +   %end;
15411 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15412 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15413 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15414 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15415 +        %put &em_codebar;
15416 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15417 +        %put &errormsg;
15418 +        %put &em_codebar;
15419 +        %goto doendm;
15420 +   %end;
15422 +   /* Initialize property macro variables */
15423 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15424 +   %include temp;
15425 +   filename temp;
15427 +   %EM_SetProperties;
15429 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15430 +   %EM_GETNAME(key=EMTREE, type=DATA);
15431 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15432 +     /* if import eq Y and no importtable defined, throw an exception */
15433 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15434 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15435 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15436 +         %put &em_codebar;
15437 +         %put &errmsg;
15438 +         %put &em_codebar;
15439 +         %goto doendm;
15440 +      %end;
15441 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15442 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15443 +         %put &em_codebar;
15444 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15445 +         %put &errormsg;
15446 +         %put &em_codebar;
15447 +         %goto doendm;
15448 +      %end;
15449 +      %else %do;
15450 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15451 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15452 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15453 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15454 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15455 +         %let dsid = %sysfunc(close(&dsid));
15456 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15457 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15458 +            %put &em_codebar;
15459 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15460 +            %put &errormsg;
15461 +            %put &em_codebar;
15462 +            %goto doendm;
15463 +         %end;
15464 +      %end;
15465 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15466 +         proc delete data=&EM_USER_EMTREE;
15467 +         run;
15468 +      %end;
15469 +   %end;
15470 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15471 +      proc delete data=&EM_USER_EMTREE;
15472 +      run;
15473 +   %end;
15475 +   /* load tree macros */
15476 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15477 +   %include temp;
15478 +   filename temp;
15480 +   /* data sets */
15481 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15482 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15483 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15485 +   /* files */
15486 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15488 +   /* check actual num of target levels */
15489 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15490 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15491 +                              nLevel=_nTargetLevel );
15492 +      %if &_nTargetLevel  > 2 %then %do;
15493 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15494 +        %put &em_codebar;
15495 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15496 +        %put &errormsg;
15497 +        %put &em_codebar;
15498 +        %goto doendm;
15499 +      %end;
15500 +   %end;
15502 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15503 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15504 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15505 +        %let costflag=0;
15506 +        data _null_;
15507 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15508 +          if eof then call symput("costflag", _N_);
15509 +        run;
15510 +        %if &costflag gt 0 %then %do;
15511 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15512 +          %put &em_codebar;
15513 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15514 +          %put &errormsg;
15515 +          %put &em_codebar;
15516 +          %goto doendm;
15517 +       %end;
15518 +     %end;
15519 +   %end;
15521 +   /* determine if multiple targets will be processed */
15522 +   %let em_tree_multipleTargets=N;
15523 +   %let em_tree_numTarget = 1;
15524 +   %let em_tree_targetVars=;
15526 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15527 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15528 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15529 +         %let em_tree_multipleTargets=N;
15530 +      %end;
15531 +      %else %do;
15532 +         /* create macro array of targets  */
15533 +         data _null_;
15534 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15535 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15536 +           if eof then
15537 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15538 +        run;
15540 +        %if &em_tree_numTarget gt 1 %then %do;
15541 +           %let em_tree_multipleTargets=Y;
15542 +        %end;
15543 +      %end;
15544 +   %end;
15546 +   /* create view of only necessary variable for performance reasons */
15547 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15548 +   data &tempData / view=&tempData;
15549 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15550 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15551 +       %EM_TARGET
15552 +     %end;
15553 +     %else %do;
15554 +       %if &em_tree_numTarget ne 0 %then %do;
15555 +         %do i=1 %to &em_tree_numTarget;
15556 +            &&em_tree_targetVars&i
15557 +         %end;
15558 +       %end;
15559 +     %end;
15560 +     );
15561 +   run;
15563 +   /* run Tree procedure */
15564 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15566 +   /* Check return code and throw exception if error is detected */
15567 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15568 +   %if &syserr %then %do;
15569 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15570 +     %goto doendm;
15571 +   %end;
15573 +   /* add decision score code if multiple targets are processed */
15574 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15575 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15576 +   %end;
15578 +   /* create outfit dataset if multiple score statements have been executed */
15579 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15581 +   /* create English Rules */
15582 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15583 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15584 +       %em_tree_makeEnglishRules;
15586 +       /* English Rules */
15587 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15589 +     %end;
15590 +   filename x;
15592 +   %doendm:
15593 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15594 +%macro EM_SetProperties;
15596 +   /* train properties */
15597 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15639 +   /* properties for interactive sample */
15640 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15645 +   /* report properties */
15646 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15660 +   /* score properties */
15661 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15664 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15666 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15667 +  %global &nLevel;
15668 +  proc dmdb batch data=&indata
15669 +    classout=_tmp_dmdbout;
15670 +    class &target;
15671 +  run;
15672 +  data _tmp_dmdbout;
15673 +    set _tmp_dmdbout;
15674 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15675 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15676 +  run;
15677 +  data _null_;
15678 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15679 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15680 +    %let dsid = %sysfunc(close(&dsid));
15681 +     call symput("&nLevel", put(&_obs, Best12.));
15682 +  run;
15684 +  proc datasets lib=work nolist;
15685 +     delete _tmp_dmdbout;
15686 +  run;
15687 +  quit;
15688 +%Mend EM_CheckBinaryTargetLevel;
15691 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15693 +  /* determine the number of obs in training data */
15694 +  proc sql;
15695 +    reset noprint;
15696 +    select count(*) into :em_nobs from &indata;
15697 +  quit;
15699 +  /* determine the number of input variables */
15700 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15701 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15703 +  /* retrieve targetEvent from decmeta */
15704 +  %let targetEvent=;
15705 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15706 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15707 +      data _null_;
15708 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15709 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15710 +      run;
15711 +    %end;
15712 +  %end;
15714 +  /* create targetTable if multipleTar eq Y */
15715 +  data temptarget;
15716 +    set &EM_DATA_VARIABLESET;
15717 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15718 +  run;
15720 + /* data sets */
15721 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15722 + %EM_GETNAME(key=EMTREE,        type=DATA);
15723 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15724 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15725 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15726 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15727 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15728 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15729 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15730 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15732 + /* files */
15733 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15734 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15736 + /* turn on pmml if requested */
15737 + %let nnpmml=0;
15738 + %if %symexist(EM_PMML) %then %do;
15739 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15740 +       %let nnpmml=1;
15742 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15743 +%end;
15745 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15747 + %if &nnpmml or &numClassTarget %then %do;
15749 +       /* create dmdb needed for pmml generation */
15750 +       %let tree_maxlevel = 512;
15751 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15752 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15753 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15754 +         %end;
15755 +       %end;
15756 +       %if &tree_maxlevel gt 0 %then %do;
15757 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15758 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15759 +       %end;
15761 +       %let targetOrderString =;
15762 +       %let targetString = ;
15763 +       data _null_;
15764 +          length orderString nameString $10000;
15765 +          retain orderString nameString;
15766 +          set &em_data_variableset end=eof;
15767 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15768 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15769 +          %end;
15770 +          %else %do;
15771 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15772 +          %end;          select(order);
15773 +            when('')        order ='DESC';
15774 +            when('FMTASC')  order='ASCFMT';
15775 +            when('FMTDESC') order='DESFMT';
15776 +            otherwise;
15777 +          end;
15778 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15779 +          nameString = trim(nameString)!!' '!!trim(NAME);
15781 +          if eof then do;
15782 +             call symput('targetOrderString', trim(orderString));
15783 +             call symput('targetString', trim(nameString));
15784 +          end;
15785 +       run;
15787 +       %let arborkluge= "work._treeDMDB";
15789 +       proc dmdb batch data=&indata
15790 +       %if &nnpmml %then %do;
15791 +           PMML
15792 +       %end;
15793 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15796 +   %if &nnpmml %then %do;
15797 +        %if "%EM_ID" ne "" %then %do;
15798 +          id %EM_ID;
15799 +        %end;
15800 +        %if &EM_NUM_CLASS gt 0 %then %do;
15801 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15802 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15803 +               &targetOrderString;
15804 +        %end;
15805 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15806 +          var %EM_INTERVAL;
15807 +        %end;
15808 +        target &targetString %EM_INTERVAL_TARGET;
15809 +        %if "%EM_FREQ" ne "" %then %do;
15810 +          freq %EM_FREQ;
15811 +        %end;
15812 +  %end;
15813 +  %else %do;
15814 +      class  &targetOrderString;
15815 +      target &targetString %EM_INTERVAL_TARGET;
15816 +  %end;
15817 +       run;
15818 +       quit;
15820 +       proc datasets lib=work nolist;
15821 +          delete classout varout;
15822 +       run;
15823 +       quit;
15825 +    %end;
15826 + %end;
15828 + /* run Arbor procedure */
15829 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15830 +  proc arbor data=&INDATA
15832 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15833 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15834 +  %end;
15836 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15837 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15838 +  %end;
15840 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15841 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15842 +  %end;
15844 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15845 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15846 +  %end;
15848 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15849 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15850 +  %end;
15852 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15853 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15854 +  %end;
15855 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15856 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15857 +  %end;
15858 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15859 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15860 +  %end;
15862 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15863 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15864 +      alpha = &EM_PROPERTY_SIGLEVEL
15865 +    %end;
15866 +  %end;
15868 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15869 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15870 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15871 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15872 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15874 +        padjust =
15875 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15876 +          &chaid
15877 +        %end;
15878 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15879 +          DEPTH
15880 +        %end;
15881 +      %end;
15882 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15883 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15884 +         pvars = &num_inputs
15885 +      %end;
15886 +    %end;
15887 +  %end;
15888 +  %else %do;
15889 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15890 +         padjust = NONE
15891 +      %end;
15892 +  %end;
15894 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15895 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15896 +    Maxrules = &num_nrules
15897 +  %end;
15899 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15900 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15901 +    Maxsurrs = &num_nsurrs
15902 +  %end;
15904 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15905 +     Missing=&EM_PROPERTY_MISSINGVALUE
15906 +  %end;
15908 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15909 +     USEVARONCE
15910 +  %end;
15912 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15913 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15914 +  %end;
15917 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15918 +    event = "&targetEvent"
15919 +  %end;
15921 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15922 +     DECSEARCH
15923 +  %end;
15925 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15926 +     PRIORSSEARCH
15927 +  %end;
15929 +  %if &arbor_1 ne %then %do;
15930 +    &arbor_1
15931 +  %end;
15933 +  %if &em_arbor ne %then %do;
15934 +     &em_arbor
15935 +  %end;
15936 +  ;
15937 + %end;
15938 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15939 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15940 +       interact;
15941 + %end;
15942 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15943 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15944 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15945 +    %put &em_codebar;
15946 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15947 +    %put &errormsg;
15948 +    %put &em_codebar;
15949 +    %goto doendm;
15950 +   %end;
15951 +   %else %do;
15952 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15953 +       interact;
15954 +   %end;
15955 + %end;
15957 + %else %do;
15958 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15959 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15960 +    %put &em_codebar;
15961 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15962 +    %put &errormsg;
15963 +    %put &em_codebar;
15964 +    %goto doendm;
15965 +   %end;
15966 +   %else %do;
15967 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15968 +        interact;
15969 +   %end;
15970 + %end;
15972 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15973 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15974 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15975 +    %end;
15977 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15978 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15979 +    %end;
15981 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15982 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15983 +    %end;
15985 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15986 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15987 +    %end;
15989 +    %if "%EM_FREQ" ne "" %then %do;
15990 +       freq %EM_FREQ;
15991 +    %end;
15993 +    %if "&multipleTar" eq "Y" %then %do;
15994 +       /* cycle through all target vars in variableset */
15995 +       %let tdsid = %sysfunc(open(temptarget));
15996 +       %if &tdsid %then %do;
15997 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15998 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15999 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16000 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16001 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16002 +             target &var / level = &lvl
16003 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16004 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16005 +             %end;
16006 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16007 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16008 +             %end;
16009 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16010 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16011 +             %end;
16012 +          %end;
16013 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16014 +       %end;
16015 +       useTarget variable = %EM_TARGET;
16016 +    %end;
16017 +    %else %do;
16018 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16019 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16020 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16021 +      %end;
16022 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16023 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16024 +      %end;
16025 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16026 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16027 +      %end;
16028 +    %end;
16030 +    %if "&multipleTar" eq "N" %then %do;
16031 +      &EM_DEC_STATEMENT;
16032 +    %end;
16034 +    Performance &EM_PROPERTY_PERFORMANCE
16035 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16036 +      nodesize=&EM_PROPERTY_NODESAMPLE
16037 +    %end;
16038 +    ;
16040 +    %if "&intFlag" eq "Y" %then %do;
16041 +       INTERACT Largest;
16042 +       Train maxnewdepth=0;
16043 +    %end;
16045 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16046 +         Assess
16047 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16048 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16049 +              %put &em_codebar;
16050 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16051 +              %put &errormsg;
16052 +              %put &em_codebar;
16053 +            %end;
16054 +            %else %do;
16055 +               Validata=&EM_IMPORT_VALIDATE
16056 +            %end;
16057 +         %end;
16058 +         %else %do;
16059 +           NoValidata
16060 +         %end;
16061 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16062 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16063 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16064 +               %if &dsid %then %do;
16065 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16066 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16067 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16068 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16069 +                   %else %do;
16070 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16071 +                      %else %let measure= MISC;
16072 +                   %end;
16073 +                 %end;
16074 +               %end;
16075 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16076 +            %end;
16077 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16078 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16079 +                 %let measure=ASE;
16080 +              %end;
16081 +              %else %do;
16082 +                 %let measure=MISC;
16083 +              %end;
16084 +            %end;
16085 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16086 +              %let measure=ASE;
16087 +            %end;
16088 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16089 +               %let measure = LIFT;
16090 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16091 +               %if &dsid %then %do;
16092 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16093 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16094 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16095 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16096 +                 %end;
16097 +               %end;
16098 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16099 +            %end;
16100 +            measure=&measure
16101 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16102 +               event = "&targetEvent"
16103 +            %end;
16104 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16105 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16106 +            %end;
16107 +         %end;
16108 +         %if "&multipleTar" eq "N" %then %do;
16109 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16110 +               CV
16111 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16112 +                 CVNITer = &EM_PROPERTY_CVNITER
16113 +               %end;
16114 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16115 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16116 +               %end;
16117 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16118 +                 CVSeed = &EM_PROPERTY_CVSEED
16119 +               %end;
16120 +            %end;
16121 +         %end;
16122 +       %end;
16123 +      ;
16125 +      %if "&intFlag" ne "Y" %then %do;
16126 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16127 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16128 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16129 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16131 +          SUBTREE &subtree
16132 +          %if "&subtree" eq "NLEAVES" %then %do;
16133 +            =&EM_PROPERTY_NSUBTREE
16134 +          %end;
16135 +          ;
16136 +        %end;
16138 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16139 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16140 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16141 +          %end;
16142 +       %end;
16143 +      %end;
16144 + %end;
16147 + MakeMacro nleaves = nleaves;
16148 + save
16149 + %if "&EM_USER_EMTREE" ne "" %then %do;
16150 +   MODEL=&EM_USER_EMTREE
16151 + %end;
16152 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16153 +   SEQUENCE=&EM_USER_OUTSEQ
16154 + %end;
16155 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16156 +   IMPORTANCE=&EM_USER_OUTIMPORT
16157 + %end;
16158 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16159 +   NODESTAT=&EM_USER_OUTNODES
16160 + %end;
16161 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16162 +   SUMMARY=&EM_USER_OUTSUMMARY
16163 + %end;
16164 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16165 +   STATSBYNODE=&EM_USER_OUTSTATS
16166 + %end;
16167 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16168 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16169 + %end;
16170 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16171 +   Pathlistnonmissing=&EM_USER_OUTPATH
16172 + %end;
16173 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16174 +   RULES = &EM_USER_OUTRULES
16175 + %end;
16176 + ;
16178 + %if "&intFlag" ne "Y" %then %do;
16180 +   %let lookupString = ;
16181 +   %if ^%symexist(EM_OPTION) %then
16182 +      %let EM_OPTION=;
16184 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16185 +      %let lookupString = LOOKUP=SELECT;
16186 +   %end;
16188 +   %let codetext=;
16189 +   %let norescodetxt=;
16191 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16192 +     %let codetext=&codetext DUMMY;
16193 +     %let norescodetxt=&norescodetxt DUMMY;
16194 +   %end;
16195 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16196 +     %let codetext=&codetext NOLEAFID;
16197 +     %let norescodetxt=&norescodetxt NOLEAFID;
16198 +   %end;
16199 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16200 +     %let norescodetxt=&norescodetxt NOPRED;
16201 +   %end;
16203 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16204 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16206 +   %if &nnpmml %then %do;
16207 +     code pmml;
16208 +   %end;
16210 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16211 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16212 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16213 +   %end;
16214 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16215 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16216 +   %end;
16217 + %end;
16219 + run;
16220 + quit;
16222 + /*%em_checkerror(); */
16223 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16224 +   /* Delete DMDB catalog */
16225 +   proc datasets lib=work nolist;
16226 +       delete _treeDMDB / mt=cat;
16227 +  run;
16228 +  %end;
16230 + %if &nnpmml %then %do;
16231 +    ods pmml close;
16232 + %end;
16234 +  %doendm:
16236 +%mend em_tree_runTreeProcedure;
16238 +%macro em_tree_createFitStats( multipleTar= );
16241 +  /* create targetTable is multipleTar eq Y */
16242 +  data temptarget;
16243 +    set &EM_DATA_VARIABLESET;
16244 +    where ROLE="TARGET";
16245 +  run;
16247 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16248 +   data &EM_USER_EMOUTFIT;
16249 +     length target $32;
16250 +     merge work.fit_train
16251 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16252 +       work.fit_valid
16253 +     %end;
16254 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16255 +       work.fit_test
16256 +     %end;
16257 +     ;
16258 +     %if "&multipleTar" eq "N" %then %do;
16259 +       target="%EM_TARGET";
16260 +     %end;
16261 +     %else %do;
16262 +       target = _TARGET_;
16263 +     %end;
16264 +     drop _NW_ _SUMW_
16265 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16266 +        _VSUMW_
16267 +     %end;
16268 +     ;
16269 +   run;
16271 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16272 +     proc datasets library=work nolist;
16273 +       delete fit_valid;
16274 +     run;
16275 +   %end;
16276 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16277 +     proc datasets library=work nolist;
16278 +       delete fit_test;
16279 +     run;
16280 +   %end;
16282 +%mend em_tree_createFitStats;
16285 +%macro em_tree_makeEnglishRules;
16287 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16288 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16290 +  /* verify that necessary tables exist and if not, skip processing */
16291 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16292 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16293 +    %goto doendm;
16294 +  %end;
16295 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16296 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16297 +    %goto doendm;
16298 +  %end;
16300 +  /* determine length of variable in outpath dataset */
16301 +  %let vlength= ;
16302 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16303 +  %if &dsid ne %then %do;
16304 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16305 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16306 +  %end;
16307 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16309 +  data tempoutpath;
16310 +    length varname $&vlength;
16311 +    retain varname;
16312 +    set &EM_USER_OUTPATH;
16314 +    if ^missing(variable) then varname=variable;
16315 +    else if ^missing(var_name) then varname=var_name;
16316 +    output;
16317 +  run;
16319 +  /* create an array of generated predicted variable names */
16320 +  %let tree_pred_vars = ;
16321 +  %let tree_pred_label = ;
16322 +  %let numpred= 0;
16323 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16325 +    data _null_;
16326 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16327 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16328 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16329 +     if eof then
16330 +       call symput('numpred', strip(put(_N_, BEST.)));
16331 +    run;
16332 +  %end;
16334 +  /* determine if NPRIORS exists in outnodes  */
16335 +  %local nprior_flag;
16336 +  data _null_;
16337 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16338 +    if eof then do;
16339 +      call symput('nprior_flag', strip(put(npriors, best.)));
16340 +    end;
16341 +  run;
16343 +  proc sort data=tempoutpath; by node; run;
16344 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16346 +  data tempoutpath;
16347 +    merge tempoutpath(in=_a) outnodes(keep= node
16348 +    %if "&nprior_flag" ne "." %then %do;
16349 +      NPRIORS
16350 +    %end;
16351 +    %else %do;
16352 +      N
16353 +    %end;
16354 +    %if &numpred gt 0 %then %do;
16355 +      %do i=1 %to &numpred;
16356 +        &&tree_pred_vars&i
16357 +      %end;
16358 +    %end;
16359 +    );
16360 +    by node;
16361 +    if _a;
16362 +  run;
16364 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16366 +  data _null_;
16367 +    file x;
16368 +    set tempoutpath;
16369 +    by node descending varname;
16370 +    retain origvar oldnode string;
16371 +    length origvar $32 oldnode 8 string $200;
16373 +    if _N_ = 1 then do;
16374 +      origvar = varname;
16375 +      oldnode = node;
16376 +    end;
16378 +    if first.node then do;
16379 +       put "&EM_CODEBAR";
16380 +       put " Node = " node;
16381 +       put "&EM_CODEBAR";
16382 +    end;
16384 +      if first.varname then do;
16385 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16386 +            if MISSING(CHARACTER_VALUE) then do;
16387 +             if NUMERIC_VALUE ne .  then do;
16388 +              if ^first.node then do;
16389 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16390 +              end;
16391 +              else do;
16392 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16393 +              end;
16394 +             end;
16395 +            end;
16396 +            else do;
16397 +              if ^first.node then do;
16398 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16399 +              end;
16400 +              else do;
16401 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16402 +              end;
16403 +             end;
16404 +         end;
16405 +         else if RELATION in ("=") then do;
16406 +            if ^first.node then do;
16407 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16408 +            end;
16409 +            else do;
16410 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16411 +            end;
16412 +         end;
16413 +         else if RELATION in ("ISMISSING") then do;
16414 +            if ^first.node then do;
16415 +              string = " AND "|| strip(varname) || " equals Missing";
16416 +            end;
16417 +            else do;
16418 +              string = "if "|| strip(varname) ||" equals Missing";
16419 +            end;
16420 +         end;
16421 +         else if RELATION in ("ISNOTMISSING") then do;
16422 +            if ^first.node then do;
16423 +              string = " AND "|| strip(varname) || " equals All Values";
16424 +            end;
16425 +            else do;
16426 +              string = "if "|| strip(varname) ||" equals All Values";
16427 +            end;
16428 +         end;
16429 +         if ^missing(varname) then origvar = varname;
16430 +         oldnode=node;
16432 +      end;
16433 +      else do;
16434 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16435 +          if MISSING(CHARACTER_VALUE) then do;
16436 +           if  NUMERIC_VALUE ne .  then do;
16437 +            if ^MISSING(string) then
16438 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16439 +            else
16440 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16441 +           end;
16442 +          end;
16443 +          else do;
16444 +            if ^MISSING(string) then
16445 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16446 +            else
16447 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16448 +          end;
16450 +         end;
16451 +         else if RELATION in ("=") then do;
16452 +           string = strip(string)||", "||strip(character_value);
16453 +         end;
16454 +         else if RELATION in ("ISMISSING") then do;
16456 +         end;
16457 +         if ^missing(varname) then origvar = varname;
16458 +         oldnode=node;
16459 +      end;
16460 +      if last.varname then do;
16461 +         if RELATION in ("ISMISSING") then do;
16462 +           if ^first.varname then do;
16463 +             string = strip(string) || " or MISSING";
16464 +           end;
16465 +         end;
16466 +         put string;
16467 +         if ^missing(varname) then origvar = varname;
16468 +         oldnode=node;
16469 +      end;
16471 +      if last.node then do;
16472 +         put "then ";
16473 +         put " Tree Node Identifier   = " node;
16475 +         %if "&nprior_flag" ne "." %then %do;
16476 +           put " Number of Observations = " NPRIORS;
16477 +         %end;
16478 +         %else %do;
16479 +           put " Number of Observations = " N;
16480 +         %end;
16482 +         %if &numpred gt 0 %then %do;
16483 +           %do i=1 %to &numpred;
16484 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16485 +           %end;
16486 +         %end;
16488 +         put " ";
16489 +         if ^missing(varname) then origvar = varname;
16490 +         oldnode=node;
16491 +      end;
16493 +  run;
16495 +  proc datasets lib=work nolist;
16496 +    delete tempoutpath outnodes;
16497 +  run;
16499 +  %doendm:
16500 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 5383 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 5383   Memory used = 511K.
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 5383 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: There were 5383 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.17 seconds
 
NOTE: 1491816 kilobytes of physical memory.
NOTE: Will use 5383 out of 5383 training cases.
NOTE: Using memory pool with 103019520 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 1127600 bytes of work memory.
NOTE: There were 2308 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The subtree sequence contains 22 subtrees. The largest has 43 nodes and 22 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Using subtree with 35 nodes and 18 leaves.
NOTE: Created macro variable NLEAVES equal to 18.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 1142 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 35 observations and 24 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 134 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 308 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 22 observations and 20 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 245 observations and 5 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 35 observations and 5 variables.
NOTE: External file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 5383 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: There were 2308 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
NOTE: There were 2309 observations read from the data set EMWS1.PART_TEST.
 
 
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.52 seconds
      cpu time            0.45 seconds
 
NOTE: There were 5383 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: There were 5383 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.54 seconds
      cpu time            0.46 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 134 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 134 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 134 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 134 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 134 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 35 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 134 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 134 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 134 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:47:31
 
NOTE: 216 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 134 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16502
16503  *------------------------------------------------------------*;
16504  * End TRAIN: Tree;
16505  *------------------------------------------------------------*;
 
16506  *------------------------------------------------------------*;
16507  * Close any missing semi colons;
16508  *------------------------------------------------------------*;
16509  ;
16510  ;
16511  ;
16512  ;
16513  quit;
16514  *------------------------------------------------------------*;
16515  * Close any unbalanced quotes;
16516  *------------------------------------------------------------*;
16517  /*; *"; *'; */
16518  ;
16519  run;
16520  quit;
16521  /* Reset EM Options */
16522  options formchar="|----|+|---+=|-/\<>*";
16523  options nocenter ls=256 ps=10000;
16524  goptions reset=all device=GIF NODISPLAY;
 
16525  proc sort data=WORK.EM_USER_REPORT;
16526  by ID VIEW;
16527  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                October 23, 2020
Time:                19:47:09
*------------------------------------------------------------*
16629  %let EMEXCEPTIONSTRING=;
16630  *------------------------------------------------------------*;
16631  * SCORE: Tree;
16632  *------------------------------------------------------------*;
16633  %let EM_ACTION = SCORE;
16634  %let syscc = 0;
16635  %macro main;
16636
16637    %if %upcase(&EM_ACTION) = CREATE %then %do;
16638      filename temp catalog 'sashelp.emmodl.tree_create.source';
16639      %include temp;
16640      filename temp;
16641
16642      %em_tree_create;
16643    %end;
16644
16645     %else
16646     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16647
16648         filename temp catalog 'sashelp.emmodl.tree_train.source';
16649         %include temp;
16650         filename temp;
16651         %em_tree_train;
16652     %end;
16653
16654    %else
16655    %if %upcase(&EM_ACTION) = SCORE %then %do;
16656      filename temp catalog 'sashelp.emmodl.tree_score.source';
16657      %include temp;
16658      filename temp;
16659
16660      %em_tree_score;
16661
16662    %end;
16663
16664    %else
16665    %if %upcase(&EM_ACTION) = REPORT %then %do;
16666
16667         filename temp catalog 'sashelp.emmodl.tree_report.source';
16668         %include temp;
16669         filename temp;
16670
16671         %em_tree_report;
16672     %end;
16673
16674    %else
16675    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16676
16677         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16678         %include temp;
16679         filename temp;
16680         %EM_TREE_OPENTREEVIEWER;
16681
16682     %end;
16683
16684    %else
16685    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16686
16687         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16688         %include temp;
16689         filename temp;
16690         %EM_TREE_CLOSETREEVIEWER;
16691
16692     %end;
16693
16694
16695     %doendm:
16696  %mend main;
16697
16698  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16700 +%macro em_tree_score;
16702 +   /* determine if multiple targets will be processed */
16703 +   %let em_tree_multipleTargets=N;
16704 +   %let em_tree_numTarget=1;
16705 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16706 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16707 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16708 +         %let em_tree_multipleTargets=N;
16709 +      %end;
16710 +      %else %do;
16711 +         /* create macro array of targets  */
16712 +         data _null_;
16713 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16714 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16715 +           if eof then
16716 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16717 +        run;
16719 +        %if &em_tree_numTarget gt 1 %then %do;
16720 +           %let em_tree_multipleTargets=Y;
16721 +        %end;
16722 +      %end;
16723 +   %end;
16725 +   /* build flow and publish scoring code */
16726 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16727 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16729 +   filename treeflow "&EM_USER_TREEFLOW";
16730 +   filename treepub "&EM_USER_TREEPUBLISH";
16732 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16733 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16735 +   %em_copyfile(infref=treeflow, outfref=flowref);
16736 +   %em_copyfile(infref=treepub, outfref=pubref);
16738 +   filename treeflow;
16739 +   filename treepub;
16741 +   /* if priors are used, add code to generate unadjusted residuals in export */
16742 +   %let useAdjPriors = N;
16743 +   data _null_;
16744 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16745 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16746 +   run;
16747 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16748 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16749 +      %include temp;
16750 +      filename temp;
16752 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16753 +      filename adjref "&EM_USER_adjResidualCode";
16754 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16756 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16758 +      filename adjref;
16759 +   %end;
16761 +   /* LEAF */
16762 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16763 +      data _null_;
16764 +        file flowref mod;
16765 +        put 'drop _LEAF_;';
16766 +      run;
16768 +      data _null_;
16769 +        file pubref mod;
16770 +        put 'drop _LEAF_;';
16771 +      run;
16773 +   %end;
16775 +   filename flowref;
16776 +   filename pubref;
16778 +   /* em_metachange code */
16779 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16780 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16781 +   %end;
16783 +   /* variable selection based on importance stat    */
16784 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16785 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16786 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16787 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16788 +     %let obs = %sysfunc(fetch(&dsid));
16789 +     %do %while(&obs=0);
16790 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16791 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16792 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16793 +       %let obs = %sysfunc(fetch(&dsid));
16794 +     %end;
16795 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16796 +   %end;
16798 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16799 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16800 +    %let tree_pred_vars = ;
16801 +    %let tree_pred_lvl =;
16802 +    %let numpred= 0;
16804 +    data _null_;
16805 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16806 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16807 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16808 +     if eof then
16809 +       call symput('numpred', strip(put(_N_, BEST.)));
16810 +    run;
16811 +   %end;
16813 +   %if &numpred ne 0 %then %do;
16814 +    %do i=1 %to &numpred;
16815 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16816 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16817 +    %end;
16818 +   %end;
16820 +   /* determine if multiple targets will be processed */
16821 +   %let em_tree_multipleTargets=N;
16822 +   %let em_tree_numTarget=1;
16823 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16824 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16825 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16826 +         %let em_tree_multipleTargets=N;
16827 +      %end;
16828 +      %else %do;
16829 +        data _null_;
16830 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16831 +          if eof then
16832 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16833 +        run;
16835 +        %if &em_tree_numTarget gt 1 %then %do;
16836 +           %let em_tree_multipleTargets=Y;
16837 +        %end;
16838 +     %end;
16839 +   %end;
16841 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16842 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16844 +      /* variable importance */
16845 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16846 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16848 +         %let validexist=0;
16849 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16850 +           %let validexist=1;
16851 +         %end;
16853 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16854 +         /* and the columns may not be generated                                                                                 */
16855 +         %let em_tree_cvexists=;
16856 +         %let em_tree_surrexists=.;
16857 +         data _null_;
16858 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16859 +            if eof then do ;
16860 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16861 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16862 +            end;
16863 +         run;
16865 +         data &EM_USER_OUTIMPORT;
16866 +            set &EM_USER_OUTIMPORT;
16868 +            /* format columns based on Precison value specified */
16869 +            format importance 15.&EM_PROPERTY_PRECISION
16870 +                 %if &validexist %then %do;
16871 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16872 +                 %end;
16873 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16874 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16875 +                 %end;
16876 +            ;
16877 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16878 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16879 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16880 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16881 +                 %if "&em_tree_surrexists" ne "" %then %do;
16882 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16883 +                 %end;
16884 +                 %if &validexist %then %do;
16885 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16886 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16887 +                 %end;
16888 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16889 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16890 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16891 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16892 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16893 +                 %end;
16894 +            ;
16895 +         run;
16897 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16898 +      %end;
16899 +   %end;
16901 +   %doendm:
16902 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:42:47
 
NOTE: 321 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:42:47
 
NOTE: 299 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12063,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:42:47
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=11413,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:42:47
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
16903
16904  *------------------------------------------------------------*;
16905  * End SCORE: Tree;
16906  *------------------------------------------------------------*;
 
16907  proc sort data=WORK.EM_METACHANGE;
16908  by key uname;
16909  run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
16910  filename x "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16911  data _null_;
16912  file x;
16913  put 'if upcase(NAME) = "COUNTRYSPAIN" then do;';
16914  put 'ROLE = "REJECTED";';
16915  put 'end;';
16916  put 'else ';
16917  put 'if upcase(NAME) = "ESTIMATEDSAL_ZSCORE" then do;';
16918  put 'ROLE = "REJECTED";';
16919  put 'end;';
16920  put 'else ';
16921  put 'if upcase(NAME) = "HASCREDITCARDNO" then do;';
16922  put 'ROLE = "REJECTED";';
16923  put 'end;';
16924  put 'else ';
16925  put 'if upcase(NAME) = "Q_CHURNEDNO" then do;';
16926  put 'ROLE = "ASSESS";';
16927  put 'end;';
16928  put 'else ';
16929  put 'if upcase(NAME) = "Q_CHURNEDYES" then do;';
16930  put 'ROLE = "ASSESS";';
16931  put 'end;';
16932  put 'else ';
16933  put 'if upcase(NAME) = "_NODE_" then do;';
16934  put 'ROLE = "SEGMENT";';
16935  put 'LEVEL = "NOMINAL";';
16936  put 'end;';
16937  run;
 
NOTE: The file X is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Oct2020:19:47:08,
      Create Time=22Oct2020:12:42:47
 
NOTE: 24 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
16938  filename x;
NOTE: Fileref X has been deassigned.
 
16939  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16940  *------------------------------------------------------------*;
16941  * Tree: Scoring DATA data;
16942  *------------------------------------------------------------*;
16943  data EMWS1.Tree_TRAIN
16944  / view=EMWS1.Tree_TRAIN
16945  ;
16946  set EMWS1.VarClus_TRAIN
16947  ;
16948  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
16949 +****************************************************************;
16950 +******             DECISION TREE SCORING CODE             ******;
16951 +****************************************************************;
16952 +
16953 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16954 +LENGTH F_Churned  $    3;
16955 +LENGTH I_Churned  $    3;
16956 +LENGTH U_Churned  $    3;
16957 +LENGTH _WARN_  $    4;
16958 +
16959 +******              LABELS FOR NEW VARIABLES              ******;
16960 +label _NODE_ = 'Node' ;
16961 +label _LEAF_ = 'Leaf' ;
16962 +label P_ChurnedYes = 'Predicted: Churned=Yes' ;
16963 +label P_ChurnedNo = 'Predicted: Churned=No' ;
16964 +label Q_ChurnedYes = 'Unadjusted P: Churned=Yes' ;
16965 +label Q_ChurnedNo = 'Unadjusted P: Churned=No' ;
16966 +label V_ChurnedYes = 'Validated: Churned=Yes' ;
16967 +label V_ChurnedNo = 'Validated: Churned=No' ;
16968 +label R_ChurnedYes = 'Residual: Churned=Yes' ;
16969 +label R_ChurnedNo = 'Residual: Churned=No' ;
16970 +label F_Churned = 'From: Churned' ;
16971 +label I_Churned = 'Into: Churned' ;
16972 +label U_Churned = 'Unnormalized Into: Churned' ;
16973 +label _WARN_ = 'Warnings' ;
16974 +
16975 +
16976 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16977 +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
16978 +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
16979 +
16980 +
16981 +_ARBFMT_3 = PUT( Churned , $3.);
16982 + %DMNORMCP( _ARBFMT_3, F_Churned );
16983 +
16984 +******             ASSIGN OBSERVATION TO NODE             ******;
16985 +IF  NOT MISSING(Age_Zscore ) AND
16986 +      0.34117704268097 <= Age_Zscore  THEN DO;
16987 +  IF  NOT MISSING(IsActiveMemberNo ) AND
16988 +                     0.5 <= IsActiveMemberNo  THEN DO;
16989 +    IF  NOT MISSING(Age_Zscore ) AND
16990 +          0.91326978654266 <= Age_Zscore  THEN DO;
16991 +      IF  NOT MISSING(NumOfProducts ) AND
16992 +                         1.5 <= NumOfProducts  THEN DO;
16993 +        IF  NOT MISSING(NumOfProducts ) AND
16994 +                           2.5 <= NumOfProducts  THEN DO;
16995 +          _NODE_  =                   37;
16996 +          _LEAF_  =                   18;
16997 +          P_ChurnedYes  =                    1;
16998 +          P_ChurnedNo  =                    0;
16999 +          Q_ChurnedYes  =                    1;
17000 +          Q_ChurnedNo  =                    0;
17001 +          V_ChurnedYes  =                    1;
17002 +          V_ChurnedNo  =                    0;
17003 +          I_Churned  = 'YES' ;
17004 +          U_Churned  = 'Yes' ;
17005 +          END;
17006 +        ELSE DO;
17007 +          IF  NOT MISSING(Age_Zscore ) AND
17008 +            Age_Zscore  <      1.1993161584735 THEN DO;
17009 +            _NODE_  =                   42;
17010 +            _LEAF_  =                   16;
17011 +            P_ChurnedYes  =                 0.32;
17012 +            P_ChurnedNo  =                 0.68;
17013 +            Q_ChurnedYes  =                 0.32;
17014 +            Q_ChurnedNo  =                 0.68;
17015 +            V_ChurnedYes  =     0.21428571428571;
17016 +            V_ChurnedNo  =     0.78571428571428;
17017 +            I_Churned  = 'NO' ;
17018 +            U_Churned  = 'No' ;
17019 +            END;
17020 +          ELSE DO;
17021 +            _NODE_  =                   43;
17022 +            _LEAF_  =                   17;
17023 +            P_ChurnedYes  =     0.76190476190476;
17024 +            P_ChurnedNo  =     0.23809523809523;
17025 +            Q_ChurnedYes  =     0.76190476190476;
17026 +            Q_ChurnedNo  =     0.23809523809523;
17027 +            V_ChurnedYes  =     0.58823529411764;
17028 +            V_ChurnedNo  =     0.41176470588235;
17029 +            I_Churned  = 'YES' ;
17030 +            U_Churned  = 'Yes' ;
17031 +            END;
17032 +          END;
17033 +        END;
17034 +      ELSE DO;
17035 +        _NODE_  =                   24;
17036 +        _LEAF_  =                   15;
17037 +        P_ChurnedYes  =     0.87373737373737;
17038 +        P_ChurnedNo  =     0.12626262626262;
17039 +        Q_ChurnedYes  =     0.87373737373737;
17040 +        Q_ChurnedNo  =     0.12626262626262;
17041 +        V_ChurnedYes  =     0.85393258426966;
17042 +        V_ChurnedNo  =     0.14606741573033;
17043 +        I_Churned  = 'YES' ;
17044 +        U_Churned  = 'Yes' ;
17045 +        END;
17046 +      END;
17047 +    ELSE DO;
17048 +      IF  NOT MISSING(NumOfProducts ) AND
17049 +                         1.5 <= NumOfProducts  THEN DO;
17050 +        _NODE_  =                   23;
17051 +        _LEAF_  =                   14;
17052 +        P_ChurnedYes  =     0.30246913580246;
17053 +        P_ChurnedNo  =     0.69753086419753;
17054 +        Q_ChurnedYes  =     0.30246913580246;
17055 +        Q_ChurnedNo  =     0.69753086419753;
17056 +        V_ChurnedYes  =                 0.25;
17057 +        V_ChurnedNo  =                 0.75;
17058 +        I_Churned  = 'NO' ;
17059 +        U_Churned  = 'No' ;
17060 +        END;
17061 +      ELSE DO;
17062 +        _NODE_  =                   22;
17063 +        _LEAF_  =                   13;
17064 +        P_ChurnedYes  =                0.552;
17065 +        P_ChurnedNo  =                0.448;
17066 +        Q_ChurnedYes  =                0.552;
17067 +        Q_ChurnedNo  =                0.448;
17068 +        V_ChurnedYes  =     0.61363636363636;
17069 +        V_ChurnedNo  =     0.38636363636363;
17070 +        I_Churned  = 'YES' ;
17071 +        U_Churned  = 'Yes' ;
17072 +        END;
17073 +      END;
17074 +    END;
17075 +  ELSE DO;
17076 +    IF  NOT MISSING(NumOfProducts ) AND
17077 +                       2.5 <= NumOfProducts  THEN DO;
17078 +      _NODE_  =                   13;
17079 +      _LEAF_  =                   12;
17080 +      P_ChurnedYes  =     0.94871794871794;
17081 +      P_ChurnedNo  =     0.05128205128205;
17082 +      Q_ChurnedYes  =     0.94871794871794;
17083 +      Q_ChurnedNo  =     0.05128205128205;
17084 +      V_ChurnedYes  =     0.92857142857142;
17085 +      V_ChurnedNo  =     0.07142857142857;
17086 +      I_Churned  = 'YES' ;
17087 +      U_Churned  = 'Yes' ;
17088 +      END;
17089 +    ELSE DO;
17090 +      IF  NOT MISSING(NumOfProducts ) AND
17091 +                         1.5 <= NumOfProducts  THEN DO;
17092 +        _NODE_  =                   21;
17093 +        _LEAF_  =                   11;
17094 +        P_ChurnedYes  =     0.11475409836065;
17095 +        P_ChurnedNo  =     0.88524590163934;
17096 +        Q_ChurnedYes  =     0.11475409836065;
17097 +        Q_ChurnedNo  =     0.88524590163934;
17098 +        V_ChurnedYes  =     0.12883435582822;
17099 +        V_ChurnedNo  =     0.87116564417177;
17100 +        I_Churned  = 'NO' ;
17101 +        U_Churned  = 'No' ;
17102 +        END;
17103 +      ELSE DO;
17104 +        IF  NOT MISSING(Age_Zscore ) AND
17105 +              1.77140890233518 <= Age_Zscore  THEN DO;
17106 +          _NODE_  =                   31;
17107 +          _LEAF_  =                   10;
17108 +          P_ChurnedYes  =     0.14473684210526;
17109 +          P_ChurnedNo  =     0.85526315789473;
17110 +          Q_ChurnedYes  =     0.14473684210526;
17111 +          Q_ChurnedNo  =     0.85526315789473;
17112 +          V_ChurnedYes  =     0.19607843137254;
17113 +          V_ChurnedNo  =     0.80392156862745;
17114 +          I_Churned  = 'NO' ;
17115 +          U_Churned  = 'No' ;
17116 +          END;
17117 +        ELSE DO;
17118 +          _NODE_  =                   30;
17119 +          _LEAF_  =                    9;
17120 +          P_ChurnedYes  =     0.41806020066889;
17121 +          P_ChurnedNo  =      0.5819397993311;
17122 +          Q_ChurnedYes  =     0.41806020066889;
17123 +          Q_ChurnedNo  =      0.5819397993311;
17124 +          V_ChurnedYes  =     0.38518518518518;
17125 +          V_ChurnedNo  =     0.61481481481481;
17126 +          I_Churned  = 'NO' ;
17127 +          U_Churned  = 'No' ;
17128 +          END;
17129 +        END;
17130 +      END;
17131 +    END;
17132 +  END;
17133 +ELSE DO;
17134 +  IF  NOT MISSING(NumOfProducts ) AND
17135 +                     2.5 <= NumOfProducts  THEN DO;
17136 +    IF  NOT MISSING(Age_Zscore ) AND
17137 +         -0.13556691053708 <= Age_Zscore  THEN DO;
17138 +      _NODE_  =                   11;
17139 +      _LEAF_  =                    8;
17140 +      P_ChurnedYes  =     0.83333333333333;
17141 +      P_ChurnedNo  =     0.16666666666666;
17142 +      Q_ChurnedYes  =     0.83333333333333;
17143 +      Q_ChurnedNo  =     0.16666666666666;
17144 +      V_ChurnedYes  =     0.86666666666666;
17145 +      V_ChurnedNo  =     0.13333333333333;
17146 +      I_Churned  = 'YES' ;
17147 +      U_Churned  = 'Yes' ;
17148 +      END;
17149 +    ELSE DO;
17150 +      _NODE_  =                   10;
17151 +      _LEAF_  =                    7;
17152 +      P_ChurnedYes  =      0.6078431372549;
17153 +      P_ChurnedNo  =     0.39215686274509;
17154 +      Q_ChurnedYes  =      0.6078431372549;
17155 +      Q_ChurnedNo  =     0.39215686274509;
17156 +      V_ChurnedYes  =     0.65217391304347;
17157 +      V_ChurnedNo  =     0.34782608695652;
17158 +      I_Churned  = 'YES' ;
17159 +      U_Churned  = 'Yes' ;
17160 +      END;
17161 +    END;
17162 +  ELSE DO;
17163 +    IF  NOT MISSING(NumOfProducts ) AND
17164 +      NumOfProducts  <                  1.5 THEN DO;
17165 +      IF  NOT MISSING(IsActiveMemberNo ) AND
17166 +                         0.5 <= IsActiveMemberNo  THEN DO;
17167 +        IF  NOT MISSING(Age_Zscore ) AND
17168 +             -0.13556691053708 <= Age_Zscore  THEN DO;
17169 +          _NODE_  =                   29;
17170 +          _LEAF_  =                    4;
17171 +          P_ChurnedYes  =     0.29411764705882;
17172 +          P_ChurnedNo  =     0.70588235294117;
17173 +          Q_ChurnedYes  =     0.29411764705882;
17174 +          Q_ChurnedNo  =     0.70588235294117;
17175 +          V_ChurnedYes  =      0.3095238095238;
17176 +          V_ChurnedNo  =     0.69047619047619;
17177 +          I_Churned  = 'NO' ;
17178 +          U_Churned  = 'No' ;
17179 +          END;
17180 +        ELSE DO;
17181 +          _NODE_  =                   28;
17182 +          _LEAF_  =                    3;
17183 +          P_ChurnedYes  =     0.16108452950558;
17184 +          P_ChurnedNo  =     0.83891547049441;
17185 +          Q_ChurnedYes  =     0.16108452950558;
17186 +          Q_ChurnedNo  =     0.83891547049441;
17187 +          V_ChurnedYes  =     0.18181818181818;
17188 +          V_ChurnedNo  =     0.81818181818181;
17189 +          I_Churned  = 'NO' ;
17190 +          U_Churned  = 'No' ;
17191 +          END;
17192 +        END;
17193 +      ELSE DO;
17194 +        IF  NOT MISSING(GenderFemale ) AND
17195 +                           0.5 <= GenderFemale  THEN DO;
17196 +          _NODE_  =                   27;
17197 +          _LEAF_  =                    2;
17198 +          P_ChurnedYes  =     0.15776081424936;
17199 +          P_ChurnedNo  =     0.84223918575063;
17200 +          Q_ChurnedYes  =     0.15776081424936;
17201 +          Q_ChurnedNo  =     0.84223918575063;
17202 +          V_ChurnedYes  =                 0.16;
17203 +          V_ChurnedNo  =                 0.84;
17204 +          I_Churned  = 'NO' ;
17205 +          U_Churned  = 'No' ;
17206 +          END;
17207 +        ELSE DO;
17208 +          _NODE_  =                   26;
17209 +          _LEAF_  =                    1;
17210 +          P_ChurnedYes  =     0.09140767824497;
17211 +          P_ChurnedNo  =     0.90859232175502;
17212 +          Q_ChurnedYes  =     0.09140767824497;
17213 +          Q_ChurnedNo  =     0.90859232175502;
17214 +          V_ChurnedYes  =     0.11004784688995;
17215 +          V_ChurnedNo  =     0.88995215311004;
17216 +          I_Churned  = 'NO' ;
17217 +          U_Churned  = 'No' ;
17218 +          END;
17219 +        END;
17220 +      END;
17221 +    ELSE DO;
17222 +      IF  NOT MISSING(GenderFemale ) AND
17223 +                         0.5 <= GenderFemale  THEN DO;
17224 +        _NODE_  =                   19;
17225 +        _LEAF_  =                    6;
17226 +        P_ChurnedYes  =     0.06153846153846;
17227 +        P_ChurnedNo  =     0.93846153846153;
17228 +        Q_ChurnedYes  =     0.06153846153846;
17229 +        Q_ChurnedNo  =     0.93846153846153;
17230 +        V_ChurnedYes  =     0.05962059620596;
17231 +        V_ChurnedNo  =     0.94037940379403;
17232 +        I_Churned  = 'NO' ;
17233 +        U_Churned  = 'No' ;
17234 +        END;
17235 +      ELSE DO;
17236 +        _NODE_  =                   18;
17237 +        _LEAF_  =                    5;
17238 +        P_ChurnedYes  =     0.02966507177033;
17239 +        P_ChurnedNo  =     0.97033492822966;
17240 +        Q_ChurnedYes  =     0.02966507177033;
17241 +        Q_ChurnedNo  =     0.97033492822966;
17242 +        V_ChurnedYes  =                 0.02;
17243 +        V_ChurnedNo  =                 0.98;
17244 +        I_Churned  = 'NO' ;
17245 +        U_Churned  = 'No' ;
17246 +        END;
17247 +      END;
17248 +    END;
17249 +  END;
17250 +
17251 +*****  RESIDUALS R_ *************;
17252 +IF  F_Churned  NE 'YES'
17253 +AND F_Churned  NE 'NO'  THEN DO;
17254 +        R_ChurnedYes  = .;
17255 +        R_ChurnedNo  = .;
17256 + END;
17257 + ELSE DO;
17258 +       R_ChurnedYes  =  -P_ChurnedYes ;
17259 +       R_ChurnedNo  =  -P_ChurnedNo ;
17260 +       SELECT( F_Churned  );
17261 +          WHEN( 'YES'  ) R_ChurnedYes  = R_ChurnedYes  +1;
17262 +          WHEN( 'NO'  ) R_ChurnedNo  = R_ChurnedNo  +1;
17263 +       END;
17264 + END;
17265 +
17266 +****************************************************************;
17267 +******          END OF DECISION TREE SCORING CODE         ******;
17268 +****************************************************************;
17269 +
17270 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17271  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
17272  quit;
17273  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17274  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17275  *------------------------------------------------------------*;
17276  * Tree: Scoring VALIDATE data;
17277  *------------------------------------------------------------*;
17278  data EMWS1.Tree_VALIDATE
17279  / view=EMWS1.Tree_VALIDATE
17280  ;
17281  set EMWS1.VarClus_VALIDATE
17282  ;
17283  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17284 +****************************************************************;
17285 +******             DECISION TREE SCORING CODE             ******;
17286 +****************************************************************;
17287 +
17288 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17289 +LENGTH F_Churned  $    3;
17290 +LENGTH I_Churned  $    3;
17291 +LENGTH U_Churned  $    3;
17292 +LENGTH _WARN_  $    4;
17293 +
17294 +******              LABELS FOR NEW VARIABLES              ******;
17295 +label _NODE_ = 'Node' ;
17296 +label _LEAF_ = 'Leaf' ;
17297 +label P_ChurnedYes = 'Predicted: Churned=Yes' ;
17298 +label P_ChurnedNo = 'Predicted: Churned=No' ;
17299 +label Q_ChurnedYes = 'Unadjusted P: Churned=Yes' ;
17300 +label Q_ChurnedNo = 'Unadjusted P: Churned=No' ;
17301 +label V_ChurnedYes = 'Validated: Churned=Yes' ;
17302 +label V_ChurnedNo = 'Validated: Churned=No' ;
17303 +label R_ChurnedYes = 'Residual: Churned=Yes' ;
17304 +label R_ChurnedNo = 'Residual: Churned=No' ;
17305 +label F_Churned = 'From: Churned' ;
17306 +label I_Churned = 'Into: Churned' ;
17307 +label U_Churned = 'Unnormalized Into: Churned' ;
17308 +label _WARN_ = 'Warnings' ;
17309 +
17310 +
17311 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17312 +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
17313 +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
17314 +
17315 +
17316 +_ARBFMT_3 = PUT( Churned , $3.);
17317 + %DMNORMCP( _ARBFMT_3, F_Churned );
17318 +
17319 +******             ASSIGN OBSERVATION TO NODE             ******;
17320 +IF  NOT MISSING(Age_Zscore ) AND
17321 +      0.34117704268097 <= Age_Zscore  THEN DO;
17322 +  IF  NOT MISSING(IsActiveMemberNo ) AND
17323 +                     0.5 <= IsActiveMemberNo  THEN DO;
17324 +    IF  NOT MISSING(Age_Zscore ) AND
17325 +          0.91326978654266 <= Age_Zscore  THEN DO;
17326 +      IF  NOT MISSING(NumOfProducts ) AND
17327 +                         1.5 <= NumOfProducts  THEN DO;
17328 +        IF  NOT MISSING(NumOfProducts ) AND
17329 +                           2.5 <= NumOfProducts  THEN DO;
17330 +          _NODE_  =                   37;
17331 +          _LEAF_  =                   18;
17332 +          P_ChurnedYes  =                    1;
17333 +          P_ChurnedNo  =                    0;
17334 +          Q_ChurnedYes  =                    1;
17335 +          Q_ChurnedNo  =                    0;
17336 +          V_ChurnedYes  =                    1;
17337 +          V_ChurnedNo  =                    0;
17338 +          I_Churned  = 'YES' ;
17339 +          U_Churned  = 'Yes' ;
17340 +          END;
17341 +        ELSE DO;
17342 +          IF  NOT MISSING(Age_Zscore ) AND
17343 +            Age_Zscore  <      1.1993161584735 THEN DO;
17344 +            _NODE_  =                   42;
17345 +            _LEAF_  =                   16;
17346 +            P_ChurnedYes  =                 0.32;
17347 +            P_ChurnedNo  =                 0.68;
17348 +            Q_ChurnedYes  =                 0.32;
17349 +            Q_ChurnedNo  =                 0.68;
17350 +            V_ChurnedYes  =     0.21428571428571;
17351 +            V_ChurnedNo  =     0.78571428571428;
17352 +            I_Churned  = 'NO' ;
17353 +            U_Churned  = 'No' ;
17354 +            END;
17355 +          ELSE DO;
17356 +            _NODE_  =                   43;
17357 +            _LEAF_  =                   17;
17358 +            P_ChurnedYes  =     0.76190476190476;
17359 +            P_ChurnedNo  =     0.23809523809523;
17360 +            Q_ChurnedYes  =     0.76190476190476;
17361 +            Q_ChurnedNo  =     0.23809523809523;
17362 +            V_ChurnedYes  =     0.58823529411764;
17363 +            V_ChurnedNo  =     0.41176470588235;
17364 +            I_Churned  = 'YES' ;
17365 +            U_Churned  = 'Yes' ;
17366 +            END;
17367 +          END;
17368 +        END;
17369 +      ELSE DO;
17370 +        _NODE_  =                   24;
17371 +        _LEAF_  =                   15;
17372 +        P_ChurnedYes  =     0.87373737373737;
17373 +        P_ChurnedNo  =     0.12626262626262;
17374 +        Q_ChurnedYes  =     0.87373737373737;
17375 +        Q_ChurnedNo  =     0.12626262626262;
17376 +        V_ChurnedYes  =     0.85393258426966;
17377 +        V_ChurnedNo  =     0.14606741573033;
17378 +        I_Churned  = 'YES' ;
17379 +        U_Churned  = 'Yes' ;
17380 +        END;
17381 +      END;
17382 +    ELSE DO;
17383 +      IF  NOT MISSING(NumOfProducts ) AND
17384 +                         1.5 <= NumOfProducts  THEN DO;
17385 +        _NODE_  =                   23;
17386 +        _LEAF_  =                   14;
17387 +        P_ChurnedYes  =     0.30246913580246;
17388 +        P_ChurnedNo  =     0.69753086419753;
17389 +        Q_ChurnedYes  =     0.30246913580246;
17390 +        Q_ChurnedNo  =     0.69753086419753;
17391 +        V_ChurnedYes  =                 0.25;
17392 +        V_ChurnedNo  =                 0.75;
17393 +        I_Churned  = 'NO' ;
17394 +        U_Churned  = 'No' ;
17395 +        END;
17396 +      ELSE DO;
17397 +        _NODE_  =                   22;
17398 +        _LEAF_  =                   13;
17399 +        P_ChurnedYes  =                0.552;
17400 +        P_ChurnedNo  =                0.448;
17401 +        Q_ChurnedYes  =                0.552;
17402 +        Q_ChurnedNo  =                0.448;
17403 +        V_ChurnedYes  =     0.61363636363636;
17404 +        V_ChurnedNo  =     0.38636363636363;
17405 +        I_Churned  = 'YES' ;
17406 +        U_Churned  = 'Yes' ;
17407 +        END;
17408 +      END;
17409 +    END;
17410 +  ELSE DO;
17411 +    IF  NOT MISSING(NumOfProducts ) AND
17412 +                       2.5 <= NumOfProducts  THEN DO;
17413 +      _NODE_  =                   13;
17414 +      _LEAF_  =                   12;
17415 +      P_ChurnedYes  =     0.94871794871794;
17416 +      P_ChurnedNo  =     0.05128205128205;
17417 +      Q_ChurnedYes  =     0.94871794871794;
17418 +      Q_ChurnedNo  =     0.05128205128205;
17419 +      V_ChurnedYes  =     0.92857142857142;
17420 +      V_ChurnedNo  =     0.07142857142857;
17421 +      I_Churned  = 'YES' ;
17422 +      U_Churned  = 'Yes' ;
17423 +      END;
17424 +    ELSE DO;
17425 +      IF  NOT MISSING(NumOfProducts ) AND
17426 +                         1.5 <= NumOfProducts  THEN DO;
17427 +        _NODE_  =                   21;
17428 +        _LEAF_  =                   11;
17429 +        P_ChurnedYes  =     0.11475409836065;
17430 +        P_ChurnedNo  =     0.88524590163934;
17431 +        Q_ChurnedYes  =     0.11475409836065;
17432 +        Q_ChurnedNo  =     0.88524590163934;
17433 +        V_ChurnedYes  =     0.12883435582822;
17434 +        V_ChurnedNo  =     0.87116564417177;
17435 +        I_Churned  = 'NO' ;
17436 +        U_Churned  = 'No' ;
17437 +        END;
17438 +      ELSE DO;
17439 +        IF  NOT MISSING(Age_Zscore ) AND
17440 +              1.77140890233518 <= Age_Zscore  THEN DO;
17441 +          _NODE_  =                   31;
17442 +          _LEAF_  =                   10;
17443 +          P_ChurnedYes  =     0.14473684210526;
17444 +          P_ChurnedNo  =     0.85526315789473;
17445 +          Q_ChurnedYes  =     0.14473684210526;
17446 +          Q_ChurnedNo  =     0.85526315789473;
17447 +          V_ChurnedYes  =     0.19607843137254;
17448 +          V_ChurnedNo  =     0.80392156862745;
17449 +          I_Churned  = 'NO' ;
17450 +          U_Churned  = 'No' ;
17451 +          END;
17452 +        ELSE DO;
17453 +          _NODE_  =                   30;
17454 +          _LEAF_  =                    9;
17455 +          P_ChurnedYes  =     0.41806020066889;
17456 +          P_ChurnedNo  =      0.5819397993311;
17457 +          Q_ChurnedYes  =     0.41806020066889;
17458 +          Q_ChurnedNo  =      0.5819397993311;
17459 +          V_ChurnedYes  =     0.38518518518518;
17460 +          V_ChurnedNo  =     0.61481481481481;
17461 +          I_Churned  = 'NO' ;
17462 +          U_Churned  = 'No' ;
17463 +          END;
17464 +        END;
17465 +      END;
17466 +    END;
17467 +  END;
17468 +ELSE DO;
17469 +  IF  NOT MISSING(NumOfProducts ) AND
17470 +                     2.5 <= NumOfProducts  THEN DO;
17471 +    IF  NOT MISSING(Age_Zscore ) AND
17472 +         -0.13556691053708 <= Age_Zscore  THEN DO;
17473 +      _NODE_  =                   11;
17474 +      _LEAF_  =                    8;
17475 +      P_ChurnedYes  =     0.83333333333333;
17476 +      P_ChurnedNo  =     0.16666666666666;
17477 +      Q_ChurnedYes  =     0.83333333333333;
17478 +      Q_ChurnedNo  =     0.16666666666666;
17479 +      V_ChurnedYes  =     0.86666666666666;
17480 +      V_ChurnedNo  =     0.13333333333333;
17481 +      I_Churned  = 'YES' ;
17482 +      U_Churned  = 'Yes' ;
17483 +      END;
17484 +    ELSE DO;
17485 +      _NODE_  =                   10;
17486 +      _LEAF_  =                    7;
17487 +      P_ChurnedYes  =      0.6078431372549;
17488 +      P_ChurnedNo  =     0.39215686274509;
17489 +      Q_ChurnedYes  =      0.6078431372549;
17490 +      Q_ChurnedNo  =     0.39215686274509;
17491 +      V_ChurnedYes  =     0.65217391304347;
17492 +      V_ChurnedNo  =     0.34782608695652;
17493 +      I_Churned  = 'YES' ;
17494 +      U_Churned  = 'Yes' ;
17495 +      END;
17496 +    END;
17497 +  ELSE DO;
17498 +    IF  NOT MISSING(NumOfProducts ) AND
17499 +      NumOfProducts  <                  1.5 THEN DO;
17500 +      IF  NOT MISSING(IsActiveMemberNo ) AND
17501 +                         0.5 <= IsActiveMemberNo  THEN DO;
17502 +        IF  NOT MISSING(Age_Zscore ) AND
17503 +             -0.13556691053708 <= Age_Zscore  THEN DO;
17504 +          _NODE_  =                   29;
17505 +          _LEAF_  =                    4;
17506 +          P_ChurnedYes  =     0.29411764705882;
17507 +          P_ChurnedNo  =     0.70588235294117;
17508 +          Q_ChurnedYes  =     0.29411764705882;
17509 +          Q_ChurnedNo  =     0.70588235294117;
17510 +          V_ChurnedYes  =      0.3095238095238;
17511 +          V_ChurnedNo  =     0.69047619047619;
17512 +          I_Churned  = 'NO' ;
17513 +          U_Churned  = 'No' ;
17514 +          END;
17515 +        ELSE DO;
17516 +          _NODE_  =                   28;
17517 +          _LEAF_  =                    3;
17518 +          P_ChurnedYes  =     0.16108452950558;
17519 +          P_ChurnedNo  =     0.83891547049441;
17520 +          Q_ChurnedYes  =     0.16108452950558;
17521 +          Q_ChurnedNo  =     0.83891547049441;
17522 +          V_ChurnedYes  =     0.18181818181818;
17523 +          V_ChurnedNo  =     0.81818181818181;
17524 +          I_Churned  = 'NO' ;
17525 +          U_Churned  = 'No' ;
17526 +          END;
17527 +        END;
17528 +      ELSE DO;
17529 +        IF  NOT MISSING(GenderFemale ) AND
17530 +                           0.5 <= GenderFemale  THEN DO;
17531 +          _NODE_  =                   27;
17532 +          _LEAF_  =                    2;
17533 +          P_ChurnedYes  =     0.15776081424936;
17534 +          P_ChurnedNo  =     0.84223918575063;
17535 +          Q_ChurnedYes  =     0.15776081424936;
17536 +          Q_ChurnedNo  =     0.84223918575063;
17537 +          V_ChurnedYes  =                 0.16;
17538 +          V_ChurnedNo  =                 0.84;
17539 +          I_Churned  = 'NO' ;
17540 +          U_Churned  = 'No' ;
17541 +          END;
17542 +        ELSE DO;
17543 +          _NODE_  =                   26;
17544 +          _LEAF_  =                    1;
17545 +          P_ChurnedYes  =     0.09140767824497;
17546 +          P_ChurnedNo  =     0.90859232175502;
17547 +          Q_ChurnedYes  =     0.09140767824497;
17548 +          Q_ChurnedNo  =     0.90859232175502;
17549 +          V_ChurnedYes  =     0.11004784688995;
17550 +          V_ChurnedNo  =     0.88995215311004;
17551 +          I_Churned  = 'NO' ;
17552 +          U_Churned  = 'No' ;
17553 +          END;
17554 +        END;
17555 +      END;
17556 +    ELSE DO;
17557 +      IF  NOT MISSING(GenderFemale ) AND
17558 +                         0.5 <= GenderFemale  THEN DO;
17559 +        _NODE_  =                   19;
17560 +        _LEAF_  =                    6;
17561 +        P_ChurnedYes  =     0.06153846153846;
17562 +        P_ChurnedNo  =     0.93846153846153;
17563 +        Q_ChurnedYes  =     0.06153846153846;
17564 +        Q_ChurnedNo  =     0.93846153846153;
17565 +        V_ChurnedYes  =     0.05962059620596;
17566 +        V_ChurnedNo  =     0.94037940379403;
17567 +        I_Churned  = 'NO' ;
17568 +        U_Churned  = 'No' ;
17569 +        END;
17570 +      ELSE DO;
17571 +        _NODE_  =                   18;
17572 +        _LEAF_  =                    5;
17573 +        P_ChurnedYes  =     0.02966507177033;
17574 +        P_ChurnedNo  =     0.97033492822966;
17575 +        Q_ChurnedYes  =     0.02966507177033;
17576 +        Q_ChurnedNo  =     0.97033492822966;
17577 +        V_ChurnedYes  =                 0.02;
17578 +        V_ChurnedNo  =                 0.98;
17579 +        I_Churned  = 'NO' ;
17580 +        U_Churned  = 'No' ;
17581 +        END;
17582 +      END;
17583 +    END;
17584 +  END;
17585 +
17586 +*****  RESIDUALS R_ *************;
17587 +IF  F_Churned  NE 'YES'
17588 +AND F_Churned  NE 'NO'  THEN DO;
17589 +        R_ChurnedYes  = .;
17590 +        R_ChurnedNo  = .;
17591 + END;
17592 + ELSE DO;
17593 +       R_ChurnedYes  =  -P_ChurnedYes ;
17594 +       R_ChurnedNo  =  -P_ChurnedNo ;
17595 +       SELECT( F_Churned  );
17596 +          WHEN( 'YES'  ) R_ChurnedYes  = R_ChurnedYes  +1;
17597 +          WHEN( 'NO'  ) R_ChurnedNo  = R_ChurnedNo  +1;
17598 +       END;
17599 + END;
17600 +
17601 +****************************************************************;
17602 +******          END OF DECISION TREE SCORING CODE         ******;
17603 +****************************************************************;
17604 +
17605 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17606  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
17607  quit;
17608  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17609  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17610  *------------------------------------------------------------*;
17611  * Tree: Scoring TEST data;
17612  *------------------------------------------------------------*;
17613  data EMWS1.Tree_TEST
17614  / view=EMWS1.Tree_TEST
17615  ;
17616  set EMWS1.VarClus_TEST
17617  ;
17618  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17619 +****************************************************************;
17620 +******             DECISION TREE SCORING CODE             ******;
17621 +****************************************************************;
17622 +
17623 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17624 +LENGTH F_Churned  $    3;
17625 +LENGTH I_Churned  $    3;
17626 +LENGTH U_Churned  $    3;
17627 +LENGTH _WARN_  $    4;
17628 +
17629 +******              LABELS FOR NEW VARIABLES              ******;
17630 +label _NODE_ = 'Node' ;
17631 +label _LEAF_ = 'Leaf' ;
17632 +label P_ChurnedYes = 'Predicted: Churned=Yes' ;
17633 +label P_ChurnedNo = 'Predicted: Churned=No' ;
17634 +label Q_ChurnedYes = 'Unadjusted P: Churned=Yes' ;
17635 +label Q_ChurnedNo = 'Unadjusted P: Churned=No' ;
17636 +label V_ChurnedYes = 'Validated: Churned=Yes' ;
17637 +label V_ChurnedNo = 'Validated: Churned=No' ;
17638 +label R_ChurnedYes = 'Residual: Churned=Yes' ;
17639 +label R_ChurnedNo = 'Residual: Churned=No' ;
17640 +label F_Churned = 'From: Churned' ;
17641 +label I_Churned = 'Into: Churned' ;
17642 +label U_Churned = 'Unnormalized Into: Churned' ;
17643 +label _WARN_ = 'Warnings' ;
17644 +
17645 +
17646 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17647 +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
17648 +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
17649 +
17650 +
17651 +_ARBFMT_3 = PUT( Churned , $3.);
17652 + %DMNORMCP( _ARBFMT_3, F_Churned );
17653 +
17654 +******             ASSIGN OBSERVATION TO NODE             ******;
17655 +IF  NOT MISSING(Age_Zscore ) AND
17656 +      0.34117704268097 <= Age_Zscore  THEN DO;
17657 +  IF  NOT MISSING(IsActiveMemberNo ) AND
17658 +                     0.5 <= IsActiveMemberNo  THEN DO;
17659 +    IF  NOT MISSING(Age_Zscore ) AND
17660 +          0.91326978654266 <= Age_Zscore  THEN DO;
17661 +      IF  NOT MISSING(NumOfProducts ) AND
17662 +                         1.5 <= NumOfProducts  THEN DO;
17663 +        IF  NOT MISSING(NumOfProducts ) AND
17664 +                           2.5 <= NumOfProducts  THEN DO;
17665 +          _NODE_  =                   37;
17666 +          _LEAF_  =                   18;
17667 +          P_ChurnedYes  =                    1;
17668 +          P_ChurnedNo  =                    0;
17669 +          Q_ChurnedYes  =                    1;
17670 +          Q_ChurnedNo  =                    0;
17671 +          V_ChurnedYes  =                    1;
17672 +          V_ChurnedNo  =                    0;
17673 +          I_Churned  = 'YES' ;
17674 +          U_Churned  = 'Yes' ;
17675 +          END;
17676 +        ELSE DO;
17677 +          IF  NOT MISSING(Age_Zscore ) AND
17678 +            Age_Zscore  <      1.1993161584735 THEN DO;
17679 +            _NODE_  =                   42;
17680 +            _LEAF_  =                   16;
17681 +            P_ChurnedYes  =                 0.32;
17682 +            P_ChurnedNo  =                 0.68;
17683 +            Q_ChurnedYes  =                 0.32;
17684 +            Q_ChurnedNo  =                 0.68;
17685 +            V_ChurnedYes  =     0.21428571428571;
17686 +            V_ChurnedNo  =     0.78571428571428;
17687 +            I_Churned  = 'NO' ;
17688 +            U_Churned  = 'No' ;
17689 +            END;
17690 +          ELSE DO;
17691 +            _NODE_  =                   43;
17692 +            _LEAF_  =                   17;
17693 +            P_ChurnedYes  =     0.76190476190476;
17694 +            P_ChurnedNo  =     0.23809523809523;
17695 +            Q_ChurnedYes  =     0.76190476190476;
17696 +            Q_ChurnedNo  =     0.23809523809523;
17697 +            V_ChurnedYes  =     0.58823529411764;
17698 +            V_ChurnedNo  =     0.41176470588235;
17699 +            I_Churned  = 'YES' ;
17700 +            U_Churned  = 'Yes' ;
17701 +            END;
17702 +          END;
17703 +        END;
17704 +      ELSE DO;
17705 +        _NODE_  =                   24;
17706 +        _LEAF_  =                   15;
17707 +        P_ChurnedYes  =     0.87373737373737;
17708 +        P_ChurnedNo  =     0.12626262626262;
17709 +        Q_ChurnedYes  =     0.87373737373737;
17710 +        Q_ChurnedNo  =     0.12626262626262;
17711 +        V_ChurnedYes  =     0.85393258426966;
17712 +        V_ChurnedNo  =     0.14606741573033;
17713 +        I_Churned  = 'YES' ;
17714 +        U_Churned  = 'Yes' ;
17715 +        END;
17716 +      END;
17717 +    ELSE DO;
17718 +      IF  NOT MISSING(NumOfProducts ) AND
17719 +                         1.5 <= NumOfProducts  THEN DO;
17720 +        _NODE_  =                   23;
17721 +        _LEAF_  =                   14;
17722 +        P_ChurnedYes  =     0.30246913580246;
17723 +        P_ChurnedNo  =     0.69753086419753;
17724 +        Q_ChurnedYes  =     0.30246913580246;
17725 +        Q_ChurnedNo  =     0.69753086419753;
17726 +        V_ChurnedYes  =                 0.25;
17727 +        V_ChurnedNo  =                 0.75;
17728 +        I_Churned  = 'NO' ;
17729 +        U_Churned  = 'No' ;
17730 +        END;
17731 +      ELSE DO;
17732 +        _NODE_  =                   22;
17733 +        _LEAF_  =                   13;
17734 +        P_ChurnedYes  =                0.552;
17735 +        P_ChurnedNo  =                0.448;
17736 +        Q_ChurnedYes  =                0.552;
17737 +        Q_ChurnedNo  =                0.448;
17738 +        V_ChurnedYes  =     0.61363636363636;
17739 +        V_ChurnedNo  =     0.38636363636363;
17740 +        I_Churned  = 'YES' ;
17741 +        U_Churned  = 'Yes' ;
17742 +        END;
17743 +      END;
17744 +    END;
17745 +  ELSE DO;
17746 +    IF  NOT MISSING(NumOfProducts ) AND
17747 +                       2.5 <= NumOfProducts  THEN DO;
17748 +      _NODE_  =                   13;
17749 +      _LEAF_  =                   12;
17750 +      P_ChurnedYes  =     0.94871794871794;
17751 +      P_ChurnedNo  =     0.05128205128205;
17752 +      Q_ChurnedYes  =     0.94871794871794;
17753 +      Q_ChurnedNo  =     0.05128205128205;
17754 +      V_ChurnedYes  =     0.92857142857142;
17755 +      V_ChurnedNo  =     0.07142857142857;
17756 +      I_Churned  = 'YES' ;
17757 +      U_Churned  = 'Yes' ;
17758 +      END;
17759 +    ELSE DO;
17760 +      IF  NOT MISSING(NumOfProducts ) AND
17761 +                         1.5 <= NumOfProducts  THEN DO;
17762 +        _NODE_  =                   21;
17763 +        _LEAF_  =                   11;
17764 +        P_ChurnedYes  =     0.11475409836065;
17765 +        P_ChurnedNo  =     0.88524590163934;
17766 +        Q_ChurnedYes  =     0.11475409836065;
17767 +        Q_ChurnedNo  =     0.88524590163934;
17768 +        V_ChurnedYes  =     0.12883435582822;
17769 +        V_ChurnedNo  =     0.87116564417177;
17770 +        I_Churned  = 'NO' ;
17771 +        U_Churned  = 'No' ;
17772 +        END;
17773 +      ELSE DO;
17774 +        IF  NOT MISSING(Age_Zscore ) AND
17775 +              1.77140890233518 <= Age_Zscore  THEN DO;
17776 +          _NODE_  =                   31;
17777 +          _LEAF_  =                   10;
17778 +          P_ChurnedYes  =     0.14473684210526;
17779 +          P_ChurnedNo  =     0.85526315789473;
17780 +          Q_ChurnedYes  =     0.14473684210526;
17781 +          Q_ChurnedNo  =     0.85526315789473;
17782 +          V_ChurnedYes  =     0.19607843137254;
17783 +          V_ChurnedNo  =     0.80392156862745;
17784 +          I_Churned  = 'NO' ;
17785 +          U_Churned  = 'No' ;
17786 +          END;
17787 +        ELSE DO;
17788 +          _NODE_  =                   30;
17789 +          _LEAF_  =                    9;
17790 +          P_ChurnedYes  =     0.41806020066889;
17791 +          P_ChurnedNo  =      0.5819397993311;
17792 +          Q_ChurnedYes  =     0.41806020066889;
17793 +          Q_ChurnedNo  =      0.5819397993311;
17794 +          V_ChurnedYes  =     0.38518518518518;
17795 +          V_ChurnedNo  =     0.61481481481481;
17796 +          I_Churned  = 'NO' ;
17797 +          U_Churned  = 'No' ;
17798 +          END;
17799 +        END;
17800 +      END;
17801 +    END;
17802 +  END;
17803 +ELSE DO;
17804 +  IF  NOT MISSING(NumOfProducts ) AND
17805 +                     2.5 <= NumOfProducts  THEN DO;
17806 +    IF  NOT MISSING(Age_Zscore ) AND
17807 +         -0.13556691053708 <= Age_Zscore  THEN DO;
17808 +      _NODE_  =                   11;
17809 +      _LEAF_  =                    8;
17810 +      P_ChurnedYes  =     0.83333333333333;
17811 +      P_ChurnedNo  =     0.16666666666666;
17812 +      Q_ChurnedYes  =     0.83333333333333;
17813 +      Q_ChurnedNo  =     0.16666666666666;
17814 +      V_ChurnedYes  =     0.86666666666666;
17815 +      V_ChurnedNo  =     0.13333333333333;
17816 +      I_Churned  = 'YES' ;
17817 +      U_Churned  = 'Yes' ;
17818 +      END;
17819 +    ELSE DO;
17820 +      _NODE_  =                   10;
17821 +      _LEAF_  =                    7;
17822 +      P_ChurnedYes  =      0.6078431372549;
17823 +      P_ChurnedNo  =     0.39215686274509;
17824 +      Q_ChurnedYes  =      0.6078431372549;
17825 +      Q_ChurnedNo  =     0.39215686274509;
17826 +      V_ChurnedYes  =     0.65217391304347;
17827 +      V_ChurnedNo  =     0.34782608695652;
17828 +      I_Churned  = 'YES' ;
17829 +      U_Churned  = 'Yes' ;
17830 +      END;
17831 +    END;
17832 +  ELSE DO;
17833 +    IF  NOT MISSING(NumOfProducts ) AND
17834 +      NumOfProducts  <                  1.5 THEN DO;
17835 +      IF  NOT MISSING(IsActiveMemberNo ) AND
17836 +                         0.5 <= IsActiveMemberNo  THEN DO;
17837 +        IF  NOT MISSING(Age_Zscore ) AND
17838 +             -0.13556691053708 <= Age_Zscore  THEN DO;
17839 +          _NODE_  =                   29;
17840 +          _LEAF_  =                    4;
17841 +          P_ChurnedYes  =     0.29411764705882;
17842 +          P_ChurnedNo  =     0.70588235294117;
17843 +          Q_ChurnedYes  =     0.29411764705882;
17844 +          Q_ChurnedNo  =     0.70588235294117;
17845 +          V_ChurnedYes  =      0.3095238095238;
17846 +          V_ChurnedNo  =     0.69047619047619;
17847 +          I_Churned  = 'NO' ;
17848 +          U_Churned  = 'No' ;
17849 +          END;
17850 +        ELSE DO;
17851 +          _NODE_  =                   28;
17852 +          _LEAF_  =                    3;
17853 +          P_ChurnedYes  =     0.16108452950558;
17854 +          P_ChurnedNo  =     0.83891547049441;
17855 +          Q_ChurnedYes  =     0.16108452950558;
17856 +          Q_ChurnedNo  =     0.83891547049441;
17857 +          V_ChurnedYes  =     0.18181818181818;
17858 +          V_ChurnedNo  =     0.81818181818181;
17859 +          I_Churned  = 'NO' ;
17860 +          U_Churned  = 'No' ;
17861 +          END;
17862 +        END;
17863 +      ELSE DO;
17864 +        IF  NOT MISSING(GenderFemale ) AND
17865 +                           0.5 <= GenderFemale  THEN DO;
17866 +          _NODE_  =                   27;
17867 +          _LEAF_  =                    2;
17868 +          P_ChurnedYes  =     0.15776081424936;
17869 +          P_ChurnedNo  =     0.84223918575063;
17870 +          Q_ChurnedYes  =     0.15776081424936;
17871 +          Q_ChurnedNo  =     0.84223918575063;
17872 +          V_ChurnedYes  =                 0.16;
17873 +          V_ChurnedNo  =                 0.84;
17874 +          I_Churned  = 'NO' ;
17875 +          U_Churned  = 'No' ;
17876 +          END;
17877 +        ELSE DO;
17878 +          _NODE_  =                   26;
17879 +          _LEAF_  =                    1;
17880 +          P_ChurnedYes  =     0.09140767824497;
17881 +          P_ChurnedNo  =     0.90859232175502;
17882 +          Q_ChurnedYes  =     0.09140767824497;
17883 +          Q_ChurnedNo  =     0.90859232175502;
17884 +          V_ChurnedYes  =     0.11004784688995;
17885 +          V_ChurnedNo  =     0.88995215311004;
17886 +          I_Churned  = 'NO' ;
17887 +          U_Churned  = 'No' ;
17888 +          END;
17889 +        END;
17890 +      END;
17891 +    ELSE DO;
17892 +      IF  NOT MISSING(GenderFemale ) AND
17893 +                         0.5 <= GenderFemale  THEN DO;
17894 +        _NODE_  =                   19;
17895 +        _LEAF_  =                    6;
17896 +        P_ChurnedYes  =     0.06153846153846;
17897 +        P_ChurnedNo  =     0.93846153846153;
17898 +        Q_ChurnedYes  =     0.06153846153846;
17899 +        Q_ChurnedNo  =     0.93846153846153;
17900 +        V_ChurnedYes  =     0.05962059620596;
17901 +        V_ChurnedNo  =     0.94037940379403;
17902 +        I_Churned  = 'NO' ;
17903 +        U_Churned  = 'No' ;
17904 +        END;
17905 +      ELSE DO;
17906 +        _NODE_  =                   18;
17907 +        _LEAF_  =                    5;
17908 +        P_ChurnedYes  =     0.02966507177033;
17909 +        P_ChurnedNo  =     0.97033492822966;
17910 +        Q_ChurnedYes  =     0.02966507177033;
17911 +        Q_ChurnedNo  =     0.97033492822966;
17912 +        V_ChurnedYes  =                 0.02;
17913 +        V_ChurnedNo  =                 0.98;
17914 +        I_Churned  = 'NO' ;
17915 +        U_Churned  = 'No' ;
17916 +        END;
17917 +      END;
17918 +    END;
17919 +  END;
17920 +
17921 +*****  RESIDUALS R_ *************;
17922 +IF  F_Churned  NE 'YES'
17923 +AND F_Churned  NE 'NO'  THEN DO;
17924 +        R_ChurnedYes  = .;
17925 +        R_ChurnedNo  = .;
17926 + END;
17927 + ELSE DO;
17928 +       R_ChurnedYes  =  -P_ChurnedYes ;
17929 +       R_ChurnedNo  =  -P_ChurnedNo ;
17930 +       SELECT( F_Churned  );
17931 +          WHEN( 'YES'  ) R_ChurnedYes  = R_ChurnedYes  +1;
17932 +          WHEN( 'NO'  ) R_ChurnedNo  = R_ChurnedNo  +1;
17933 +       END;
17934 + END;
17935 +
17936 +****************************************************************;
17937 +******          END OF DECISION TREE SCORING CODE         ******;
17938 +****************************************************************;
17939 +
17940 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17941  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
17942  quit;
17943  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
17945  proc sort data=WORK.EM_USER_REPORT;
17946  by ID VIEW;
17947  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17948  *------------------------------------------------------------*;
17949  * Tree: Computing metadata for TRAIN data;
17950  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
18322  data WORK.MODELTEMP_INFO;
18323  set EMWS1.Tree_EMINFO;
18324  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
18325  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18326  data EMWS1.Tree_EMINFO;
18327  length TARGET KEY $32 DATA $43;
18328  input TARGET KEY DATA $;
18329  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18333  run;
18334  data EMWS1.Tree_EMINFO;
18335  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
18336  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18337  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
18338  by TARGET KEY;
18339  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                October 23, 2020
Time:                19:47:10
*------------------------------------------------------------*
18363  data EMWS1.Tree_EMOUTFIT;
18364  set EMWS1.Tree_EMOUTFIT;
18365  length TargetLabel $200;
18366  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18367  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18368  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
18369  by TARGET;
18370  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18371  %let _EMwarndup = 0;
18372  %let _EMtargetdup =;
18373  %let _EMASEtargetdup =;
18374  data _null_;
18375  set EMWS1.Tree_EMOUTFIT;
18376  if .<_ASE_<0.000001 then do;
18377  call symput('_EMwarndup', '1');
18378  call symput('_EMtargetdup', target);
18379  call symput('_EMASEtargetdup', put(_ASE_, best.));
18380  end;
18381  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18382  %let EMEXCEPTIONSTRING=;
18383  *------------------------------------------------------------*;
18384  * REPORT: Tree;
18385  *------------------------------------------------------------*;
18386  %let EM_ACTION = REPORT;
18387  %let syscc = 0;
18388  %macro main;
18389
18390    %if %upcase(&EM_ACTION) = CREATE %then %do;
18391      filename temp catalog 'sashelp.emmodl.tree_create.source';
18392      %include temp;
18393      filename temp;
18394
18395      %em_tree_create;
18396    %end;
18397
18398     %else
18399     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18400
18401         filename temp catalog 'sashelp.emmodl.tree_train.source';
18402         %include temp;
18403         filename temp;
18404         %em_tree_train;
18405     %end;
18406
18407    %else
18408    %if %upcase(&EM_ACTION) = SCORE %then %do;
18409      filename temp catalog 'sashelp.emmodl.tree_score.source';
18410      %include temp;
18411      filename temp;
18412
18413      %em_tree_score;
18414
18415    %end;
18416
18417    %else
18418    %if %upcase(&EM_ACTION) = REPORT %then %do;
18419
18420         filename temp catalog 'sashelp.emmodl.tree_report.source';
18421         %include temp;
18422         filename temp;
18423
18424         %em_tree_report;
18425     %end;
18426
18427    %else
18428    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18429
18430         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18431         %include temp;
18432         filename temp;
18433         %EM_TREE_OPENTREEVIEWER;
18434
18435     %end;
18436
18437    %else
18438    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18439
18440         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18441         %include temp;
18442         filename temp;
18443         %EM_TREE_CLOSETREEVIEWER;
18444
18445     %end;
18446
18447
18448     %doendm:
18449  %mend main;
18450
18451  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18453 +%macro em_tree_makePlotDs( multipleTar= );
18455 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18456 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18457 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18458 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18460 +  /* determine if validation statistics will be displayed */
18461 +  %let validflag=N;
18462 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18463 +    /* determine if validation data exists */
18464 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18465 +      %let validflag=Y;
18466 +    %end;
18467 +  %end;
18469 +   /* retrieve name of decmeta even in presence of multiple targets */
18470 +   %let decmeta = ;
18471 +   %if &EM_DEC_DECMETA eq %then %do;
18472 +     data _Target;
18473 +       set &em_data_variableset;
18474 +       where ROLE='TARGET' and USE in('D', 'Y');
18475 +       keep NAME;
18476 +     run;
18477 +     proc sort data=_Target;
18478 +       by NAME;
18479 +     run;
18480 +     proc sort data=EM_TARGETDECINFO;
18481 +       by TARGET;
18482 +     run;
18483 +     data _Target;
18484 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18485 +       by NAME;
18486 +       if _a then do;
18487 +         call symput('decmeta', trim(DECMETA));
18488 +       end;
18489 +     run;
18490 +     proc delete data=_Target;run;
18491 +   %end;
18492 +   %else %let decmeta = &EM_DEC_DECMETA;
18495 +  /* retrieve targetEvent from decmeta */
18496 +  %let targetEvent=;
18497 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18498 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18499 +      data _null_;
18500 +       set &DECMETA(where=(_TYPE_="TARGET"));
18501 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18502 +      run;
18503 +    %end;
18504 +  %end;
18506 +  /* retrieve predicted var for targetEvent from decmeta */
18507 +  %let predTarget=;
18508 +  %let predLvl=;
18509 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18510 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18511 +      data _null_;
18512 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18513 +       call symput('predTarget', strip(VARIABLE));
18514 +       call symput('predLvl', strip(LEVEL));
18515 +      run;
18516 +    %end;
18517 +  %end;
18518 +  %else %do;
18519 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18520 +      data _null_;
18521 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18522 +       call symput('predTarget', strip(VARIABLE));
18523 +      run;
18524 +    %end;
18525 +  %end;
18527 +  /* create BelowText value */
18528 +  data belowtext;
18529 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18530 +    keep node belowtext;
18531 +  run;
18533 +  /* relace belowtext with variable label if it exists */
18534 +  data belowtext2;
18535 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18536 +    keep node belowtextlbl;
18537 +  run;
18539 +  proc sort data=belowtext; by node; run;
18540 +  proc sort data=belowtext2; by node; run;
18542 +  data belowtext;
18543 +    merge belowtext belowtext2(in=_a);
18544 +    by node;
18545 +    if _a then belowtext=belowtextlbl;
18546 +    keep node belowtext;
18547 +  run;
18549 +  /* create AboveText value */
18550 +  data abovetext;
18551 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18552 +  run;
18553 +  proc sort data=abovetext; by node numeric_value; run;
18555 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18556 +  data abovetext;
18557 +    set abovetext(rename=(node=parent));
18558 +    by parent numeric_value;
18559 +    retain abovetext tempstring flag branch origval origchar ;
18560 +    length abovetext $256;
18561 +    length tempstring origchar $64;
18563 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18564 +      if first.parent then do;
18565 +        if missing(character_value) then do;
18566 +          numeric_value = round(numeric_value, &sp_precision);
18567 +          abovetext = "< "||strip(NUMERIC_VALUE);
18568 +          branch = 1;
18569 +          origval = numeric_value;
18570 +          output;
18571 +        end;
18572 +        else do;
18573 +          abovetext = "< "||strip(CHARACTER_VALUE);
18574 +          branch = 1;
18575 +          origchar = character_value;
18576 +          output;
18577 +        end;
18579 +        if first.parent AND last.parent then do;
18580 +          if missing(character_value) then do;
18581 +            numeric_value = round(numeric_value, &sp_precision);
18582 +            branch = branch + 1;
18583 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18584 +            output;
18585 +          end;
18586 +          else do;
18587 +            branch = branch + 1;
18588 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18589 +            output;
18590 +          end;
18591 +        end;
18592 +      end;
18593 +      else if last.parent then do;
18594 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18595 +          if missing(character_value) then do;
18596 +            numeric_value = round(numeric_value, &sp_precision);
18597 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18598 +          end;
18599 +          else do;
18600 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18601 +          end;
18602 +          branch = branch + 1;
18603 +          output;
18605 +          if missing(character_value) then do;
18606 +            numeric_value = round(numeric_value, &sp_precision);
18607 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18608 +          end;
18609 +          else do;
18610 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18611 +          end;
18612 +          branch = branch + 1;
18613 +          output;
18614 +        end;
18615 +        else do;
18616 +          if missing(character_value) then do;
18617 +            numeric_value = round(numeric_value, &sp_precision);
18618 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18619 +          end;
18620 +          else do;
18621 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18622 +          end;
18623 +          branch = branch + 1;
18624 +          output;
18625 +        end;
18626 +      end;
18627 +      else do;
18628 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18629 +          if missing(character_value) then do;
18630 +            numeric_value = round(numeric_value,&sp_precision);
18631 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18632 +            origval = numeric_value;
18633 +          end;
18634 +          else do;
18635 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18636 +            origchar = character_value;
18637 +          end;
18638 +          branch = branch + 1;
18639 +          output;
18641 +        end;
18642 +        else do;
18643 +          if missing(character_value) then do;
18644 +            numeric_value = round(numeric_value, &sp_precision);
18645 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18646 +            origval = numeric_value;
18647 +          end;
18648 +          else do;
18649 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18650 +            origval = character_value;
18651 +          end;
18652 +          branch = branch + 1;
18653 +          output;
18654 +        end;
18655 +      end;
18656 +    end;
18657 +    else do;
18658 +       if first.numeric_value then do;
18659 +         flag = 0;
18660 +         abovetext = strip(CHARACTER_VALUE);
18661 +         branch = numeric_value;
18662 +         if first.numeric_value AND last.numeric_value then do;
18663 +           output;
18664 +         end;
18665 +       end;
18666 +       else if last.numeric_value then do;
18667 +         if flag=0 then do;
18668 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18669 +           length = length(strip(tempstring));
18670 +           if length < 32 then do;
18671 +             abovetext = strip(tempstring);
18672 +           end;
18673 +           else do;
18674 +             abovetext = strip(abovetext)||", ...";
18675 +             flag = 1;
18676 +           end;
18677 +         end;
18678 +         branch = numeric_value;
18679 +         output;
18680 +       end;
18681 +       else do;
18682 +         if flag=0 then do;
18683 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18684 +           length = length(strip(tempstring));
18685 +           if length < 32 then do;
18686 +             abovetext = strip(tempstring);
18687 +           end;
18688 +           else do;
18689 +             abovetext = strip(abovetext)||", ...";
18690 +             flag=1;
18691 +           end;
18692 +         end;
18693 +         branch = numeric_value;
18694 +       end;
18695 +    end;
18696 +    keep parent branch abovetext;
18697 +  run;
18699 +  /* MIssing value to abovetext */
18700 +  data tempmissing;
18701 +    set &EM_USER_OUTRULES;
18702 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18703 +    rename node=parent numeric_value=branch character_value=misschar;
18704 +  run;
18707 +  proc sort data=abovetext; by parent branch; run;
18708 +  proc sort data=tempmissing; by parent branch; run;
18709 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18711 +  data tempoutnodes;
18712 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18713 +    by parent branch;
18714 +    length traintotal validtotal 8;
18715 +    retain traintotal validtotal;
18717 +    if _a then do;
18718 +      if ^MISSING(abovetext) then do;
18719 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18720 +      end;
18721 +      else do;
18722 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18723 +      end;
18724 +    end;
18725 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18727 +    if node=1 then do;
18728 +      traintotal = N;
18729 +      validtotal=VN;
18730 +    end;
18732 +    drop role rank stat misschar belowtext;
18733 +  run;
18734 +  proc sort data=tempoutnodes; by node; run;
18735 +  proc sort data=belowtext; by node; run;
18737 +  data tempoutnodes;
18738 +    merge tempoutnodes belowtext;
18739 +    by node;
18741 +  run;
18743 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18744 +  %let adjusted = N;
18745 +  %let npriors = 0;
18746 +  data _null_ ;
18747 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18748 +    if eof then do ;
18749 +      call symput("npriors" , strip(put(_N_,best.))) ;
18750 +    end;
18751 +  run;
18752 +  %if &npriors gt 0 %then %let adjusted=Y;
18755 +  /* create a table with targetUsed and targetLevel columns for each node */
18756 +  data temptarmeta;
18757 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18758 +    %if &multipleTar eq N %then %do;
18759 +      AND USE in ('D', 'Y')
18760 +    %end;
18761 +    ));
18762 +    length TARGET $32;
18763 +    Target=name;
18764 +    keep target level;
18765 +  run;
18767 +  %if &multipleTar eq Y %then %do;
18768 +    data temptargetused;
18769 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18770 +      keep node target;
18771 +    run;
18772 +    proc sort data=temptargetused; by target; run;
18773 +    proc sort data=temptarmeta; by target; run;
18774 +    data temptargetused;
18775 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18776 +      by target;
18777 +      if _a and _b;
18778 +    run;
18779 +  %end;
18780 +  %else %do;
18781 +    data temptargetused;
18782 +      set &EM_USER_OUTSTATS;
18783 +      length target $32 tarlevel $10;
18784 +      target="%EM_TARGET";
18785 +      tarlevel="%EM_TARGET_LEVEL";
18786 +      keep node target tarlevel;
18787 +    run;
18788 +    proc sort data=temptargetused nodupkey; by node; run;
18789 +  %end;
18791 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18792 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18793 +  proc sort data=temptargetused; by node; run;
18796 +  /* create tables for all interval targets as well as all class targets */
18797 +  data tempinterval tempclass;
18798 +    merge tempoutstats temptargetused( rename=(target=targetused));
18799 +    by node;
18800 +    %if "&multipleTar" eq "Y" %then %do;
18801 +      if ((missing(Target)) OR (target=targetused ));
18802 +    %end;
18804 +    if tarlevel="INTERVAL" then output tempinterval;
18805 +    else output tempclass;
18806 +  run;
18808 +  /* iniitalize intTarget and classTarget flags */
18809 +  %let em_intNobs =0;
18810 +  %let em_classNobs = 0;
18811 +  %let em_intTarget= N;
18812 +  %let em_classTarget= N;
18814 +  proc sql;
18815 +    reset noprint;
18816 +    select count(*) into :em_intNobs from tempinterval;
18817 +  quit;
18818 +  proc sql;
18819 +    reset noprint;
18820 +    select count(*) into :em_classNobs from tempclass;
18821 +  quit;
18823 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18824 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18826 +  /* retrieve all information for interval targets */
18827 +  %if &em_intTarget eq Y %then %do;
18829 +    /* determine if leaf variable exists */
18830 +    %let dsid=%sysfunc(open(tempinterval,i));
18831 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18832 +    %let rc=%sysfunc(close(&dsid));
18834 +    proc transpose data=tempinterval
18835 +      %if &leafexists %then %do;
18836 +        (drop=leaf)
18837 +      %end;
18838 +      %if &validexist %then %do;
18839 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18840 +      %end;
18841 +      %else %do;
18842 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18843 +      %end;
18844 +      by node;
18845 +      id statname;
18846 +    run;
18847 +    data tempinterval;
18848 +      set tempinterval;
18849 +      if missing(N) then delete;
18850 +    run;
18851 +  %end;
18853 +  /* retrieve all information for class targets */
18854 +  %if &em_classTarget eq Y %then %do;
18855 +    proc sort data=tempclass; by node category; run;
18856 +    %if &validflag eq N %then %do;
18857 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18858 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18859 +    %end;
18860 +    %else %do;
18861 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18862 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18863 +    %end;
18864 +      set tempclass;
18866 +      %if &validflag eq N %then %do;
18867 +        %if "&adjusted" eq "N" %then %do;
18868 +          if statname="N" then output tempn;
18869 +        %end;
18870 +        %else %do;
18871 +          if statname="NPRIORS" then output tempn;
18872 +        %end;
18873 +        else if statname="PREDICTION" then output temppredict;
18874 +        else if statname="PROBABILITY" then output tempprob;
18875 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18876 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18877 +      %end;
18878 +      %else %do;
18879 +        %if "&adjusted" eq "N" %then %do;
18880 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18881 +        %end;
18882 +        %else %do;
18883 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18884 +        %end;
18885 +        else if statname="PREDICTION" then output temppredict;
18886 +        else if statname="PROBABILITY" then output tempprob;
18887 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18888 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18889 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18890 +      %end;
18891 +    run;
18894 +    /* determine if profit/loss exists in tempprofit */
18895 +    %let em_profitflag=0;
18896 +    %let em_lossflag=0;
18897 +    proc sql;
18898 +      reset noprint;
18899 +      select count(*) into :em_profitflag from tempprofit;
18900 +    quit;
18901 +    proc sql;
18902 +      reset noprint;
18903 +      select count(*) into :em_lossflag from temploss;
18904 +    quit;
18906 +    %if &validFlag eq Y %then %do;
18907 +      proc transpose data=tempn
18908 +        %if "&adjusted" eq "N" %then %do;
18909 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18910 +        %end;
18911 +        %else %do;
18912 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18913 +        %end;
18914 +        by node;
18915 +        id statname;
18916 +      run;
18917 +      %if &em_profitflag ne 0 %then %do;
18918 +        proc transpose data=tempprofit out=tempprofit;
18919 +          by node category;
18920 +          id statname ;
18921 +        run;
18922 +      %end;
18923 +      %if &em_lossflag ne 0 %then %do;
18924 +        proc transpose data=temploss out=temploss;
18925 +          by node category;
18926 +          id statname ;
18927 +        run;
18928 +      %end;
18929 +      data tempprob;
18930 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18931 +        by node
18932 +        %if &multipleTar eq Y %then %do;
18933 +          target
18934 +        %end;
18935 +        category;
18936 +      run;
18937 +    %end;
18939 +    /* store percentcorrect value */
18940 +    data temppredict;
18941 +      merge tempprob temppredict(in=_a);
18942 +      by node category;
18943 +      if _a then do;
18944 +        percentCorrect = statvalue;
18945 +        %if &validFlag eq Y %then %do;
18946 +          vpercentCorrect= vstatvalue;
18947 +        %end;
18948 +      end;
18949 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18950 +      %if &validFlag eq Y %then %do;
18951 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18952 +      %end;
18953 +      ;
18954 +      if missing(percentCorrect) then delete;
18955 +      drop target;
18956 +    run;
18958 +    /* build profittext */
18959 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18960 +      data tempprofittext(keep= node profittext profitloss);
18961 +        length profittext $800 profitloss 8.;
18962 +        retain profittext profitloss;
18964 +        merge tempprob
18965 +        %if &em_profitflag ne 0 %then %do;
18966 +          tempprofit
18967 +        %end;
18968 +        %else %if &em_lossflag ne 0 %then %do;
18969 +          temploss
18970 +        %end;
18971 +        ;
18972 +        by node category;
18974 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18975 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18976 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18977 +          %let profittype = ALL;
18978 +        %end;
18980 +        /* create the profitloss variable for nodecolor if selected */
18981 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18983 +        %if "&profittype" eq "ALL" %then %do;
18984 +          if strip(CATEGORY)="&targetEvent" then do;
18985 +            profitloss=statvalue;
18986 +          end;
18987 +          if first.node then do;
18988 +            %if &validFlag eq N %then %do;
18989 +             %if &em_profitflag ne 0 %then %do;
18990 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18991 +             %end;
18992 +             %if &em_lossflag ne 0 %then %do;
18993 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18994 +             %end;
18995 +            %end;
18996 +            %else %do;
18997 +             %if &em_profitflag ne 0 %then %do;
18998 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18998!+;
18999 +             %end;
19000 +             %if &em_lossflag ne 0 %then %do;
19001 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19002 +             %end;
19003 +            %end;
19004 +          end;
19005 +          else if last.node then do;
19006 +            %if &validFlag eq N %then %do;
19007 +             %if &em_profitflag ne 0 %then %do;
19008 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19009 +             %end;
19010 +             %if &em_lossflag ne 0 %then %do;
19011 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19012 +             %end;
19013 +             /*if CATEGORY="&targetEvent" then do;
19014 +               profitloss=statvalue;
19015 +             end;*/
19016 +            %end;
19017 +            %else %do;
19018 +             %if &em_profitflag ne 0 %then %do;
19019 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19019!+14.&EM_PROPERTY_SPLITPRECISION);
19020 +                if CATEGORY="&targetEvent" then do;
19021 +                 profitloss=ALTERNATIVE_PROFIT;
19022 +                end;
19023 +             %end;
19024 +             %if &em_lossflag ne 0 %then %do;
19025 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19025!+14.&EM_PROPERTY_SPLITPRECISION);
19026 +                if CATEGORY="&targetEvent" then do;
19027 +                  profitloss=ALTERNATIVE_LOSS;
19028 +                end;
19029 +             %end;
19030 +            %end;
19031 +            output;
19032 +          end;
19033 +          else do;
19034 +            %if &validFlag eq N %then %do;
19035 +             %if &em_profitflag ne 0 %then %do;
19036 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19037 +             %end;
19038 +             %if &em_lossflag ne 0 %then %do;
19039 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19040 +             %end;
19041 +            %end;
19042 +            %else %do;
19043 +             %if &em_profitflag ne 0 %then %do;
19044 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
19044!+14.&EM_PROPERTY_SPLITPRECISION);
19045 +             %end;
19046 +             %if &em_lossflag ne 0 %then %do;
19047 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
19047!+14.&EM_PROPERTY_SPLITPRECISION);
19048 +             %end;
19049 +            %end;
19050 +          end;
19051 +        %end;
19052 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19053 +          if strip(CATEGORY) = "&targetevent" then do;
19054 +            %if &validFlag eq N %then %do;
19055 +             %if &em_profitflag ne 0 %then %do;
19056 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19057 +             %end;
19058 +             %if &em_lossflag ne 0 %then %do;
19059 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
19060 +             %end;
19061 +             profitloss=statvalue;
19062 +            %end;
19063 +            %else %do;
19064 +             %if &em_profitflag ne 0 %then %do;
19065 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
19065!+;
19066 +                profitloss=ALTERNATIVE_PROFIT;
19067 +             %end;
19068 +             %if &em_lossflag ne 0 %then %do;
19069 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
19070 +                profitloss=ALTERNATIVE_LOSS;
19071 +             %end;
19072 +            %end;
19073 +            output;
19074 +          end;
19075 +        %end;
19076 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
19077 +          if strip(CATEGORY) = "&targetevent" then do;
19078 +            %if &validFlag eq N %then %do;
19079 +             profitloss=statvalue;
19080 +            %end;
19081 +            %else %do;
19082 +             %if &em_profitflag ne 0 %then %do;
19083 +                profitloss=ALTERNATIVE_PROFIT;
19084 +             %end;
19085 +             %if &em_lossflag ne 0 %then %do;
19086 +                profitloss=ALTERNATIVE_LOSS;
19087 +             %end;
19088 +            %end;
19089 +            output;
19090 +          end;
19091 +        %end;
19092 +      run;
19093 +    %end;
19095 +    data tempprob(keep= node probtext);
19096 +      length probtext $800;
19097 +      retain probtext;
19098 +      set tempprob ;
19099 +      by node;
19101 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
19102 +      %let probtype = &EM_PROPERTY_TARGET;
19103 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
19104 +        %let probtype = ALL;
19105 +      %end;
19107 +      %if "&probtype" eq "ALL" %then %do;
19108 +        if first.node then do;
19109 +          %if &validFlag eq N %then %do;
19110 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19111 +          %end;
19112 +          %else %do;
19113 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19114 +          %end;
19115 +        end;
19116 +        else if last.node then do;
19117 +          %if &validFlag eq N %then %do;
19118 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19119 +          %end;
19120 +          %else %do;
19121 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19122 +          %end;
19123 +          output;
19124 +        end;
19125 +        else do;
19126 +          %if &validFlag eq N %then %do;
19127 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19128 +          %end;
19129 +          %else %do;
19130 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19131 +          %end;
19132 +        end;
19133 +      %end;
19134 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
19135 +        if strip(CATEGORY) = "&targetevent" then do;
19136 +          %if &validFlag eq N %then %do;
19137 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
19138 +          %end;
19139 +          %else %do;
19140 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
19141 +          %end;
19142 +          output;
19143 +        end;
19144 +      %end;
19145 +      %else %if "&probtype" eq "NONE" %then %do;
19146 +        if last.node then do;
19147 +          output;
19148 +        end;
19149 +      %end;
19150 +    run;
19151 +  %end;
19153 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
19155 +  %let oldexists=0;
19156 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
19157 +     data old_tree_plot;
19158 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
19159 +        rename nodecolor=oldnodecolor;
19160 +     run;
19162 +     proc sort data=old_tree_plot;
19163 +        by node;
19164 +     run;
19166 +     %let oldexists=1;
19167 +  %end;
19169 +  data &EM_USER_TREE_PLOT;
19170 +    length textall $800;
19171 +    merge tempoutnodes temptargetused
19173 +    %if &em_intTarget eq Y %then %do;
19174 +      tempinterval
19175 +    %end;
19177 +    %if &em_classTarget eq Y %then %do;
19179 +      %if &validFlag eq N %then %do;
19180 +        tempn(rename=(statvalue=N))
19181 +      %end;
19182 +      %else %do;
19183 +        tempn
19184 +      %end;
19186 +      temppredict tempprob
19188 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
19189 +        tempprofittext
19190 +      %end;
19191 +    %end;
19192 +    ;
19193 +    by node;
19195 +    /* build nodetext based on user selection */
19196 +    textall="";
19198 +    %if &em_intTarget eq Y %then %do;
19199 +    if tarlevel="INTERVAL" then do;
19200 +      /* Nodeid */
19201 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19202 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19203 +      %end;
19205 +      /* Target identifier if multiple targets are used */
19206 +      %if "&multipleTar" eq "Y" %then %do;
19207 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19208 +      %end;
19210 +      %if &validFlag eq Y %then %do;
19211 +         /* Column labels displayed in validflag eq Y only */
19212 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19213 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19213!+noquote ))";
19214 +         %end;
19216 +         /* Average values */
19217 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19218 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19219 +         %end;
19221 +         /* RASE */
19222 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19223 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
19224 +         %end;
19226 +         /* Count */
19227 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19228 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
19229 +         %end;
19230 +      %end;
19231 +      %else %do;
19232 +         /* Average values */
19233 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
19234 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
19235 +         %end;
19237 +         /* RASE */
19238 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
19239 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
19240 +         %end;
19242 +         /* Count */
19243 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19244 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
19245 +         %end;
19246 +      %end;
19248 +      /* nodecolor */
19249 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
19250 +        nodecolor=PREDICTION;
19251 +      %end;
19252 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
19253 +        nodecolor=RASE;
19254 +      %end;
19255 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
19256 +        nodecolor=1;
19257 +      %end;
19259 +    end;
19260 +    %end;
19261 +    %if &em_classTarget eq Y %then %do;
19262 +    if tarlevel^="INTERVAL" then  do;
19264 +      /* Nodeid */
19265 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
19266 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
19267 +      %end;
19268 +      /* Target identifier if multiple targets are used */
19269 +      %if "&multipleTar" eq "Y" %then %do;
19270 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19271 +      %end;
19273 +      /* Predicted values */
19274 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19275 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19276 +      %end;
19278 +      /* Column labels displayed in validflag eq Y only */
19279 +      %if "&ValidFlag" eq "Y" %then %do;
19280 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19281 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19281!+noquote ))";
19282 +        %end;
19283 +      %end;
19285 +      /* Target Values */
19286 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19287 +        textall=strip(textall)||"0A"x||strip(probtext);
19288 +      %end;
19290 +      /* include profit or loss for all target levels */
19291 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19292 +        textall=strip(textall)||"0A"x||strip(profittext);
19293 +      %end;
19295 +      %if &validFlag eq N %then %do;
19296 +        /* Percent Correct */
19297 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19298 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19299 +        %end;
19301 +         /* Count */
19302 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19303 +          %if "&adjusted" eq "N" %then %do;
19304 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19305 +          %end;
19306 +          %else %do;
19307 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19308 +          %end;
19309 +         %end;
19310 +      %end;
19311 +      %else %do;
19312 +        /* Percent Correct */
19313 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19314 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19315 +        %end;
19317 +         /* Count */
19318 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19319 +          %if "&adjusted" eq "N" %then %do;
19320 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19321 +          %end;
19322 +          %else %do;
19323 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19324 +          %end;
19325 +         %end;
19326 +      %end;
19328 +      /* nodecolor */
19329 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19330 +       %if &multipleTar ne Y %then %do;
19331 +        nodecolor=&predTarget;
19332 +       %end;
19333 +       %else %do;
19334 +         nodecolor=percentcorrect;
19335 +       %end;
19336 +      %end;
19337 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19338 +        nodecolor=percentcorrect;
19339 +      %end;
19340 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19341 +        nodecolor=1;
19342 +      %end;
19343 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19344 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19345 +          nodecolor=percentcorrect;
19346 +        %end;
19347 +        %else %do;
19348 +          nodecolor=profitloss;
19349 +        %end;
19350 +      %end;
19352 +    end;
19353 +    %end;
19354 +    %if &em_intTarget eq Y %then %do;
19355 +     drop  PREDICTION  TARGET TARLEVEL
19356 +     %if &ValidFlag eq Y %then %do;
19357 +         VPREDICTION
19358 +     %end;
19359 +     ;
19360 +    %end;
19361 +    %if &em_classTarget eq Y %then %do;
19362 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19363 +     %if &ValidFlag eq Y %then %do;
19364 +         VSTATVALUE
19365 +     %end;
19366 +     ;
19367 +    %end;
19369 +  run;
19371 +  /* add leaf index information to plotds - based on primary target only*/
19372 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19373 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19374 +      set &EM_USER_OUTSTATS;
19375 +      if ((statname="PROBABILITY"
19376 +      %if &validexist %then %do;
19377 +       or statname="VALID: PROBABILITY"
19378 +      %end;
19379 +      ) AND (CATEGORY="&TARGETEVENT")
19380 +      %if "&multipleTar" eq "Y" %then %do;
19381 +        AND (Target="%EM_TARGET")
19382 +      %end;
19383 +      );
19384 +    run;
19386 +    %if &validexist %then %do;
19387 +      proc sort data=tempprob; by node; run;
19388 +      %let vpredTarget = V%substr(&predTarget, 2);
19389 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19390 +         by node;
19391 +         id statname;
19392 +      run;
19393 +    %end;
19394 +  %end;
19395 +  %else %do;
19396 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19397 +      set &EM_USER_OUTSTATS;
19398 +      if ((statname="PREDICTION"
19399 +      %if &validexist %then %do;
19400 +       or statname="VALID: PREDICTION"
19401 +      %end;
19402 +      )
19403 +      %if "&multipleTar" eq "Y" %then %do;
19404 +        AND (Target="%EM_TARGET")
19405 +      %end;
19406 +      );
19407 +    run;
19408 +    %if &validexist %then %do;
19409 +      proc sort data=tempprob; by node; run;
19410 +      %let vpredTarget = V%substr(&predTarget, 2);
19411 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19412 +         by node;
19413 +         id statname;
19414 +      run;
19415 +    %end;
19416 +  %end;
19418 +  proc sort data=tempprob; by node; run;
19419 +  data tempoutnodes;
19420 +    merge tempoutnodes tempprob;
19421 +    by node;
19422 +  run;
19424 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19425 +  data tempnodes;
19426 +    retain traintotal validtotal;
19427 +    set tempnodes(where=(leaf ne . ));
19428 +    tprob=round(&predTarget, .01);
19429 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19430 +      percevent_train=round(tprob*100, .01);
19431 +    %end;
19432 +    %else %do;
19433 +      percevent_train=tprob;
19434 +    %end;
19436 +    perc_train=round((n/traintotal)*100, 0.01);
19437 +    /* leafwidth already has a *10 multiplier */
19438 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19440 +    %if &validexist %then %do;
19441 +      %let vpredTarget = V%substr(&predTarget,2);
19442 +      vprob=round(&vpredTarget, .01);
19443 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19444 +        percevent_valid=round(vprob*100, .01);
19445 +      %end;
19446 +      %else %do;
19447 +        percevent_valid=vprob;
19448 +      %end;
19449 +      perc_valid=round((vn/validtotal)*100, .01);
19450 +    %end;
19452 +    index=_N_;
19453 +    keep node index tprob perc_train percevent_train
19454 +    %if &validexist %then %do;
19455 +        vprob percevent_valid perc_valid
19456 +    %end;
19457 +    ;
19458 +  run;
19459 +  proc sort data=tempnodes; by node; run;
19460 +  data &EM_USER_TREE_PLOT;
19461 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19462 +    by node;
19463 +    if missing(node) then delete;
19464 +    %if &oldexists %then %do;
19465 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19466 +      drop oldnodecolor;
19467 +    %end;
19468 +    abovetext = compbl(abovetext);
19470 +    /* add variable labels */
19471 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19472 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19473 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19474 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19475 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19476 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19478 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19479 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19480 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19481 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19482 +          %end;
19483 +          %else %do;
19484 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19485 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19486 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19487 +          %end;
19488 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19490 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19491 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19492 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19493 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19494 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19495 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19496 +          %end;
19497 +          %else %do;
19498 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19499 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19500 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19501 +          %end;
19502 +    ;
19503 +  run;
19505 +  /* delete temporary tables */
19506 +  proc datasets lib=work nolist;
19507 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19508 +  run;
19510 +%mend em_tree_makePlotDs;
19514 +%macro em_tree_report;
19516 +   /* report properties */
19517 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19518 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19519 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19520 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19521 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19522 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19523 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19524 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19525 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19526 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19527 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19528 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19529 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19531 +   %let validexist=0;
19532 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19533 +     %let validexist=1;
19534 +   %end;
19536 +   /* determine if multiple targets will be processed */
19537 +   %let em_tree_multipleTargets=N;
19538 +   %let em_tree_numTarget=1;
19539 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19540 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19541 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19542 +         %let em_tree_multipleTargets=N;
19543 +      %end;
19544 +      %else %do;
19545 +        data _null_;
19546 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19547 +          if eof then
19548 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19549 +        run;
19551 +        %if &em_tree_numTarget gt 1 %then %do;
19552 +           %let em_tree_multipleTargets=Y;
19553 +        %end;
19554 +     %end;
19555 +   %end;
19557 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19559 +   /* variable importance */
19560 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19561 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19563 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19564 +     /* and the columns may not be generated                                                                                 */
19565 +     %let em_tree_cvexists=;
19566 +     %let em_tree_surrexists=.;
19567 +     data _null_;
19568 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19569 +       if eof then do ;
19570 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19571 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19572 +       end;
19573 +     run;
19575 +     data &EM_USER_OUTIMPORT;
19576 +         set &EM_USER_OUTIMPORT;
19577 +         /* format columns based on Precison value specified */
19578 +         format importance 15.&EM_PROPERTY_PRECISION
19579 +              %if &validexist %then %do;
19580 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19581 +              %end;
19582 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19583 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19584 +              %end;
19585 +         ;
19586 +     run;
19588 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19589 +     proc print data=&EM_USER_OUTIMPORT
19590 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19591 +          (where=((nrules>0) OR (nsurrogates>0)))
19592 +        %end;
19593 +        %else %do;
19594 +           (where=(nrules>0))
19595 +        %end;
19596 +        label noobs
19597 +        ;
19598 +     run;
19599 +     title10;
19601 +   %end;
19603 +   /* Sequence */
19604 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19605 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19606 +   data _null_ ;
19607 +      set &EM_USER_outseq (obs=2) end=eof ;
19608 +      if eof then do ;
19609 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19610 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19611 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19612 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19613 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19614 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19615 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19616 +      end;
19617 +    run;
19619 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19620 +      data &EM_USER_OUTSEQ;
19621 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19622 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19623 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19624 +           _XMISC_=_VMISC_
19625 +        %end;
19626 +        %if "&em_tree_aprof" ne "."  %then %do;
19627 +           _XAPROF_=_VAPROF_
19628 +           _XPROF_ = _VPROF_
19629 +        %end;
19630 +        %if "&em_tree_aloss" ne "."  %then %do;
19631 +           _XALOSS_=_VALOSS_
19632 +        %end;
19633 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19634 +           _XPASE_ = _VPASE_
19635 +           _XPMISC_ = _VPMISC_
19636 +        %end;
19638 +        ));
19639 +     %end;
19640 +     %else %do;
19641 +        set &EM_USER_OUTSEQ;
19642 +     %end;
19644 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19645 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19646 +            _MISC_   15.&EM_PROPERTY_PRECISION
19647 +         %end;
19648 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19649 +            _PASE_  15.&EM_PROPERTY_PRECISION
19650 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19651 +         %end;
19652 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19653 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19654 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19655 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19656 +            %end;
19657 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19658 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19659 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19660 +            %end;
19661 +         %end;
19662 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19663 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19664 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19665 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19666 +            %end;
19667 +         %end;
19668 +         %if "&em_tree_seq" ne "." %then %do;
19669 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19670 +         %end;
19671 +         %if "&em_tree_vseq" ne "." %then %do;
19672 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19673 +         %end;
19674 +         %if "&em_tree_aprof" ne "." %then %do;
19675 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19676 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19677 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19678 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19679 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19680 +           %end;
19681 +         %end;
19682 +         %else %if "&em_tree_aloss" ne "." %then %do;
19683 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19684 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19685 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19686 +           %end;
19687 +         %end;
19688 +      ;
19689 +    run;
19690 +   %end;
19692 +   /* Observation Based Importance */
19693 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19695 +      /* need to check for 0 obs */
19696 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19697 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19698 +      %let rc=%sysfunc(close(&dsid));
19700 +      %if &onobs %then %do;
19701 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19702 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19704 +         data &EM_USER_OUTOBSIMP;
19705 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19706 +           if _a;
19707 +           by _INPUT1_;
19708 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19709 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19710 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19711 +                   %end;
19712 +                   ;
19713 +         run;
19714 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19715 +      %end;
19716 +   %end;
19718 +  %end;
19720 +  /* create dataset to support tree diagram and icicle plot */
19721 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19722 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19724 +  /* display tree diagram */
19725 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19726 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19728 +  /* display icicle diagram */
19729 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19730 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19732 +  /* Leaf Statistics Plot */
19733 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19735 +  /* print leaf information to output window */
19736 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19738 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19739 +       by descending N;
19740 +     run;
19742 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19743 +     %local vn;
19744 +     data _null_;
19745 +       set t (obs=2) end=eof;
19746 +       if eof then do;
19747 +         call symput("vn", strip(put(vn, best.)));
19748 +       end;
19749 +     run;
19751 +     data t;
19752 +       set t;
19753 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19754 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19755 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19756 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19757 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19758 +       %end;
19759 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19760 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19761 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19762 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19763 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19764 +          %end;
19765 +       %end;
19766 +       ;
19767 +     run;
19769 +     /* determine if rase is found in t */
19770 +    %let dsid=%sysfunc(open(t,i));
19771 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19772 +    %let rc=%sysfunc(close(&dsid));
19774 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19775 +     proc print data=t noobs label;
19776 +       where tprob ne .;
19777 +       var node depth N tprob
19778 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19779 +         %if "&vn" ne "." %then %do;
19780 +           VN
19781 +         %end;
19782 +         vprob
19783 +       %end;
19784 +       %if &raseexists %then %do;
19785 +            RASE
19786 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19787 +              VRASE
19788 +            %end;
19789 +       %end;
19790 +       ;
19791 +     run;
19792 +     title10;
19793 +  %end;
19795 +  /* create plots that are done during training of node */
19796 +  /* display iterative plot, including reference line */
19797 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19798 +   /* %if &nleaves eq  %then %do; */
19799 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19800 +      data _null_;
19801 +        set &EM_USER_OUTTOPOLOGY end=eof;
19802 +        if eof then do;
19803 +          call symput('nleaves', LEAF);
19804 +        end;
19805 +      run;
19806 +   /* %end; */
19808 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19809 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19810 +  %end;
19812 +  /* display leaf statistics */
19813 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19815 +  /* stats by node if multiple targets = Y */
19816 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19817 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19818 +    data &EM_USER_OUTSTATS;
19819 +      set &EM_USER_OUTSTATS;
19821 +     * if STATNAME="TARGET" then delete;
19822 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19823 +      drop leaf;
19824 +    run;
19825 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19827 +  %end;
19828 +  %else %do;
19829 +    /* add outstats and outdescribe to spk but not results */
19830 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19831 +  %end;
19833 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 22 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURNED_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='YES');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 4 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 4 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 17 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 308 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 34 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 17 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 34 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 17 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 17 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 245 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 210 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 245 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 245 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 245 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 70 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 70 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 35 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 35 observations read from the data set WORK.TEMPN.
NOTE: There were 35 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 245 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 70 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 70 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 35 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 35 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 35 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 35 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 18 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 18 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 35 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 35 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 35 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 18 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      297:141
NOTE: There were 35 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
19834
19835  *------------------------------------------------------------*;
19836  * End REPORT: Tree;
19837  *------------------------------------------------------------*;
 
19838  /* Reset EM Options */
19839  options formchar="|----|+|---+=|-/\<>*";
19840  options nocenter ls=256 ps=10000;
19841  goptions reset=all device=GIF NODISPLAY;
 
19842  proc sort data=WORK.EM_USER_REPORT;
19843  by ID VIEW;
19844  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19845  proc sort data=EMWS1.VarClus_CMeta_TRAIN out=WORK.SUBSETINMETA;
19846  by NAME;
19847  run;
 
NOTE: There were 10 observations read from the data set EMWS1.VARCLUS_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 10 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19848  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19849  by NAME;
19850  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19851  data WORK.ASSESS_META;
19852  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19853  by NAME;
19854  run;
 
NOTE: There were 10 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 10 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 10 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19855  data EM_temp_assessMeta;
19856  set EMWS1.Tree_CMeta_TRAIN;
19857  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19858  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19859  data EM_temp_assessdata;
19860  set EMWS1.Tree_TRAIN(keep=
19861  F_Churned
19862  I_Churned
19863  P_ChurnedNo
19864  P_ChurnedYes
19865  Q_ChurnedNo
19866  Q_ChurnedYes
19867  R_ChurnedNo
19868  R_ChurnedYes
19869  U_Churned
19870  V_ChurnedNo
19871  V_ChurnedYes
19872  _WARN_
19873  Churned
19874  );
19875  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 5383 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: There were 5383 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 5383 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
24156   data EM_temp_assessMeta;
24157   set EMWS1.Tree_CMeta_TRAIN;
24158   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24159   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24160   data EM_temp_assessdata;
24161   set EMWS1.Tree_VALIDATE(keep=
24162   F_Churned
24163   I_Churned
24164   P_ChurnedNo
24165   P_ChurnedYes
24166   Q_ChurnedNo
24167   Q_ChurnedYes
24168   R_ChurnedNo
24169   R_ChurnedYes
24170   U_Churned
24171   V_ChurnedNo
24172   V_ChurnedYes
24173   _WARN_
24174   Churned
24175   );
24176   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2308 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2308 observations read from the data set EMWS1.VARCLUS_VALIDATE.
NOTE: There were 2308 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2308 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28466   %let _cn = %sysfunc(getoption(CENTER));
28467   options nocenter;
28468   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
28469   var STAT LABEL TRAIN
28470   VALIDATE
28471   TEST
28472   ;
28473   by TARGET TARGETLABEL;
28474   title9 ' ';
28475   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28476   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28477   title10;
28478   options &_cn;
 
28479   proc sort data=EMWS1.Tree_EMCLASSIFICATION nothreads;
28480   by DATAROLE TARGET TARGETLABEL;
28481   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28482   %let _cn = %sysfunc(getoption(CENTER));
28483   options nocenter;
28484   proc print data=EMWS1.Tree_EMCLASSIFICATION noobs label;
28485   var from into pct_row pct_col count percent
28486   ;
28487   by DATAROLE TARGET TARGETLABEL;
28488   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28489   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28490   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28491   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28492   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28493   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28494   where _TYPE_='PREDICTION';
28495   title9 ' ';
28496   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28497   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28498   title9;
28499   title10;
28500   options &_cn;
 
28501   %let _cn = %sysfunc(getoption(CENTER));
28502   options nocenter;
28503   data EMWS1.Tree_EMEVENTREPORT;
28504   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28504 !  8;
28505   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28505 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28505 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28505 ! FALSEEVENT
28506   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28506 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28506 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28507      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28508   FALSEEVENT=0;
28509   FALSENEVENT=0;
28510   TRUEEVENT=0;
28511   TRUENEVENT=0;
28512   set EMWS1.Tree_EMEVENTREPORT;
28513   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28514   proc print data=EMWS1.Tree_EMEVENTREPORT noobs label;
28515   title9 ' ';
28516   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28517   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28518   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28519   title10;
28520   options &_cn;
 
28521   proc datasets library=EMWS1 nolist;
28522   modify Tree_EMRANK;
28523   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28524   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28525   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
28526   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28527   %let _cn = %sysfunc(getoption(CENTER));
28528   options nocenter;
28529   proc print data=EMWS1.Tree_EMRANK label noobs;
28530   var
28531   decile gain lift liftc resp respc N _meanP_;
28532   by
28533   notsorted DATAROLE
28534   notsorted TARGET
28535   notsorted TARGETLABEL
28536   ;
28537   title9 ' ';
28538   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28539   run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28540   title10;
28541   options &_cn;
 
28542   proc datasets library=EMWS1 nolist;
28543   modify Tree_EMSCOREDIST;
28544   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28545   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28546   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
28547   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
