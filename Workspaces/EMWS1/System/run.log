NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
16065      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16066      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16067      put '<Node Id="FIMPORT2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT2" Event="Update" Pid="" Gridid=""/>';
16068      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16069      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT2 : Beginning update before running 
* datetime : 24OCT2020:18:48:20 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16271      %let emexceptionString =;
16272      %let EMEXCEPTIONSTRING=;
16273      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16274      * UPDATE: FIMPORT2;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT2;
16275      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16276      %let EM_ACTION = UPDATE;
16277      %let syscc = 0;
16278      /* Fimport.source */
16279      %macro main;
16280            %if %upcase(&EM_ACTION) = CREATE %then %do;
16281               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
16282               %include temp;
16283               filename temp;
16284               %create;
16285            %end;
16286            %else
16287            %if %upcase(&EM_ACTION) = TRAIN %then %do;
16288               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
16289               %include temp;
16290               filename temp;
16291               %train;
16292            %end;
16293            %else
16294            %if %upcase(&EM_ACTION) = UPDATE %then %do;
16295               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
16296               %include temp;
16297               filename temp;
16298               %update;
16299            %end;
16300            %else
16301            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
16302               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16303               %include temp;
16304               filename temp;
16305               %property;
16306            %end;
16307             %else
16308            %if %upcase(&EM_ACTION) = SCORE %then %do;
16309               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
16310               %include temp;
16311               filename temp;
16312               %score;
16313            %end;
16314            %else
16315            %if %upcase(&EM_ACTION) = REPORT %then %do;
16316               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
16317               %include temp;
16318               filename temp;
16319               %report;
16320            %end;
16321            %else
16322            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
16323               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16324               %include temp;
16325               filename temp;
16326               %openvariableset;
16327            %end;
16328            %else
16329            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
16330               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16331               %include temp;
16332               filename temp;
16333               %closevariableset;
16334            %end;
16335      %mend main;
16336      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
16337     +%macro update;
16338     +    %let oldrole = %str();
16339     +    data _null_;
16340     +       set &em_data_exportset;
16341     +       where NODEPORT='TRAIN';
16342     +       call symput('oldrole', ROLE);
16343     +    run;
16344     +    %if &oldrole ne &em_property_role %then %do;
16345     +        data &em_data_exportset;
16346     +           set &em_data_exportset;
16347     +           if NODEPORT='TRAIN' then do;
16348     +              ROLE="&em_property_role";
16349     +              NEEDUPDATE='Y';
16350     +              EXPORT='Y';
16351     +           end;
16352     +        run;
16353     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
16354     +        data _null_;
16355     +           file x;
16356     +           put ' ';
16357     +        run;
16358     +        filename x;
16359     +    %end;
16360     +    %else %do;
16361     +        data &em_data_exportset;
16362     +           set &em_data_exportset;
16363     +           if NODEPORT='TRAIN' then do;
16364     +              ROLE="&em_property_role";
16365     +              NEEDUPDATE='Y';
16366     +              EXPORT='Y';
16367     +           end;
16368     +        run;
16369     +    %end;
16370     +
16371     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
16372     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
16373     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
16374     +           set &em_user_emcmetadefault;
16375     +           drop DROP;
16376     +           where DROP='N';
16377     +        run;
16378     +    %end;
16379     +
16380     +%mend update;
16381     +
16382     +
16383     +
16384     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS1.FIMPORT2_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT2_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):   data EMWS1.FIMPORT2_ExportSet;
MPRINT(UPDATE):   set EMWS1.FIMPORT2_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="TRAIN";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT2_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT2_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16385      *------------------------------------------------------------*;
16386      * End UPDATE: FIMPORT2;
16387      *------------------------------------------------------------*;

16388      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16390      %let _HPDMGRIDHOST=;
16391      %let _HPDMGRIDINSTALLLOC=;
16392      %let _HPDMGRIDDATASERVER=;
16393      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* FIMPORT2 : End update 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
16394      %let _emdsep = \;
16395      %em_getactionstatus(emlib =EMWS1, nodeid=FIMPORT2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16396      %let em_filemodtime=;
16397      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16398      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16399      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16400      where fileref eq "#LN00118";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00118";
16401      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16402      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00118';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16403      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16404      %let em_Train = N;
16405      %let em_Score = N;
16406      %let em_Report = N;
16407      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

16408      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16409      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16410      put '<Node Id="FIMPORT2" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT2" Event="Complete" Pid="" Gridid=""/>';
16411      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16412      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16413      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16414      put '<Node Id="FIMPORT" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Update" Pid="" Gridid=""/>';
16415      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16416      %let emloopmode =;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning update before running 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16618      %let emexceptionString =;
16619      %let EMEXCEPTIONSTRING=;
16620      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16621      * UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   * UPDATE: FIMPORT;
16622      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16623      %let EM_ACTION = UPDATE;
16624      %let syscc = 0;
16625      /* Fimport.source */
16626      %macro main;
16627            %if %upcase(&EM_ACTION) = CREATE %then %do;
16628               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
16629               %include temp;
16630               filename temp;
16631               %create;
16632            %end;
16633            %else
16634            %if %upcase(&EM_ACTION) = TRAIN %then %do;
16635               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
16636               %include temp;
16637               filename temp;
16638               %train;
16639            %end;
16640            %else
16641            %if %upcase(&EM_ACTION) = UPDATE %then %do;
16642               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
16643               %include temp;
16644               filename temp;
16645               %update;
16646            %end;
16647            %else
16648            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
16649               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16650               %include temp;
16651               filename temp;
16652               %property;
16653            %end;
16654             %else
16655            %if %upcase(&EM_ACTION) = SCORE %then %do;
16656               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
16657               %include temp;
16658               filename temp;
16659               %score;
16660            %end;
16661            %else
16662            %if %upcase(&EM_ACTION) = REPORT %then %do;
16663               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
16664               %include temp;
16665               filename temp;
16666               %report;
16667            %end;
16668            %else
16669            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
16670               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16671               %include temp;
16672               filename temp;
16673               %openvariableset;
16674            %end;
16675            %else
16676            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
16677               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
16678               %include temp;
16679               filename temp;
16680               %closevariableset;
16681            %end;
16682      %mend main;
16683      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_update.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_UPDATE.SOURCE.
16684     +%macro update;
16685     +    %let oldrole = %str();
16686     +    data _null_;
16687     +       set &em_data_exportset;
16688     +       where NODEPORT='TRAIN';
16689     +       call symput('oldrole', ROLE);
16690     +    run;
16691     +    %if &oldrole ne &em_property_role %then %do;
16692     +        data &em_data_exportset;
16693     +           set &em_data_exportset;
16694     +           if NODEPORT='TRAIN' then do;
16695     +              ROLE="&em_property_role";
16696     +              NEEDUPDATE='Y';
16697     +              EXPORT='Y';
16698     +           end;
16699     +        run;
16700     +        filename x "&EM_NODEDIR.&EM_DSEP._updatePath.st";
16701     +        data _null_;
16702     +           file x;
16703     +           put ' ';
16704     +        run;
16705     +        filename x;
16706     +    %end;
16707     +    %else %do;
16708     +        data &em_data_exportset;
16709     +           set &em_data_exportset;
16710     +           if NODEPORT='TRAIN' then do;
16711     +              ROLE="&em_property_role";
16712     +              NEEDUPDATE='Y';
16713     +              EXPORT='Y';
16714     +           end;
16715     +        run;
16716     +    %end;
16717     +
16718     +    %em_getname(key=EMCMETADEFAULT, type=DATA);
16719     +    %if %sysfunc(exist(&em_user_emcmetadefault)) and ^%sysfunc(exist(&em_lib..&em_nodeid._CMETA_TRAIN)) %then %do;
16720     +        data &em_lib..&em_nodeid._CMETA_TRAIN;
16721     +           set &em_user_emcmetadefault;
16722     +           drop DROP;
16723     +           where DROP='N';
16724     +        run;
16725     +    %end;
16726     +
16727     +%mend update;
16728     +
16729     +
16730     +
16731     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(UPDATE):   data _null_;
MPRINT(UPDATE):   set EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   where NODEPORT='TRAIN';
MPRINT(UPDATE):   call symput('oldrole', ROLE);
MPRINT(UPDATE):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
      WHERE NODEPORT='TRAIN';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(UPDATE):   data EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   set EMWS1.FIMPORT_ExportSet;
MPRINT(UPDATE):   if NODEPORT='TRAIN' then do;
MPRINT(UPDATE):   ROLE="TRAIN";
MPRINT(UPDATE):   NEEDUPDATE='Y';
MPRINT(UPDATE):   EXPORT='Y';
MPRINT(UPDATE):   end;
MPRINT(UPDATE):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(UPDATE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16732      *------------------------------------------------------------*;
16733      * End UPDATE: FIMPORT;
16734      *------------------------------------------------------------*;

16735      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16737      %let _HPDMGRIDHOST=;
16738      %let _HPDMGRIDINSTALLLOC=;
16739      %let _HPDMGRIDDATASERVER=;
16740      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* FIMPORT : End update 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
16741      %let _emdsep = \;
16742      %em_getactionstatus(emlib =EMWS1, nodeid=FIMPORT);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16743      proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
16744      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 12 observations read from the data set EMWS1.FIMPORT_EMTRAINVARIABLE.
NOTE: There were 12 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 0 observations and 8 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16745      %let diffVar = N;
16746      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16747      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
16748      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
16749      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 0 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16750      %let em_filemodtime=;
16751      data _null_;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
16752      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16753      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16754      where fileref eq "#LN00138";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00138";
16755      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16756      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00138';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16757      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16758      %let em_Train = N;
16759      %let em_Score = N;
16760      %let em_Report = N;
16761      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

16762      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16763      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16764      put '<Node Id="FIMPORT" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="FIMPORT" Event="Complete" Pid="" Gridid=""/>';
16765      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16766      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16767      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "FIMPORT2" is up to date and doesn't need to run. 
Node "FIMPORT" is up to date and doesn't need to run. 
Traverser: WaitingNode "CLUS2" 
Traverser: WaitingNode "PROF2" 
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF" 
Traverser: WaitingNode "FILTER3" 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16768      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16769      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16770      put '<Node Id="Stat" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Update" Pid="" Gridid=""/>';
16771      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16772      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Stat : Beginning update before running 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Stat_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16793      %let _HPDMGRIDHOST=;
16794      %let _HPDMGRIDINSTALLLOC=;
16795      %let _HPDMGRIDDATASERVER=;
16796      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Stat : End update 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
16797      %let _emdsep = \;
16798      %em_getactionstatus(emlib =EMWS1, nodeid=Stat);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16799      %let em_Train = N;
16800      %let em_Score = N;
16801      %let em_Report = N;
16802      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

16803      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16804      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16805      put '<Node Id="Stat" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Stat" Event="Complete" Pid="" Gridid=""/>';
16806      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16807      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16808      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16809      put '<Node Id="Filter2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter2" Event="Update" Pid="" Gridid=""/>';
16810      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16811      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Filter2 : Beginning update before running 
* datetime : 24OCT2020:18:48:21 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Filter2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
16830      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16831      * Filter2: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Filter2: Update Variables Set;
16832      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

16833      proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_SortedVar;
16834      by name;
MPRINT(EM_DIAGRAM):   by name;
16835      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE ^in("ID", "TEXT");
MPRINT(EM_DIAGRAM):   run;
16840      proc sort data=EMWS1.Filter2_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter2_VariableSet;
16841      by name;
MPRINT(EM_DIAGRAM):   by name;
16842      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER2_VARIABLESET.
NOTE: The data set EMWS1.FILTER2_VARIABLESET has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16843      data EMWS1.Filter2_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Filter2_VariableSet;
16844      merge _SortedVar(in=_a) EMWS1.Filter2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Filter2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
16845      by name;
MPRINT(EM_DIAGRAM):   by name;
16846      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
16847      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
16848      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.FILTER2_VARIABLESET.
NOTE: The data set EMWS1.FILTER2_VARIABLESET has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16849      * Filter2: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Filter2: End of Update Variables Set;
16850      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16852      %let _HPDMGRIDHOST=;
16853      %let _HPDMGRIDINSTALLLOC=;
16854      %let _HPDMGRIDDATASERVER=;
16855      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Filter2 : End update 
* datetime : 24OCT2020:18:48:22 
* 
*------------------------------------------------------------* 
16856      %let _emdsep = \;
16857      %em_getactionstatus(emlib =EMWS1, nodeid=Filter2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16858      %let em_Train = Y;
16859      %let em_Report = Y;
16860      %let em_Score = Y;
16861      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

16862      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16863      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16864      put '<Node Id="Filter2" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter2" Event="Run" Pid="" Gridid=""/>';
16865      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16866      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
16867      %let SYSCC=0;
16868      signon C2LZ9DO1 macvar=C2LZ9DO1;
MPRINT(EM_DIAGRAM):   signon macvar=C2LZ9DO1;
WARNING: TCP Access method tracing is enabled.
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C2LZ9DO1 commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.02 seconds
      cpu time            0.06 seconds
      
NOTE: Remote signon to C2LZ9DO1 complete.
16869      rsubmit C2LZ9DO1 wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C2LZ9DO1 in progress.
NOTE: Remote submit to C2LZ9DO1 commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Filter2);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Filter2;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Filter2 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Filter2 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
16870      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16871      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16872      put '<Node Id="Filter2" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter2" Event="Run" Pid=" " Gridid=""/>';
16873      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16874      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16875      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16876      put '<Node Id="Filter" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Update" Pid="" Gridid=""/>';
16877      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16878      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Filter : Beginning update before running 
* datetime : 24OCT2020:18:48:25 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Filter_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
16897      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16898      * Filter: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Filter: Update Variables Set;
16899      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

16900      proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.FIMPORT_CMeta_TRAIN out=_SortedVar;
16901      by name;
MPRINT(EM_DIAGRAM):   by name;
16902      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FIMPORT_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE ^in("ID", "TEXT");
MPRINT(EM_DIAGRAM):   run;
16907      proc sort data=EMWS1.Filter_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_VariableSet;
16908      by name;
MPRINT(EM_DIAGRAM):   by name;
16909      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER_VARIABLESET.
NOTE: The data set EMWS1.FILTER_VARIABLESET has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16910      data EMWS1.Filter_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Filter_VariableSet;
16911      merge _SortedVar(in=_a) EMWS1.Filter_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Filter_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
16912      by name;
MPRINT(EM_DIAGRAM):   by name;
16913      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
16914      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
16915      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.FILTER_VARIABLESET.
NOTE: The data set EMWS1.FILTER_VARIABLESET has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16916      * Filter: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Filter: End of Update Variables Set;
16917      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16919      %let _HPDMGRIDHOST=;
16920      %let _HPDMGRIDINSTALLLOC=;
16921      %let _HPDMGRIDDATASERVER=;
16922      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Filter : End update 
* datetime : 24OCT2020:18:48:25 
* 
*------------------------------------------------------------* 
16923      %let _emdsep = \;
16924      %em_getactionstatus(emlib =EMWS1, nodeid=Filter);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16925      %let em_Train = Y;
16926      %let em_Report = Y;
16927      %let em_Score = Y;
16928      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

16929      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16930      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16931      put '<Node Id="Filter" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Run" Pid="" Gridid=""/>';
16932      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16933      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
16934      %let SYSCC=0;
16935      signon C12NY5FT macvar=C12NY5FT;
MPRINT(EM_DIAGRAM):   signon macvar=C12NY5FT;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C12NY5FT commencing (SAS Release 9.04.01M3P062415).
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Filter2);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Filter2;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Filter2 : Running 
* datetime : 24OCT2020:18:48:25 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
12903  data EMWS1.Filter2_EMTRAINVARIABLE;
12904  length NAME $64;
12905  set EMWS1.Filter2_VariableSet;
12906  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
12907     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
12908  label CALCMETHOD = "%sysfunc(sasmsg(sashelp.dmine, META_CALCMETHOD_VLABEL, NOQUOTE))";
12909  label KEEPMISSING = "%sysfunc(sasmsg(sashelp.dmine, META_KEEPMISSING_VLABEL, NOQUOTE))";
12910  label MINFREQ = "%sysfunc(sasmsg(sashelp.dmine, META_MINFREQ_VLABEL, NOQUOTE))";
12911  label MAXVALUES = "%sysfunc(sasmsg(sashelp.dmine, META_MAXVALUES_VLABEL, NOQUOTE))";
12912  label INTERVALMIN = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMIN_VLABEL, NOQUOTE))";
12913  label INTERVALMAX = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMAX_VLABEL, NOQUOTE))";
12914  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
12915  drop lowerlimit upperlimit creator--type format--length;
12916  run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER2_VARIABLESET.
NOTE: The data set EMWS1.FILTER2_EMTRAINVARIABLE has 11 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

12917  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Filter2 : End run 
* datetime : 24OCT2020:18:48:28 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-3.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           2.81 seconds
      cpu time            2.28 seconds
      

12920   %put &&emexceptionstring;
 
12921   %sysrput emerror_Filter2 = &&emexceptionstring;
12922   %put &&emloopmode;
 
12923   %sysrput emloopmode_Filter2 = &&emloopmode;
NOTE: Remote submit to C2LZ9DO1 complete.
NOTE: Remote signoff from C2LZ9DO1 commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           4.76 seconds
      cpu time            2.34 seconds
      
NOTE: Remote signoff from C2LZ9DO1 complete.
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.37 seconds
      cpu time            0.07 seconds
      
NOTE: Remote signon to C12NY5FT complete.
16936      rsubmit C12NY5FT wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C12NY5FT in progress.
NOTE: Remote submit to C12NY5FT commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Filter);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Filter;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Filter = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Filter = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
16937      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16938      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16939      put '<Node Id="Filter" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Run" Pid=" " Gridid=""/>';
16940      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16941      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16942      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Filter2" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Filter2" succeeded. 
16944      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16945      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16946      put '<Node Id="Filter2" Event="Complete" Pid="54040" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter2" Event="Complete" Pid="54040" Gridid=""/>';
16947      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Stat" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF2" 
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF" 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
NOTE: The task "C2LZ9DO1" is not an active task.
16948      waitfor _all_ C2LZ9DO1;
MPRINT(EM_DIAGRAM):    waitfor _all_ C2LZ9DO1;
16949      signoff C2LZ9DO1;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C2LZ9DO1 does not exist.  SIGNOFF is not necessary.
16950      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
16951      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16952      put '<Node Id="Clus2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus2" Event="Update" Pid="" Gridid=""/>';
16953      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16954      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Clus2 : Beginning update before running 
* datetime : 24OCT2020:18:48:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Clus2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
16973      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16974      * Clus2: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Clus2: Update Variables Set;
16975      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

16976      proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_SortedVar;
16977      by name;
MPRINT(EM_DIAGRAM):   by name;
16978      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FILTER2_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE in("INPUT" "REJECTED" "FREQ" "ID");
MPRINT(EM_DIAGRAM):   run;
16983      proc sort data=EMWS1.Clus2_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus2_VariableSet;
16984      by name;
MPRINT(EM_DIAGRAM):   by name;
16985      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS2_VARIABLESET.
NOTE: The data set EMWS1.CLUS2_VARIABLESET has 11 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

16986      data EMWS1.Clus2_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus2_VariableSet;
16987      merge _SortedVar(in=_a) EMWS1.Clus2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Clus2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
16988      by name;
MPRINT(EM_DIAGRAM):   by name;
16989      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
16990      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
16991      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
16992      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.CLUS2_VARIABLESET.
NOTE: The data set EMWS1.CLUS2_VARIABLESET has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16993      * Clus2: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Clus2: End of Update Variables Set;
16994      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16996      %let _HPDMGRIDHOST=;
16997      %let _HPDMGRIDINSTALLLOC=;
16998      %let _HPDMGRIDDATASERVER=;
16999      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Clus2 : End update 
* datetime : 24OCT2020:18:48:30 
* 
*------------------------------------------------------------* 
17000      %let _emdsep = \;
17001      %em_getactionstatus(emlib =EMWS1, nodeid=Clus2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17002      %let em_Train = Y;
17003      %let em_Report = Y;
17004      %let em_Score = Y;
17005      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17006      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17007      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17008      put '<Node Id="Clus2" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus2" Event="Run" Pid="" Gridid=""/>';
17009      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17010      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
17011      %let SYSCC=0;
17012      signon C29GS_8I macvar=C29GS_8I;
MPRINT(EM_DIAGRAM):   signon macvar=C29GS_8I;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C29GS_8I commencing (SAS Release 9.04.01M3P062415).
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Filter);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Filter;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Filter : Running 
* datetime : 24OCT2020:18:48:29 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
12903  data EMWS1.Filter_EMTRAINVARIABLE;
12904  length NAME $64;
12905  set EMWS1.Filter_VariableSet;
12906  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
12907     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
12908  label CALCMETHOD = "%sysfunc(sasmsg(sashelp.dmine, META_CALCMETHOD_VLABEL, NOQUOTE))";
12909  label KEEPMISSING = "%sysfunc(sasmsg(sashelp.dmine, META_KEEPMISSING_VLABEL, NOQUOTE))";
12910  label MINFREQ = "%sysfunc(sasmsg(sashelp.dmine, META_MINFREQ_VLABEL, NOQUOTE))";
12911  label MAXVALUES = "%sysfunc(sasmsg(sashelp.dmine, META_MAXVALUES_VLABEL, NOQUOTE))";
12912  label INTERVALMIN = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMIN_VLABEL, NOQUOTE))";
12913  label INTERVALMAX = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMAX_VLABEL, NOQUOTE))";
12914  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
12915  drop lowerlimit upperlimit creator--type format--length;
12916  run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER_VARIABLESET.
NOTE: The data set EMWS1.FILTER_EMTRAINVARIABLE has 11 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

12917  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Filter : End run 
* datetime : 24OCT2020:18:48:32 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-3.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           2.72 seconds
      cpu time            2.18 seconds
      

12920   %put &&emexceptionstring;
 
12921   %sysrput emerror_Filter = &&emexceptionstring;
12922   %put &&emloopmode;
 
12923   %sysrput emloopmode_Filter = &&emloopmode;
NOTE: Remote submit to C12NY5FT complete.
NOTE: Remote signoff from C12NY5FT commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           4.94 seconds
      cpu time            2.29 seconds
      
NOTE: Remote signoff from C12NY5FT complete.
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.35 seconds
      cpu time            0.09 seconds
      
NOTE: Remote signon to C29GS_8I complete.
17013      rsubmit C29GS_8I wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C29GS_8I in progress.
NOTE: Remote submit to C29GS_8I commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Clus2);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Clus2;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Clus2 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Clus2 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
17014      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17015      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17016      put '<Node Id="Clus2" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus2" Event="Run" Pid=" " Gridid=""/>';
17017      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17018      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17019      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17020      put '<Node Id="Filter3" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Update" Pid="" Gridid=""/>';
17021      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17022      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Filter3 : Beginning update before running 
* datetime : 24OCT2020:18:48:33 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Filter3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
17041      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17042      * Filter3: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Filter3: Update Variables Set;
17043      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17044      proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter2_CMeta_TRAIN out=_SortedVar;
17045      by name;
MPRINT(EM_DIAGRAM):   by name;
17046      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FILTER2_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE ^in("ID", "TEXT");
MPRINT(EM_DIAGRAM):   run;
17051      proc sort data=EMWS1.Filter3_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter3_VariableSet;
17052      by name;
MPRINT(EM_DIAGRAM):   by name;
17053      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER3_VARIABLESET.
NOTE: The data set EMWS1.FILTER3_VARIABLESET has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17054      data EMWS1.Filter3_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Filter3_VariableSet;
17055      merge _SortedVar(in=_a) EMWS1.Filter3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Filter3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE CALCMETHOD KEEPMISSING MINFREQ MAXVALUES INTERVALMIN INTERVALMAX REPORT);
17056      by name;
MPRINT(EM_DIAGRAM):   by name;
17057      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
17058      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
17059      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.FILTER3_VARIABLESET.
NOTE: The data set EMWS1.FILTER3_VARIABLESET has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17060      * Filter3: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Filter3: End of Update Variables Set;
17061      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17063      %let _HPDMGRIDHOST=;
17064      %let _HPDMGRIDINSTALLLOC=;
17065      %let _HPDMGRIDDATASERVER=;
17066      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Filter3 : End update 
* datetime : 24OCT2020:18:48:33 
* 
*------------------------------------------------------------* 
17067      %let _emdsep = \;
17068      %em_getactionstatus(emlib =EMWS1, nodeid=Filter3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17069      %let em_Train = Y;
17070      %let em_Report = Y;
17071      %let em_Score = Y;
17072      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17073      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17074      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17075      put '<Node Id="Filter3" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Run" Pid="" Gridid=""/>';
17076      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17077      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
17078      %let SYSCC=0;
17079      signon C0J3WO_K macvar=C0J3WO_K;
MPRINT(EM_DIAGRAM):   signon macvar=C0J3WO_K;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C0J3WO_K commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.39 seconds
      cpu time            0.07 seconds
      
NOTE: Remote signon to C0J3WO_K complete.
17080      rsubmit C0J3WO_K wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C0J3WO_K in progress.
NOTE: Remote submit to C0J3WO_K commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Filter3);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Filter3;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Filter3 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Filter3 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
17081      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17082      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17083      put '<Node Id="Filter3" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Run" Pid=" " Gridid=""/>';
17084      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17085      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17086      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17087      put '<Node Id="Trans" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Update" Pid="" Gridid=""/>';
17088      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17089      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Trans : Beginning update before running 
* datetime : 24OCT2020:18:48:36 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Trans_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17109      %let _HPDMGRIDHOST=;
17110      %let _HPDMGRIDINSTALLLOC=;
17111      %let _HPDMGRIDDATASERVER=;
17112      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Trans : End update 
* datetime : 24OCT2020:18:48:37 
* 
*------------------------------------------------------------* 
17113      %let _emdsep = \;
17114      %em_getactionstatus(emlib =EMWS1, nodeid=Trans);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17115      %let em_filemodtime=;
17116      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
17117      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17118      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17119      where fileref eq "#LN00287";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00287";
17120      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17121      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00287';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17122      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17123      %let em_filemodtime=;
17124      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
17125      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
17126      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
17127      where fileref eq "#LN00288";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00288";
17128      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
17129      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00288';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17130      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
17131      %let em_Train = N;
17132      %let em_Score = N;
17133      %let em_Report = N;
17134      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

17135      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17136      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17137      put '<Node Id="Trans" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Complete" Pid="" Gridid=""/>';
17138      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17139      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17140      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Filter" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Filter" succeeded. 
17142      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17143      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17144      put '<Node Id="Filter" Event="Complete" Pid="69052" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter" Event="Complete" Pid="69052" Gridid=""/>';
17145      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Trans" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF2" 
Traverser: WaitingNode "PROF" 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
NOTE: The task "C12NY5FT" is not an active task.
17146      waitfor _all_ C12NY5FT;
MPRINT(EM_DIAGRAM):    waitfor _all_ C12NY5FT;
17147      signoff C12NY5FT;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C12NY5FT does not exist.  SIGNOFF is not necessary.
17148      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
17149      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17150      put '<Node Id="Clus" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus" Event="Update" Pid="" Gridid=""/>';
17151      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17152      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Clus : Beginning update before running 
* datetime : 24OCT2020:18:48:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Clus_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
17171      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17172      * Clus: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Clus: Update Variables Set;
17173      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17174      proc sort data=EMWS1.Filter_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter_CMeta_TRAIN out=_SortedVar;
17175      by name;
MPRINT(EM_DIAGRAM):   by name;
17176      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FILTER_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE in("INPUT" "REJECTED" "FREQ" "ID");
MPRINT(EM_DIAGRAM):   run;
17181      proc sort data=EMWS1.Clus_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_VariableSet;
17182      by name;
MPRINT(EM_DIAGRAM):   by name;
17183      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set EMWS1.CLUS_VARIABLESET has 11 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17184      data EMWS1.Clus_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_VariableSet;
17185      merge _SortedVar(in=_a) EMWS1.Clus_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Clus_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
17186      by name;
MPRINT(EM_DIAGRAM):   by name;
17187      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
17188      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
17189      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
17190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set EMWS1.CLUS_VARIABLESET has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17191      * Clus: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Clus: End of Update Variables Set;
17192      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17194      %let _HPDMGRIDHOST=;
17195      %let _HPDMGRIDINSTALLLOC=;
17196      %let _HPDMGRIDDATASERVER=;
17197      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Clus : End update 
* datetime : 24OCT2020:18:48:37 
* 
*------------------------------------------------------------* 
17198      %let _emdsep = \;
17199      %em_getactionstatus(emlib =EMWS1, nodeid=Clus);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17200      %let em_Train = Y;
17201      %let em_Report = Y;
17202      %let em_Score = Y;
17203      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17204      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17205      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17206      put '<Node Id="Clus" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus" Event="Run" Pid="" Gridid=""/>';
17207      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 46.
      The maximum record length was 46.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17208      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
17209      %let SYSCC=0;
17210      signon C2SO67OQ macvar=C2SO67OQ;
MPRINT(EM_DIAGRAM):   signon macvar=C2SO67OQ;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C2SO67OQ commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           0.90 seconds
      cpu time            0.12 seconds
      
NOTE: Remote signon to C2SO67OQ complete.
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Clus2);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Clus2;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Clus2 : Running 
* datetime : 24OCT2020:18:48:33 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
13461  data EMWS1.Clus2_EMTRAINVARIABLE;
13462  length NAME $64;
13463  set EMWS1.Clus2_VariableSet;
13464  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE =
13464! "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
13464! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
13465     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
13465! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
13466  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
13467  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
13468  drop lowerlimit upperlimit creator--type format--length;
13469  run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS2_VARIABLESET.
NOTE: The data set EMWS1.CLUS2_EMTRAINVARIABLE has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

13470  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Clus2 : End run 
* datetime : 24OCT2020:18:48:40 
* 
*------------------------------------------------------------* 
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.

NOTE: The PROCEDURE DISPLAY printed pages 1-2.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           7.29 seconds
      cpu time            4.54 seconds
      

13473   %put &&emexceptionstring;
 
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Filter3);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMMDFY.FILTERTOOL.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Filter3;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Filter3 : Running 
* datetime : 24OCT2020:18:48:37 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
13312  data EMWS1.Filter3_EMTRAINVARIABLE;
13313  length NAME $64;
13314  set EMWS1.Filter3_VariableSet;
13315  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
13316     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
13317  label CALCMETHOD = "%sysfunc(sasmsg(sashelp.dmine, META_CALCMETHOD_VLABEL, NOQUOTE))";
13318  label KEEPMISSING = "%sysfunc(sasmsg(sashelp.dmine, META_KEEPMISSING_VLABEL, NOQUOTE))";
13319  label MINFREQ = "%sysfunc(sasmsg(sashelp.dmine, META_MINFREQ_VLABEL, NOQUOTE))";
13320  label MAXVALUES = "%sysfunc(sasmsg(sashelp.dmine, META_MAXVALUES_VLABEL, NOQUOTE))";
13321  label INTERVALMIN = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMIN_VLABEL, NOQUOTE))";
13322  label INTERVALMAX = "%sysfunc(sasmsg(sashelp.dmine, META_INTERVALMAX_VLABEL, NOQUOTE))";
13323  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
13324  drop lowerlimit upperlimit creator--type format--length;
13325  run;

NOTE: There were 11 observations read from the data set EMWS1.FILTER3_VARIABLESET.
NOTE: The data set EMWS1.FILTER3_EMTRAINVARIABLE has 11 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

13326  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Filter3 : End run 
* datetime : 24OCT2020:18:48:40 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-4.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           3.96 seconds
      cpu time            3.34 seconds
      

13329   %put &&emexceptionstring;
 
17211      rsubmit C2SO67OQ wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C2SO67OQ in progress.
NOTE: Remote submit to C2SO67OQ commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Clus);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Clus;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Clus = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Clus = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
13474   %sysrput emerror_Clus2 = &&emexceptionstring;
13475   %put &&emloopmode;
 
13330   %sysrput emerror_Filter3 = &&emexceptionstring;
13331   %put &&emloopmode;
 
13476   %sysrput emloopmode_Clus2 = &&emloopmode;
NOTE: Remote submit to C29GS_8I complete.
17212      d
NOTE: Remote signoff from C29GS_8I commencing.
13332   %sysrput emloopmode_Filter3 = &&emloopmode;
NOTE: Remote submit to C0J3WO_K complete.
NOTE: Remote signoff from C0J3WO_K commencing.
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file emwipmsg;
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   run;
17212    !  ata _null_;
17213      file emwipmsg;
17214      put '<Node Id="Clus" Event="Run" Pid=" " Gridid=""/>';
17215      run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           9.80 seconds
      cpu time            4.65 seconds
      

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           6.43 seconds
      cpu time            3.43 seconds
      
17216      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17217      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17218      put '<Node Id="Part" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Update" Pid="" Gridid=""/>';
17219      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17220      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 24OCT2020:18:48:41 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17239      %let _HPDMGRIDHOST=;
17240      %let _HPDMGRIDINSTALLLOC=;
17241      %let _HPDMGRIDDATASERVER=;
17242      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 24OCT2020:18:48:41 
* 
*------------------------------------------------------------* 
17243      %let _emdsep = \;
17244      %em_getactionstatus(emlib =EMWS1, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17245      %let em_Train = N;
17246      %let em_Score = N;
17247      %let em_Report = N;
17248      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17249      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17250      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17251      put '<Node Id="Part" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="" Gridid=""/>';
17252      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17253      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17254      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Clus2" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Clus2" succeeded. 
17256      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17257      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17258      put '<Node Id="Clus2" Event="Complete" Pid="62988" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus2" Event="Complete" Pid="62988" Gridid=""/>';
17259      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Filter3" ran. 
NOTE: The task "C29GS_8I" is not an active task.
MPRINT(EM_DIAGRAM):    waitfor _all_ C29GS_8I;
MPRINT(EM_DIAGRAM):   signoff;
MPRINT(EM_DIAGRAM):   filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Filter3" succeeded. 
17263      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17264      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17265      put '<Node Id="Filter3" Event="Complete" Pid="82288" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Filter3" Event="Complete" Pid="82288" Gridid=""/>';
17266      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 59.
      The maximum record length was 59.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Part" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF" 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
NOTE: The task "C0J3WO_K" is not an active task.
17267      waitfor _all_ C0J3WO_K;
MPRINT(EM_DIAGRAM):    waitfor _all_ C0J3WO_K;
17268      signoff C0J3WO_K;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C0J3WO_K does not exist.  SIGNOFF is not necessary.
17269      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
17270      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17271      put '<Node Id="Prof2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof2" Event="Update" Pid="" Gridid=""/>';
17272      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17273      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Prof2 : Beginning update before running 
* datetime : 24OCT2020:18:48:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Prof2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
17304      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17305      * Prof2: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Prof2: Update Variables Set;
17306      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17307      proc sort data=EMWS1.Clus2_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus2_CMeta_TRAIN out=_SortedVar;
17308      by name;
MPRINT(EM_DIAGRAM):   by name;
17309      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS1.CLUS2_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 15 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17310      proc sort data=EMWS1.Prof2_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Prof2_VariableSet;
17311      by name;
MPRINT(EM_DIAGRAM):   by name;
17312      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17313      data EMWS1.Prof2_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Prof2_VariableSet;
17314      merge _SortedVar(in=_a) EMWS1.Prof2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Prof2_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
17315      by name;
MPRINT(EM_DIAGRAM):   by name;
17316      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
17317      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
17318      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
17319      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 15 observations read from the data set EMWS1.PROF2_VARIABLESET.
NOTE: The data set EMWS1.PROF2_VARIABLESET has 15 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17320      * Prof2: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Prof2: End of Update Variables Set;
17321      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17516      %let emexceptionString =;
17517      %let EMEXCEPTIONSTRING=;
17518      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17519      * UPDATE: Prof2;
MPRINT(EM_DIAGRAM):   * UPDATE: Prof2;
17520      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17521      %let EM_ACTION = UPDATE;
17522      %let syscc = 0;
17523      %macro main;
17524         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
17525             options MPRINT;
17526         %end;
17527      
17528         filename temp catalog 'sashelp.emexpl.profile_macros.source';
17529         %include temp;
17530         filename temp;
17531      
17532         /* Initialize property macro variables */
17533         %SetProperties;
17534      
17535         %if %upcase(&EM_ACTION) = CREATE %then %do;
17536      
17537             filename temp catalog 'sashelp.emexpl.profile_create.source';
17538             %include temp;
17539             filename temp;
17540             %create;
17541         %end;
17542         %else
17543         %if %upcase(&EM_ACTION) = TRAIN %then %do;
17544      
17545             filename temp catalog 'sashelp.emexpl.profile_train.source';
17546             %include temp;
17547             filename temp;
17548             %train;
17549         %end;
17550      %mend main;
17551      
17552      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
17553     +%macro SetProperties;
17554     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
17555     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
17556     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
17557     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
17558     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
17559     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
17560     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
17561     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
17562     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
17563     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
17564     +%mend SetProperties;
17565     +
17566     +
17567     +%macro makeVarMacros(level= );
17568     +
17569     +    %let numvars = 0;
17570     +    %let where   = '';
17571     +
17572     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
17573     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
17574     +    %else
17575     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
17576     +
17577     +    %if &level = INTERVAL %then %do;
17578     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
17579     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
17580     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
17581     +    %end;
17582     +    %else %do;
17583     +        %if &level = NOMINAL %then %do;
17584     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
17585     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
17586     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
17587     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
17588     +             %end;
17589     +             %else
17590     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
17591     +
17592     +        %end;
17593     +        %else %do;
17594     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
17595     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
17596     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
17597     +        %end;
17598     +    %end;
17599     +
17600     +    %if &numvars>0 %then %do;
17601     +         %let numloop = %sysfunc(ceil(&numvars/10000));
17602     +         %let loopcount = 0;
17603     +
17604     +         %do %while((&numloop - &loopcount) > 0);
17605     +             %let first = %eval((&loopcount*10000) + 1);
17606     +             %let last  = %eval(&first + 10000);
17607     +             %let loopcount = %eval(&loopcount +1);
17608     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
17609     +             filename X catalog "&centry";
17610     +             data _null_;
17611     +                length _STRING_ $80;
17612     +                retain _STRING_ ;
17613     +                file X;
17614     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
17615     +
17616     +                where &where;
17617     +
17618     +                if _N_=1 then
17619     +                   put '%macro _PROFVAR;';
17620     +
17621     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
17622     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
17623     +                   if eof then do;
17624     +                      put _STRING_;
17625     +                      put '%mend _PROFVAR;';
17626     +                   end;
17627     +                end;
17628     +                else do;
17629     +                   put _STRING_;
17630     +                  _string_ = TRIM(NAME);
17631     +                   if eof then do;
17632     +                      put _string_;
17633     +                      put '%mend _PROFVAR;';
17634     +                   end;
17635     +                end;
17636     +             run;
17637     +             filename X;
17638     +         %end;
17639     +    %end;
17640     +
17641     +%mend makeVarMacros;
17642     +
17643     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Prof2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17644      *------------------------------------------------------------*;
17645      * End UPDATE: Prof2;
17646      *------------------------------------------------------------*;

17647      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17649      %let _HPDMGRIDHOST=;
17650      %let _HPDMGRIDINSTALLLOC=;
17651      %let _HPDMGRIDDATASERVER=;
17652      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Prof2 : End update 
* datetime : 24OCT2020:18:48:42 
* 
*------------------------------------------------------------* 
17653      %let _emdsep = \;
17654      %em_getactionstatus(emlib =EMWS1, nodeid=Prof2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17655      %let em_Train = Y;
17656      %let em_Report = Y;
17657      %let em_Score = Y;
17658      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17659      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17660      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17661      put '<Node Id="Prof2" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof2" Event="Run" Pid="" Gridid=""/>';
17662      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17663      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
17664      %let SYSCC=0;
17665      signon C0EX2AC9 macvar=C0EX2AC9;
MPRINT(EM_DIAGRAM):   signon macvar=C0EX2AC9;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C0EX2AC9 commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           0.79 seconds
      cpu time            0.10 seconds
      
NOTE: Remote signon to C0EX2AC9 complete.
17666      rsubmit C0EX2AC9 wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C0EX2AC9 in progress.
NOTE: Remote submit to C0EX2AC9 commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Prof2);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Prof2;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Prof2 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Prof2 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
17667      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17668      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17669      put '<Node Id="Prof2" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof2" Event="Run" Pid=" " Gridid=""/>';
17670      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17671      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17672      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17673      put '<Node Id="Clus3" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus3" Event="Update" Pid="" Gridid=""/>';
17674      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17675      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Clus3 : Beginning update before running 
* datetime : 24OCT2020:18:48:45 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Clus3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
17694      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17695      * Clus3: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Clus3: Update Variables Set;
17696      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

17697      proc sort data=EMWS1.Filter3_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Filter3_CMeta_TRAIN out=_SortedVar;
17698      by name;
MPRINT(EM_DIAGRAM):   by name;
17699      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.FILTER3_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    data _SortedVar;
MPRINT(EM_DIAGRAM):   set _SortedVar;
MPRINT(EM_DIAGRAM):   where ROLE in("INPUT" "REJECTED" "FREQ" "ID");
MPRINT(EM_DIAGRAM):   run;
17704      proc sort data=EMWS1.Clus3_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus3_VariableSet;
17705      by name;
MPRINT(EM_DIAGRAM):   by name;
17706      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS3_VARIABLESET.
NOTE: The data set EMWS1.CLUS3_VARIABLESET has 11 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17707      data EMWS1.Clus3_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus3_VariableSet;
17708      merge _SortedVar(in=_a) EMWS1.Clus3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Clus3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
17709      by name;
MPRINT(EM_DIAGRAM):   by name;
17710      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
17711      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
17712      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
17713      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 11 observations read from the data set EMWS1.CLUS3_VARIABLESET.
NOTE: The data set EMWS1.CLUS3_VARIABLESET has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17714      * Clus3: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Clus3: End of Update Variables Set;
17715      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
17717      %let _HPDMGRIDHOST=;
17718      %let _HPDMGRIDINSTALLLOC=;
17719      %let _HPDMGRIDDATASERVER=;
17720      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Clus3 : End update 
* datetime : 24OCT2020:18:48:46 
* 
*------------------------------------------------------------* 
17721      %let _emdsep = \;
17722      %em_getactionstatus(emlib =EMWS1, nodeid=Clus3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

17723      %let em_Train = Y;
17724      %let em_Report = Y;
17725      %let em_Score = Y;
17726      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

17727      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17728      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17729      put '<Node Id="Clus3" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus3" Event="Run" Pid="" Gridid=""/>';
17730      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17731      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
17732      %let SYSCC=0;
17733      signon C3NDZ204 macvar=C3NDZ204;
MPRINT(EM_DIAGRAM):   signon macvar=C3NDZ204;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C3NDZ204 commencing (SAS Release 9.04.01M3P062415).
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Clus);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Clus;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Clus : Running 
* datetime : 24OCT2020:18:48:41 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
13458  data EMWS1.Clus_EMTRAINVARIABLE;
13459  length NAME $64;
13460  set EMWS1.Clus_VariableSet;
13461  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE =
13461! "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
13461! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
13462     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
13462! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
13463  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
13464  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
13465  drop lowerlimit upperlimit creator--type format--length;
13466  run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set EMWS1.CLUS_EMTRAINVARIABLE has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

13467  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Clus : End run 
* datetime : 24OCT2020:18:48:48 
* 
*------------------------------------------------------------* 
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.

NOTE: The PROCEDURE DISPLAY printed pages 1-2.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           7.56 seconds
      cpu time            4.17 seconds
      

13470   %put &&emexceptionstring;
 
13471   %sysrput emerror_Clus = &&emexceptionstring;
13472   %put &&emloopmode;
 
13473   %sysrput emloopmode_Clus = &&emloopmode;
NOTE: Remote submit to C2SO67OQ complete.
NOTE: Remote signoff from C2SO67OQ commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           9.23 seconds
      cpu time            4.31 seconds
      
NOTE: Remote signoff from C2SO67OQ complete.
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.38 seconds
      cpu time            0.10 seconds
      
NOTE: Remote signon to C3NDZ204 complete.
17734      rsubmit C3NDZ204 wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C3NDZ204 in progress.
NOTE: Remote submit to C3NDZ204 commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Clus3);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Clus3;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Clus3 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Clus3 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
17735      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17736      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17737      put '<Node Id="Clus3" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus3" Event="Run" Pid=" " Gridid=""/>';
17738      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

17739      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
17740      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
17741      put '<Node Id="VarClus" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus" Event="Update" Pid="" Gridid=""/>';
17742      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

17743      %let emloopmode =;
*------------------------------------------------------------* 
* 
* VarClus : Beginning update before running 
* datetime : 24OCT2020:18:48:50 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.VarClus_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17991      %let emexceptionString =;
17992      %let EMEXCEPTIONSTRING=;
17993      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
17994      * UPDATE: VarClus;
MPRINT(EM_DIAGRAM):   * UPDATE: VarClus;
17995      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
17996      %let EM_ACTION = UPDATE;
17997      %let syscc = 0;
17998      
17999      %macro main;
18000      
18001         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
18002         %include temp;
18003         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
18004         %include temp;
18005         filename temp;
18006      
18007        %SetProperties;
18008      
18009         %if %upcase(&EM_ACTION) = CREATE %then %do;
18010             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
18011             %include temp;
18012             filename temp;
18013             %create;
18014         %end;
18015         %else
18016         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18017              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
18018                 %include temp;
18019                 filename temp;
18020                 %train;
18021         %end;
18022         %else
18023         %if %upcase(&EM_ACTION) = SCORE %then %do;
18024                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
18025                 %include temp;
18026                 filename temp;
18027                 %score;
18028         %end;
18029         %else
18030         %if %upcase(&EM_ACTION) = REPORT %then %do;
18031                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
18032                 %include temp;
18033                 filename temp;
18034                 %report;
18035         %end;
18036         /*
18037         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
18038             %put 'OPENING TABLE';
18039         %end;
18040         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
18041             %put 'CLOSE TABLE';
18042         %end;
18043         */
18044      %mend main;
18045      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
18046     +
18047     +/* Initialize property macro variables */
18048     +%macro SetProperties;
18049     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
18050     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
18051     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
18052     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
18053     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
18054     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
18055     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
18056     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
18057     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
18058     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
18059     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
18060     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
18061     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
18062     +
18063     +%mend SetProperties;
18064     +
18065     +%Macro MakeDummyVariables(indata=,
18066     +                          outvar=,
18067     +                          outdata=,
18068     +                          fileref=,
18069     +                          recreatecmeta=N, /* optional */
18070     +                          incmeta=,     /* optional */
18071     +                          outcmeta=,    /* optional */
18072     +                          ndummyvars=_ndummyvars
18073     +                          );
18074     +    %global &ndummyvars;
18075     +
18076     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
18077     +       class
18078     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18079     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18080     +    ;
18081     +    run;
18082     +    %let &ndummyvars = 0;
18083     +    data _null_;
18084     +    %let dsid = %sysfunc(open(work._classout));
18085     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
18086     +    %let dsid = %sysfunc(close(&dsid));
18087     +    run;
18088     +
18089     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
18090     +       input
18091     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
18092     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
18093     +        / level=nominal stdize=no;
18094     +       make outvar = &outvar;
18095     +       score data = &indata out =&outdata;
18096     +       code  file=  "&fileref";
18097     +    run;
18098     +    %if &recreatecmeta eq Y %then %do;
18099     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
18100     +    data _tmpds;
18101     +        set _tmpds;
18102     +           ROLE = 'INPUT';
18103     +           LEVEL = 'INTERVAL';
18104     +           CREATOR='DMZIP';
18105     +           if NAME = '_TYPE_' then delete;
18106     +    run;
18107     +    data &outcmeta;
18108     +         set &incmeta _tmpds;
18109     +    run;
18110     +    %end;
18111     +    proc datasets lib=work nolist;
18112     +      delete  _dmdbdat _dmdbcat _classout
18113     +    %if &recreatecmeta eq Y %then %do;
18114     +    _tmpds
18115     +    %end;
18116     +    ;
18117     +    quit;
18118     +%Mend MakeDummyVariables;
18119     +
18120     +/*--- Determine Optimal Number of Cluster ----
18121     +%macro FindClusNum(statds=, groupds=, minvariation=);
18122     +   %global optnclus;
18123     +   data varclus_tmp(drop=_NAME_);
18124     +      set &statDs;
18125     +      where _type_ ='PROPOR';
18126     +   run;
18127     +   proc sort data=varclus_tmp;
18128     +      by _NCL_;
18129     +   run;
18130     +   proc transpose data=varclus_tmp out=varclus_tmp;
18131     +      by _NCL_;
18132     +      var %EM_INTERVAL_INPUT
18133     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18134     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18135     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
18136     +          %do i = 2 %to &nvar;
18137     +          %let varname = %sysfunc(varname(&dsid, &i));
18138     +          &varname
18139     +          %end;
18140     +      %end;
18141     +   ;
18142     +   run;
18143     +
18144     +   %if &minVariation eq %then %do;
18145     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
18146     +   %end;
18147     +   %if ^(0<&minVariation<100) %then %do;
18148     +       %let minVariation = 90;
18149     +   %end;
18150     +
18151     +   data _null_;
18152     +      set varclus_tmp end=eof;
18153     +      by _NCL_;
18154     +      retain flag 0;
18155     +      if first._ncl_ then flag=0;
18156     +      if .<col1 < &minVariation then flag=1;
18157     +      if last._ncl_ and ^flag then do;
18158     +         call symput('OPTNCL', _ncl_);
18159     +         stop;
18160     +      end;
18161     +     if eof then call symput('OPTNCL', _ncl_);
18162     +   run;
18163     +
18164     +   %let optnclus = &OPTNCL;
18165     +
18166     +   data varclus_tmp(drop=_NCL_ _NAME_);
18167     +      set &statDs;
18168     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
18169     +   run;
18170     +   proc sort data=varclus_tmp;
18171     +      by _TYPE_;
18172     +   run;
18173     +   proc transpose data=varclus_tmp out=varclus_tmp;
18174     +      by _TYPE_;
18175     +   run;
18176     +   proc sort data=varclus_tmp;
18177     +      by _name_ _type_;
18178     +   run;
18179     +
18180     +  proc transpose data=varclus_tmp out=&groupds;
18181     +      by _NAME_;
18182     +   run;
18183     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
18184     +      by Cluster descending Rsquare;
18185     +      where Cluster ne 0;
18186     +   run;
18187     +   proc datasets lib=work nolist mt=(DATA VIEW);
18188     +      delete varclus_tmp;
18189     +   run;
18190     +   quit;
18191     +%mend findClusNum;
18192     +*/
18193     +
18194     +%macro getNclusfromTrain(inoutstat=, nc=);
18195     +%global &nc;
18196     +data _null_;
18197     +    set &inoutstat end=eof;
18198     +    if eof then do;
18199     +    call symput("&nc", _ncl_);
18200     +    end;
18201     +run;
18202     +%mend  getNclusfromTrain;
18203     +
18204     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
18205     +
18206     +     *--- Build Code to Modify Metadata ---*;
18207     +     filename X "&deltacodefile";
18208     +     data _null_;
18209     +        FILE X;
18210     +        set &groupds end=eof;
18211     +        /*by Cluster;*/
18212     +         if _N_=1 then do;
18213     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
18214     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
18215     +           %end;
18216     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
18217     +           put "if upcase(strip(NAME)) in (";
18218     +        end;
18219     +        if Strip(upcase(Selected)) eq 'YES' then do;
18220     +           string = '"'!!trim(left(VARIABLE))!!'"';
18221     +           put string;
18222     +        end;
18223     +        if eof then do;
18224     +           put ') then ROLE="INPUT";';
18225     +           put 'else ROLE="REJECTED";';
18226     +           put 'end;';
18227     +
18228     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
18229     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
18230     +           %end;
18231     +        end;
18232     +     run;
18233     +     quit;
18234     +
18235     +     filename X;
18236     +
18237     +     quit;
18238     +%mend MakeDeltaCode;
18239     +
18240     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18241     +    %if ^%sysfunc(exist(&statds)) %then %do;
18242     +         %goto doendc;
18243     +    %end;
18244     +
18245     +    data &corrds(drop=_TYPE_ _NCL_) ;
18246     +       set &statds;
18247     +       where _type_ eq 'CORR' ;
18248     +    run ;
18249     +    proc sort data=&corrds;
18250     +       by _NAME_ ;
18251     +    run ;
18252     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18253     +      BY _NAME_ ;
18254     +    run ;
18255     +    data &corrplotds;
18256     +       length _Y_ $100;
18257     +       set &corrplotDs;
18258     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18259     +    run ;
18260     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18261     +       set &corrplotds;
18262     +       where _LABEL_ ne '' ;
18263     +       keep _TMP_ _LABEL_ ;
18264     +    run ;
18265     +    data _null_;
18266     +       nobs=0;
18267     +       dsid = open('varclus_match');
18268     +       if dsid then do;
18269     +          nobs = attrn(dsid, 'NOBS');
18270     +          dsid = close(dsid);
18271     +       end;
18272     +       call symput ('CORR_NOBS', nobs);
18273     +    run;
18274     +    %if &corr_nobs %then %do;
18275     +        proc sort data=varclus_match;
18276     +           by _name_;
18277     +        run ;
18278     +        proc sort data=&corrplotds;
18279     +           by _name_;
18280     +        run ;
18281     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18282     +           merge varclus_match &corrplotds;
18283     +           by _NAME_ ;
18284     +           if _X_ eq '' then _X_=_NAME_ ;
18285     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18286     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18287     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18288     +
18289     +       run ;
18290     +    %end;
18291     +    %else %do;
18292     +        proc sort data=&corrplotds;
18293     +           by _name_;
18294     +        run ;
18295     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18296     +           set &corrplotds;
18297     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18298     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18299     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18300     +
18301     +        run ;
18302     +    %end;
18303     +    proc sort data=&corrplotds;
18304     +       by _X_ _Y_;
18305     +    run ;
18306     +    proc datasets lib=work nolist mt=(DATA VIEW);
18307     +       delete varclus_match;
18308     +    run;
18309     +    quit;
18310     +
18311     +%doendc:
18312     +
18313     +%mend MakeVarClusCorrData;
18314     +
18315     +%macro MakeStatPlotData(statds= , outstatplotds=);
18316     +   %if %sysfunc(exist(&statds)) %then %do;
18317     +
18318     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18319     +          set &statDs;
18320     +          where _type_ in('MEAN', 'STD', 'N');
18321     +       run ;
18322     +       proc transpose data=varclus_tmp out=&outstatplotds;
18323     +          id _TYPE_ ;
18324     +       run ;
18325     +       data &outstatplotds;
18326     +          set &outstatplotds(obs=1000);
18327     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18328     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18329     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18330     +          else SCALEDSTD= STD ;
18331     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18332     +       run ;
18333     +       proc sort data=&outstatplotds;
18334     +          by descending SCALEDSTD ;
18335     +       run ;
18336     +       proc datasets lib=work nolist mt=(DATA VIEW);
18337     +          delete varclus_tmp;
18338     +       run;
18339     +       quit;
18340     +    %end;
18341     +
18342     +%mend MakeStatPlotData;
18343     +
18344     +
18345     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18346     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18347     +    data &EM_USER_OUTSTATSCORE;
18348     +          set &indata;
18349     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18350     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18351     +          if _TYPE_ = 'STD' then _NAME_='STD';
18352     +          DROP _TYPE_ _NCL_;
18353     +     run;
18354     +
18355     +     filename _file_  "&fileRef";
18356     +
18357     +     data _null_;
18358     +        FILE _file_ MOD;
18359     +        put ' ';
18360     +        put '/*-------------------------------------------------*/';
18361     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18362     +        put '/*-------------------------------------------------*/';
18363     +        put ' ';
18364     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18365     +
18366     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18367     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18368     +
18369     +        %let k = 1;
18370     +        %do %while(^%sysfunc(fetch(&dsid)));
18371     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18372     +                %if &k > 2 %then %do;
18373     +                 %let cn = %eval(&k-2);
18374     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18375     +                %end;
18376     +                %let k = %eval(&k+1);
18377     +        %end;
18378     +
18379     +        %let rc = %sysfunc(rewind(&dsid));
18380     +
18381     +        %do i= 2 %to &nvar;
18382     +            %let _varname =  %sysfunc(varname(&dsid, &i));
18383     +            %do %while(^%sysfunc(fetch(&dsid)));
18384     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18385     +                %if &_name = MEAN %then
18386     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18387     +                %else %if &_name = STD %then
18388     +                %let _std = %sysfunc(getvarn(&dsid, &i));
18389     +                %else %do;
18390     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18391     +                      %let abscoeff = %sysfunc(abs(&coeff));
18392     +                          %if &abscoeff >  0 %then %do;
18393     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18394     +                           %end;
18395     +                 %end;
18396     +             %end;
18397     +             %let rc = %sysfunc(rewind(&dsid));
18398     +         %end;
18399     +
18400     +        %let dsid= %sysfunc(close(&dsid));
18401     +       run;
18402     +%mend CreateScoreCode;
18403     +
18404     +
18405     +
18406     +/*----------------------------------------------------------
18407     +    Instead of using %MakeRSquareData,
18408     +    %MakeVarClusResultTable at macro2.source is used
18409     + +----------------------------------------------------------*/
18410     +
18411     +
18412     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18413     +
18414     +/* modifying  from ods rsquare = data */
18415     +
18416     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18417     +    Length Cluster $16;
18418     +    length Variable $32;
18419     +    Length VariableLabel $64;
18420     +    set &indata; retain CurrentCluster;
18421     +    if NumberOfClusters ^= &ncluster then delete;
18422     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18423     +    CurrentCluster = Cluster;
18424     +   run;
18425     +proc sort data =&outdata ;
18426     +     by Cluster RsquareRatio;
18427     +run;
18428     +data _tmprsq(drop=index);
18429     +     set &outdata; by Cluster;
18430     +     if first.Cluster then do;
18431     +     index = strip(scan(Cluster,2 ));
18432     +     Variable = "Clus"||index;
18433     +     VariableLabel = "Cluster Component "||index;
18434     +     OwnCluster = 1;
18435     +     NextClosest = .;
18436     +     RsquareRatio = 0;
18437     +     output;
18438     +     end;
18439     +run;
18440     +
18441     +proc sort data = _tmprsq ;
18442     +     by Cluster RsquareRatio;
18443     +run;
18444     +data &outdata;
18445     +     set &outdata _tmprsq;
18446     +by Cluster;
18447     +run;
18448     +
18449     +
18450     +/* Just create the Selected variable with all YES */
18451     +
18452     +data &outdata;
18453     +    set &outdata; by cluster;
18454     +    length Selected $8;
18455     +    Selected = 'YES';
18456     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18457     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18458     +    rename OwnCluster = RSqWithClusterComp;
18459     +    rename NextClosest = RSqWithNextClusComp;
18460     +run;
18461     +
18462     +
18463     +/* Selected = Y/N will be done %score section -----
18464     +
18465     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18466     +data &outdata;
18467     +    set &outdata; by cluster;
18468     +    length Selected $8;
18469     +    if first.Cluster then Selected = 'YES';
18470     +    else Selected = 'NO';
18471     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18472     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18473     +    rename OwnCluster = RSqWithClusterComp;
18474     +    rename NextClosest = RSqWithNextClusComp;
18475     +run;
18476     +%end;
18477     +%else %do;
18478     +data &outdata;
18479     +    set &outdata; by cluster;
18480     +    if last.Cluster then Selected = 'YES';
18481     +    else Selected = 'NO';
18482     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18483     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18484     +    rename OwnCluster = RSqWithClusterComp;
18485     +    rename NextClosest = RSqWithNextClusComp;
18486     +run;
18487     +%end;
18488     +---------------------------------------------------------------*/
18489     +
18490     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18491     +/* to calculate NextClosestClusRsq */
18492     +proc transpose data = &inClusRSquare  out=_clusRsq;
18493     +      by cluster;
18494     +      run;
18495     +data _clusRsq;
18496     +     set _clusRsq;
18497     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18498     +run;
18499     +
18500     +proc sort data=_clusRsq;
18501     +    by cluster col1;
18502     +    run;
18503     +data _clusRsq(drop=_NAME_ _LABEL_);
18504     +     set _clusRsq; by cluster;
18505     +     if last.Cluster then output;
18506     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18507     +     rename COL1 = RSqWithNextClusComp;
18508     +     rename Cluster = Variable;
18509     +     label  Cluster = "Variable";
18510     +run;
18511     +
18512     +proc sort data =&outdata;
18513     +     by Variable;
18514     +run;
18515     +data &outdata;
18516     +    merge &outdata _clusRsq;
18517     +    by Variable;
18518     +run;
18519     +proc sort data =&outdata;
18520     +by Cluster  RsquareRatio;
18521     +run;
18522     +quit;
18523     +%end;
18524     +
18525     +proc datasets lib = work nolist;
18526     +     delete _tmprsq _clusRsq;
18527     +     run;
18528     +quit;
18529     +
18530     +%mend MakeRSquareData;
18531     +
18532     +
18533     +/*-------------------------------------------------------------------------*/
18534     +
18535     +
18536     +
18537     +%macro ModifyCorr(indata=,
18538     +                  outdata=,
18539     +                  rsquare = Y
18540     +                  );
18541     +    data corr_tmp;
18542     +        set &indata;
18543     +    run;
18544     +     proc sql;
18545     +           update &indata
18546     +           set
18547     +     %let dsid = %sysfunc(open(work.corr_tmp));
18548     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18549     +          %do i = 4 %to &nvar;
18550     +          %let _name = %sysfunc(varname(&dsid, &i));
18551     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18552     +            %else  %let _name_md = &_name;
18553     +            %if &i < &nvar %then %do;
18554     +               &_name = 1- &_name_md ,
18555     +            %end;
18556     +            %else %do;
18557     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18558     +            %end;
18559     +          %end;
18560     +      %let dsid= %sysfunc(close(&dsid));
18561     +
18562     +      select * from &indata;
18563     +      run;
18564     +      proc datasets lib = work nolist;
18565     +           delete corr_tmp;
18566     +      run;
18567     +      quit;
18568     +
18569     + %mend ModifyCorr;
18570     +
18571     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18572     +    data &outdata(drop= _NCL_  _TYPE_);
18573     +       set &indata;
18574     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18575     +       rename _NAME_ = Cluster;
18576     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18577     +    run;
18578     +    %if &RSquare eq Y %then %do;
18579     +     data corr_tmp;
18580     +        set &outdata;
18581     +     run;
18582     +
18583     +     data &outdata(drop=i);
18584     +          set &outdata;
18585     +          %let dsid = %sysfunc(open(work.corr_tmp));
18586     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18587     +          %do i = 2 %to &nvar;
18588     +            %let _name = %sysfunc(varname(&dsid, &i));
18589     +            %let _name_md = &_name.**2;
18590     +                &_name = &_name_md;
18591     +          %end;
18592     +      %let dsid= %sysfunc(close(&dsid));
18593     +      run;
18594     +      proc datasets lib = work nolist;
18595     +           delete corr_tmp;
18596     +      run;
18597     +
18598     +    %end;
18599     +     quit;
18600     +%mend MakeClusStructCorrData;
18601     +
18602     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18603     +    data &outdata(drop= _NCL_  _TYPE_);
18604     +       set &indata;
18605     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18606     +       rename _NAME_ = Cluster;
18607     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18608     +    run;
18609     +    data corr_tmp;
18610     +        set &outdata;
18611     +    run;
18612     +
18613     +    %let dsid = %sysfunc(open(work.corr_tmp));
18614     +    %let nclus2= %eval(&ncluster+1);
18615     +    data &outdata;
18616     +         set &outdata;
18617     +          %do i = 2 %to &nclus2;
18618     +          %let i_1 = %eval(&i-1);
18619     +            %let _name = %sysfunc(varname(&dsid, &i));
18620     +            %let _newName = Clus&i_1;
18621     +                rename &_name = &_newName; ;
18622     +                *label &_name ="Cluster &i_1";
18623     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18624     +          %end;
18625     +          keep Cluster
18626     +          %do i = 2 %to &nclus2;
18627     +                %let _name = %sysfunc(varname(&dsid, &i));
18628     +                &_name
18629     +          %end;
18630     +          ;
18631     +    %let dsid= %sysfunc(close(&dsid));
18632     +     run;
18633     +     quit;
18634     +
18635     +    %if &RSquare eq Y %then %do;
18636     +
18637     +       data corr_tmp;
18638     +        set &outdata;
18639     +     run;
18640     +
18641     +     data &outdata(drop=i);
18642     +          set &outdata;
18643     +          %let dsid = %sysfunc(open(work.corr_tmp));
18644     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18645     +          %do i = 2 %to &nvar;
18646     +            %let _name = %sysfunc(varname(&dsid, &i));
18647     +            %let _name_md = &_name.**2;
18648     +                &_name = &_name_md;
18649     +          %end;
18650     +      %let dsid= %sysfunc(close(&dsid));
18651     +      run;
18652     +    %end;
18653     +
18654     +    %if &makeplotds eq Y %then %do;
18655     +     proc transpose data = &outdata
18656     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18657     +          by cluster;
18658     +     run;
18659     +     data &plotds;
18660     +          set  &plotds;
18661     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18662     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18663     +     run;
18664     +     %end;
18665     +     proc datasets lib = work nolist;
18666     +           delete corr_tmp;
18667     +     run;
18668     +     quit;
18669     +%mend MakeInterClusCorrData;
18670     +
18671     +
18672     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18673     +
18674     +data &outlink(drop = Selected);
18675     +     set &indata;
18676     +     LINKID = _N_;
18677     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18678     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18679     +run;
18680     +data &outnode(keep=NODEID TYPE LABEL);
18681     +    set &indata;
18682     +    length TYPE $16;
18683     +    rename Variable = NODEID;
18684     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18685     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18686     +    then  TYPE = "CLUSTER";
18687     +    else  TYPE="VARIABLE";
18688     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18689     +run;
18690     +quit;
18691     +%mend MakeClusConstellData;
18692     +
18693     +
18694     +
18695     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18696     +
18697     +data &outlink(drop = Selected);
18698     +     set &indata;
18699     +     LINKID = _N_;
18700     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18701     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18702     +run;
18703     +data &outnode(keep=NODEID TYPE LABEL);
18704     +    set &indata;
18705     +    length TYPE $16;
18706     +    rename Variable = NODEID;
18707     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18708     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18709     +    then  TYPE = "CLUSTER";
18710     +    else  TYPE="VARIABLE";
18711     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18712     +run;
18713     +quit;
18714     +%mend MakeClusConstellData;
18715     +
18716     +
18717     +/*--- This will work only when inds is not a view data -------
18718     +
18719     +%macro getNVarNObs(inds=, nvar=, nobs=);
18720     +
18721     +    %global &nvar;
18722     +    %global &nobs;
18723     +    data _null_;
18724     +         dsid = open("&inds");
18725     +         nv = attrn(dsid, 'NVAR');
18726     +         no = attrn(dsid, 'NOBS');
18727     +         dsid = close(dsid);
18728     +         call symput("&nvar", nv);
18729     +         call symput("&nobs", no);
18730     +    run;
18731     +    quit;
18732     +%mend  getNVarNObs;
18733     +
18734     ++---------------------------------------------------------------*/
18735     +
18736     +
18737     +%macro getNVar(inds=, nvar=);
18738     +    %global &nvar;
18739     +    data _null_;
18740     +         dsid = open("&inds");
18741     +         nv = attrn(dsid, 'NVAR');
18742     +         dsid = close(dsid);
18743     +         call symput("&nvar", nv);
18744     +    run;
18745     +    quit;
18746     +%mend  getNVar;
18747     +
18748     +
18749     +
18750     +%macro getNObs(inds=, nobs=);
18751     +    %global &nobs;
18752     +    data _null_;
18753     +        set &inds end=eof;
18754     +        if eof then call symput("&nobs", _N_);
18755     +    run;
18756     +    quit;
18757     +%mend  getNObs;
18758     +
18759     +%Macro CreateVarclusMeta(trainnum=);
18760     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18761     +    data &EM_USER_VARCLUSMETA;
18762     +         length TrainNum 8.;
18763     +         length NewTrain $8;
18764     +         length NGCluster 8.;
18765     +         length ExportedComp $16;
18766     +         length HideVariable $8;
18767     +         TrainNum = &trainnum;
18768     +         NewTrain = "Y";
18769     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18770     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18771     +         NGCluster = 0; /* zero means no twostage */
18772     +   run;
18773     +   quit;
18774     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18775     +
18776     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18777     +    data &outdata(drop= _NCL_  _TYPE_);
18778     +       set &indata;
18779     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18780     +       %if &globalclusid ne %then %do;
18781     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18782     +       rename _NAME_ = Cluster;
18783     +       %end;
18784     +       %else %do;
18785     +        _NAME_ = upcase(_NAME_);
18786     +       rename _NAME_ = Cluster;
18787     +       %end;
18788     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18789     +    run;
18790     +    data corr_tmp;
18791     +        set &outdata;
18792     +    run;
18793     +
18794     +    %let dsid = %sysfunc(open(work.corr_tmp));
18795     +    %let nclus2= %eval(&ncluster+1);
18796     +    data &outdata;
18797     +         set &outdata;
18798     +          %do i = 2 %to &nclus2;
18799     +          %let i_1 = %eval(&i-1);
18800     +            %let _name = %sysfunc(varname(&dsid, &i));
18801     +            %if &globalclusid ne %then
18802     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18803     +                     rename &_name = &_newName;
18804     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18805     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18806     +                %end;
18807     +            %else
18808     +                %do; %let _newName = CLUS&i_1;
18809     +                     rename &_name = &_newName;
18810     +                     *label &_name ="Cluster &i_1";
18811     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18812     +                %end;
18813     +          %end;
18814     +          keep Cluster
18815     +          %do i = 2 %to &nclus2;
18816     +                %let _name = %sysfunc(varname(&dsid, &i));
18817     +                &_name
18818     +          %end;
18819     +          ;
18820     +    %let dsid= %sysfunc(close(&dsid));
18821     +     run;
18822     +     quit;
18823     +
18824     +    %if &RSquare eq Y %then %do;
18825     +
18826     +       data corr_tmp;
18827     +        set &outdata;
18828     +     run;
18829     +
18830     +     data &outdata;
18831     +          set &outdata;
18832     +          %let dsid = %sysfunc(open(work.corr_tmp));
18833     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18834     +          %do i = 2 %to &nvar;
18835     +            %let _name = %sysfunc(varname(&dsid, &i));
18836     +            %let _name_md = &_name.**2;
18837     +                &_name = &_name_md;
18838     +          %end;
18839     +      %let dsid= %sysfunc(close(&dsid));
18840     +      run;
18841     +    %end;
18842     +
18843     +    %if &makeplotds eq Y %then %do;
18844     +     proc transpose data = &outdata
18845     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18846     +          by cluster;
18847     +     run;
18848     +     data &plotds;
18849     +          set  &plotds;
18850     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18851     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18852     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18853     +     run;
18854     +     %end;
18855     +     proc datasets lib = work nolist;
18856     +           delete corr_tmp;
18857     +     run;
18858     +     quit;
18859     +%mend MakeInterClusCorrData;
18860     +
18861     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18862     +    data _tmpds(drop= _NCL_);
18863     +       set &indata;
18864     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18865     +       %if &globalclusid ne %then %do;
18866     +           _NAME_ = "GC&globalclusid.";
18867     +       rename _NAME_ = Cluster;
18868     +       %end;
18869     +       %else %do;
18870     +        _NAME_ = "CLUS";
18871     +        rename _NAME_ = Cluster;
18872     +       %end;
18873     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18874     +    run;
18875     +    proc transpose data =_tmpds out =&outdata;
18876     +    run;
18877     +
18878     +    data &outdata(drop=COL1);
18879     +        %if &globalclusid ne %then %do;
18880     +        length GCluster $16;
18881     +        %end;
18882     +        length Cluster $32;
18883     +        length _NAME_ $32;
18884     +         set &outdata;
18885     +         _NAME_ = upcase(_NAME_);
18886     +         rename _NAME_=Variable;
18887     +         *label _NAME_="Variable";
18888     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18889     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18890     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18891     +
18892     +         %if &globalclusid ne %then %do;
18893     +          GCluster = "GC&globalclusid";
18894     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18895     +         %end;
18896     +         %else %do;
18897     +         Cluster = "CLUS"||strip(COL1);
18898     +        %end;
18899     +         rename COL2 = RSqWithOwnClusComp;
18900     +         *label COL2 = "R-Square With Own Cluster Component";
18901     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18902     +
18903     +   run;
18904     +   proc sort data =&outdata;
18905     +        by Cluster RSqWithOwnClusComp;
18906     +   run;
18907     +   proc datasets lib = work nolist;
18908     +           delete _tmpds;
18909     +   run;
18910     +   quit;
18911     +%mend MakeOwnRSquare;
18912     +
18913     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18914     +    data &outdata(drop= _NCL_  _TYPE_);
18915     +       %if &globalclusid ne %then %do;
18916     +        length GCluster $16;
18917     +        %end;
18918     +       set &indata;
18919     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18920     +       %if &globalclusid ne %then %do;
18921     +         GCluster = "GC&globalclusid";
18922     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18923     +         rename _NAME_ = Cluster;
18924     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18925     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18926     +
18927     +       %end;
18928     +       %else %do;
18929     +         _NAME_ = upcase(_NAME_);
18930     +         rename _NAME_ = Cluster;
18931     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18932     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18933     +
18934     +       %end;
18935     +     run;
18936     +    %if &RSquare eq Y %then %do;
18937     +     data corr_tmp;
18938     +          set &outdata;
18939     +     run;
18940     +     %let istart = 2;
18941     +     %if &globalclusid ne %then %let istart = 3;
18942     +     data &outdata;
18943     +          set &outdata;
18944     +          %let dsid = %sysfunc(open(work.corr_tmp));
18945     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18946     +          %do i =&istart %to &nvar;
18947     +            %let _name = %sysfunc(varname(&dsid, &i));
18948     +            %let _name_md = &_name.**2;
18949     +                &_name = &_name_md;
18950     +          %end;
18951     +      %let dsid= %sysfunc(close(&dsid));
18952     +      run;
18953     +      proc datasets lib = work nolist;
18954     +           delete corr_tmp;
18955     +      run;
18956     +    %end;
18957     +     quit;
18958     +%mend MakeClusStructCorrData;
18959     +
18960     +/*
18961     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18962     +*/
18963     +
18964     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18965     +
18966     +     /* The indata should be the outdata
18967     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18968     +
18969     +     proc sort data =&indata out=_tmpclusRsq;
18970     +     by cluster;
18971     +     run;
18972     +
18973     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18974     +      by cluster;
18975     +     run;
18976     +
18977     +     proc sort data=_tmpclusRsq;
18978     +        by _NAME_ COL1;
18979     +     run;
18980     +
18981     +     data _tmpclusRsq;
18982     +         length _NAME_ $32;
18983     +         set _tmpclusRsq; by _NAME_;
18984     +          _NAME_ = upcase(_NAME_);
18985     +          %if &ncluster ne 1 %then %do;
18986     +             if last._NAME_ then delete;
18987     +          %end;
18988     +          %else %do;
18989     +             COL1 = 0;
18990     +          %end;
18991     +     run;
18992     +     /* need to sort again */
18993     +     proc sort data=_tmpclusRsq;
18994     +        by _NAME_ COL1;
18995     +     run;
18996     +
18997     +     data &outdata;
18998     +         set _tmpclusRsq; by _NAME_;
18999     +         Cluster = upcase(Cluster);
19000     +         if last._NAME_ then output;
19001     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19002     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19003     +         rename COL1 = RSqWithNextClusComp;
19004     +         Cluster = upcase(Cluster);
19005     +         rename Cluster = ClosestCluster;
19006     +         *label  Cluster = "Next Closest Cluster";
19007     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19008     +         rename _NAME_ = Variable;
19009     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19010     +    run;
19011     +
19012     +
19013     +    %if &globalclusid ne %then %do;
19014     +    data &outdata;
19015     +       length GCluster $16;
19016     +       set &outdata;
19017     +       GCluster = "GC&globalclusid";
19018     +       run;
19019     +    %end;
19020     +    proc datasets lib = work nolist;
19021     +           delete _tmpclusRsq;
19022     +    run;
19023     +    quit;
19024     +%mend FindNextClosestClusByVar;
19025     +
19026     +
19027     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
19028     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
19029     +     proc sort data =&indata out=_tmpclusRsq;
19030     +     by cluster;
19031     +     run;
19032     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
19033     +     by cluster;
19034     +     run;
19035     +     proc sort data=_tmpclusRsq;
19036     +        by _NAME_ col1;
19037     +     run;
19038     +     data _tmpclusRsq;
19039     +         length _NAME_ $32;
19040     +         set _tmpclusRsq; by _NAME_;
19041     +          _NAME_ = upcase(_NAME_);
19042     +          %if &ncluster ne 1 %then %do;
19043     +             if last._NAME_ then delete;
19044     +          %end;
19045     +          %else %do;
19046     +             COL1 = 0;
19047     +          %end;
19048     +     run;
19049     +     data &outdata;
19050     +         set _tmpclusRsq; by _NAME_;
19051     +         Cluster = upcase(Cluster);
19052     +         if last._NAME_ then output;
19053     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
19054     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
19055     +         rename COL1 = RSqWithNextClusComp;
19056     +         Cluster = upcase(Cluster);
19057     +         rename Cluster = ClosestCluster;
19058     +         *label  Cluster = "Next Closest Cluster";
19059     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
19060     +         rename _NAME_ = Variable;
19061     +         *label  _NAME_ = "Variable";
19062     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19063     +
19064     +    run;
19065     +    %if &globalclusid ne %then %do;
19066     +    data &outdata;
19067     +       length GCluster $16;
19068     +       set &outdata;
19069     +       GCluster = "GC&globalclusid";
19070     +       run;
19071     +    %end;
19072     +
19073     +    proc datasets lib = work nolist;
19074     +           delete _tmpclusRsq;
19075     +    run;
19076     +
19077     +    quit;
19078     +%mend FindNextClosestClusByCluster;
19079     +
19080     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
19081     +/*----
19082     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
19083     +-----------*/
19084     +
19085     +proc sort data =&indata1;
19086     +    by Variable;
19087     +run;
19088     +proc sort data =&indata2;
19089     +    by Variable;
19090     +run;
19091     +data &outdata;
19092     +    merge &indata1 &indata2;
19093     +    by Variable;
19094     +    length Type $16;
19095     +    Type = 'Variable';
19096     +    *label Type ='Type';
19097     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19098     +run;
19099     +
19100     +
19101     +data &indata3;
19102     +    set  &indata3 ;
19103     +    length RSqWithOwnClusComp 8.;
19104     +    Cluster = Variable;
19105     +    RSqWithOwnClusComp = 1;
19106     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
19107     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
19108     +    length Type $16;
19109     +    Type = 'ClusterComp';
19110     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
19111     +
19112     +;
19113     +run;
19114     +
19115     +proc sort data=&outdata;
19116     +    by Cluster;
19117     +run;
19118     +proc sort data =&indata3;
19119     +    by Cluster;
19120     +run;
19121     +
19122     +data &outdata;
19123     +     set &outdata &indata3;
19124     +     by Cluster;
19125     +run;
19126     +
19127     +
19128     +/* Create the Selected variable with all YES */
19129     +
19130     +data &outdata;
19131     +     set &outdata;
19132     +     length RsqRatio 8.;
19133     +     length Selected $8;
19134     +     *label RSqRatio = "1-R**2 Ratio";
19135     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
19136     +     *label Selected = "Variable Selected";
19137     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
19138     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
19139     +     Selected ='YES';
19140     +     rename _LABEL_ = Label;
19141     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19142     +run;
19143     +
19144     +
19145     +/*----  Selected = Y/N will be assigened at the %score                   -------+
19146     +        Just create the Selected variable with all YES at the step above
19147     + +------------------------------------------------------------------------------+
19148     +
19149     +proc sort data=&outdata;
19150     +    by Cluster RsqRatio;
19151     +run;
19152     +
19153     +%if &selectedcomp eq CLUSTERCOMP %then %do;
19154     +data &outdata;
19155     +     set &outdata; by Cluster;
19156     +     length Selected $8;
19157     +     label Selected = "Variable Selected";
19158     +     if  first.Cluster then Selected ='Yes';
19159     +     else Selected = 'No';
19160     +    run;
19161     +%end;
19162     +%else %do;
19163     +data &outdata(drop = _var _varchange);
19164     +     set &outdata; retain _var 0; by Cluster;
19165     +     length Selected $8;
19166     +     label Selected = "Variable Selected";
19167     +     if first.Cluster then  _varchange = 0;
19168     +     else _varchange =1;
19169     +     if _var ne _varchange then  Selected  = 'Yes';
19170     +     else Selected = 'No';
19171     +     if last.cluster then  _var = 0;
19172     +     else _var = _varchange;
19173     +run;
19174     +%end;
19175     +
19176     +--------------------------------------------------------------*/
19177     +
19178     +quit;
19179     +%mend MakeVarClusResultTable;
19180     +
19181     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
19182     +     proc sort data =&indata;
19183     +        by cluster;
19184     +     run;
19185     +     proc transpose data =&indata
19186     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
19187     +          by cluster;
19188     +     run;
19189     +     data &outdata;
19190     +          set  &outdata;
19191     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19192     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19193     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
19194     +     run;
19195     +     %if &globalclusid ne %then %do;
19196     +     data &outdata;
19197     +          Length GCluster $16;
19198     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19199     +          set  &outdata;
19200     +          GCluster ="GC&globalclusid.";
19201     +          run;
19202     +     %end;
19203     +
19204     +%Mend MakePlotDataFromCorrTable;
19205     +
19206     +
19207     +%macro MakeCorrelation(indata=,
19208     +                       outstat=_tmpoutstat,
19209     +                       corrmatrix=N,
19210     +                       outcorr=_tmpoutcorr,
19211     +                       includeclassvar=N,
19212     +                       target=,
19213     +                       freq=,
19214     +                       weight=);
19215     +   %if &target eq  %then %do;
19216     +
19217     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
19218     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
19219     +       %if &includeclassvar eq Y %then %do;
19220     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
19221     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
19222     +          %do i = 2 %to &nvar;
19223     +          %let varname = %sysfunc(varname(&dsid, &i));
19224     +          &varname
19225     +          %end;
19226     +       %end;
19227     +       ;
19228     +      %if &freq ne  %then %do;
19229     +          freq &freq;
19230     +      %end;
19231     +      %if &weight ne  %then %do;
19232     +          weight &weight;
19233     +      %end;
19234     +
19235     +      run;
19236     +      %if &corrmatrix eq Y %then %do;
19237     +      data  &outcorr (drop = _NCL_ _TYPE_);
19238     +           set  &outstat ;
19239     +           if _TYPE_ ='CORR' then output;
19240     +      run;
19241     +      %end;
19242     +    %end;
19243     +    %else %do;
19244     +       proc corr data=&indata outp=&outstat noprint;
19245     +            var
19246     +       %let dsid = %sysfunc(open(&indata));
19247     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19248     +          %do i = 1 %to &nvar;
19249     +              %let _name = %sysfunc(varname(&dsid, &i));
19250     +              %if &_name ne &target %then;
19251     +              &_name
19252     +           %end;
19253     +        %let dsid= %sysfunc(close(&dsid));
19254     +        ;
19255     +        with &target;
19256     +        run;
19257     +    %end;
19258     +    quit;
19259     +%mend MakeCorrelation;
19260     +
19261     +
19262     +%macro MakeCorrelationDistance(indata=,
19263     +                               outdata=,
19264     +                               rsquare = N
19265     +                               );
19266     +    data corr_tmp;
19267     +        set &indata;
19268     +        if _N_ = 1 then do;
19269     +           output;
19270     +           stop;
19271     +         end;
19272     +    run;
19273     +    %if &outdata ne  %then %let  _outdata = &outdata;
19274     +    %else %let _outdata = &indata;
19275     +
19276     +    data &_outdata;
19277     +         set &indata;
19278     +
19279     +         %let dsid = %sysfunc(open(work.corr_tmp));
19280     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19281     +          %do i = 2 %to &nvar;
19282     +              %let _name = %sysfunc(varname(&dsid, &i));
19283     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19284     +              %else  %let _name_md = &_name;
19285     +              &_name = 1- &_name_md;
19286     +          %end;
19287     +      %let dsid= %sysfunc(close(&dsid));
19288     +      run;
19289     +      proc datasets lib = work nolist;
19290     +           delete corr_tmp;
19291     +      run;
19292     +      quit;
19293     +  %mend MakeCorrelationDistance;
19294     +
19295     +
19296     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19297     +                                   rsquare = N
19298     +                                   );
19299     +    data corr_tmp;
19300     +        set &indata;
19301     +    run;
19302     +    proc sql noprint;
19303     +           update &indata
19304     +           set
19305     +     %let dsid = %sysfunc(open(work.corr_tmp));
19306     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19307     +          %do i = 4 %to &nvar;
19308     +          %let _name = %sysfunc(varname(&dsid, &i));
19309     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19310     +            %else  %let _name_md = &_name;
19311     +            %if &i < &nvar %then %do;
19312     +               &_name = 1- &_name_md ,
19313     +            %end;
19314     +            %else %do;
19315     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19316     +            %end;
19317     +          %end;
19318     +      %let dsid= %sysfunc(close(&dsid));
19319     +
19320     +      select * from &indata;
19321     +      run;
19322     +     data &indata( drop = _NCL_);
19323     +           set &indata;
19324     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19325     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19326     +     run;
19327     +     data &indata(DROP = _NCL_);
19328     +           set &indata;
19329     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19330     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19331     +           rename _NAME_ = _VAR_;
19332     +     run;
19333     +     proc datasets lib = work nolist;
19334     +           delete corr_tmp;
19335     +     run;
19336     +     quit;
19337     + %mend UpdateOutStatCorrToDistance;
19338     +
19339     +
19340     +%macro HierClusWithCorr(indata= ,
19341     +                        ncluster=,
19342     +                        method = Ward,
19343     +                        outtree = _outtree,
19344     +                        idvar =_VAR_,
19345     +                        outdata=,
19346     +                        rescore = N,
19347     +                        newncluster=
19348     +                        );
19349     +      %global &newncluster;
19350     +      %if &rescore ne Y %then %do;
19351     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19352     +                   method=&method outtree=&outtree noprint;
19353     +           id &idvar;
19354     +      run;
19355     +      %end;
19356     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19357     +      run;
19358     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19359     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19360     +      run;
19361     +      data _outcontent;
19362     +          set _outcontent;
19363     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19364     +          index = 1;
19365     +          rename NAME = _NAME_;
19366     +      run;
19367     +      proc sort data=_outcontent;
19368     +          by _NAME_;
19369     +      run;
19370     +      proc sort data =&outdata;
19371     +           by _NAME_;
19372     +      run;
19373     +      data &outdata(drop=index);
19374     +          merge &outdata _outcontent;
19375     +          by _NAME_;
19376     +          if index = . then delete;
19377     +      run;
19378     +      /*-----------------------------------------------------------*/
19379     +      data &outdata;
19380     +           length CLUSNAME $16;
19381     +           set &outdata;
19382     +           if CLUSTER > &ncluster then delete;
19383     +           CLUSNAME='GC'||strip(CLUSTER);
19384     +           *label CLUSNAME = "Cluster Name";
19385     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19386     +           rename _NAME_ = VARIABLE ;
19387     +           *label _NAME_ = "Variable";
19388     +           *label CLUSTER = "Cluster";
19389     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19390     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19391     +      run;
19392     +      proc sort data=&outdata out=&outdata;
19393     +           by CLUSTER;
19394     +      run;
19395     +      proc means data =&outdata noprint;
19396     +           output out=_meanout;
19397     +      run;
19398     +      data _null_;
19399     +            set _meanout;
19400     +            if strip(_STAT_) eq 'MAX' then do;
19401     +            call symput("&newncluster", CLUSTER);
19402     +            stop;
19403     +            end;
19404     +      run;
19405     +
19406     +      proc datasets lib = work nolist;
19407     +           delete _outcontent _meanout;
19408     +      run;
19409     +      quit;
19410     +%mend  HierClusWithCorr;
19411     +
19412     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19413     +
19414     +     data _tmpindata;
19415     +          set &indata;
19416     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19417     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19418     +          if _TYPE_ = 'STD' then _NAME_='STD';
19419     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19420     +          DROP _TYPE_ _NCL_;
19421     +     run;
19422     +
19423     +     filename _file_  "&fileRef";
19424     +
19425     +     data _null_;
19426     +        FILE _file_ MOD;
19427     +        put ' ';
19428     +        put "/*-------------------------------------------------*/";
19429     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19430     +        put "/*-------------------------------------------------*/";
19431     +        put ' ';
19432     +        %let dsid = %sysfunc(open(work._tmpindata));
19433     +
19434     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19435     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19436     +        %let k = 1;
19437     +        %do %while(^%sysfunc(fetch(&dsid)));
19438     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19439     +               %if &k > 2 %then %do;
19440     +                %let cn = %eval(&k-2);
19441     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19442     +                %end;
19443     +                %let k = %eval(&k+1);
19444     +
19445     +        %end;
19446     +        %let rc = %sysfunc(rewind(&dsid));
19447     +
19448     +        %do j= 2 %to &nvar;
19449     +            %let _varname = %sysfunc(varname(&dsid, &j));
19450     +            %do %while(^%sysfunc(fetch(&dsid)));
19451     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19452     +                %if &_name = MEAN %then
19453     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19454     +                %else %if &_name = STD %then
19455     +                %let _std = %sysfunc(getvarn(&dsid, &j));
19456     +                %else %do;
19457     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19458     +                      %let abscoeff = %sysfunc(abs(&coeff));
19459     +                          %if &abscoeff >  0 %then %do;
19460     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19461     +                           %end;
19462     +                 %end;
19463     +             %end;
19464     +             %let rc = %sysfunc(rewind(&dsid));
19465     +         %end;
19466     +
19467     +        %let dsid= %sysfunc(close(&dsid));
19468     +
19469     +     run;
19470     +
19471     +     filename _file_;
19472     +     proc datasets lib = work nolist;
19473     +           delete _tmpindata;
19474     +     run;
19475     +     quit;
19476     +%mend CreateScoreCode2;
19477     +
19478     +
19479     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19480     +
19481     +     /*--- Build Code to Modify Metadata ---*/
19482     +     filename X "&deltacodefile";
19483     +     data _null_;
19484     +        FILE X;
19485     +        set &groupds end=eof;
19486     +        if _N_=1 then do;
19487     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19488     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19489     +           %end;
19490     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19491     +           put "if upcase(strip(NAME)) in (";
19492     +        end;
19493     +        if Strip(upcase(Selected)) eq 'YES' then do;
19494     +           string = '"'!!trim(left(VARIABLE))!!'"';
19495     +           put string;
19496     +        end;
19497     +        if eof then do;
19498     +           put ') then ROLE="INPUT";';
19499     +           put 'else ROLE="REJECTED";';
19500     +           put 'end;';
19501     +
19502     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19503     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19504     +           %end;
19505     +        end;
19506     +     run;
19507     +     quit;
19508     +
19509     +     filename X;
19510     +     quit;
19511     +%mend MakeDeltaCode2;
19512     +
19513     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19514     +  %global &ngc;
19515     +  data _null_;
19516     +  %if &indata ne %then %do;
19517     +      %let dsid = %sysfunc(open(&indata));
19518     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19519     +      %let dsid = %sysfunc(close(&dsid));
19520     +  %end;
19521     +  %else %do;
19522     +       %let nvar = %eval(&ninput+&ndummy); ;
19523     +  %end;
19524     +  %let numgc = %eval(&nvar/&div+2);
19525     +  %let &ngc = &numgc;
19526     +   run;
19527     +  quit;
19528     +%mend getInitialGClusterNumber;
19529     +
19530     +
19531     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19532     +data &outlink(drop = Selected);
19533     +     set &indata;
19534     +     LINKID = _N_;
19535     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19536     +run;
19537     +data &outnode(keep=NODEID TYPE LABEL);
19538     +    set &indata;
19539     +    length TYPE $16;
19540     +    rename VARIABLE = NODEID;
19541     +    *label  CLUSNAME="Node ID";
19542     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19543     +    TYPE = "VARIABLE";
19544     +    *label TYPE = "Node Type";
19545     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19546     +    run;
19547     +data _tmp(keep=NODEID TYPE LABEL);
19548     +    set &indata;
19549     +    length TYPE $16;
19550     +    rename CLUSNAME = NODEID;
19551     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19552     +    TYPE = "GCLUSTER";
19553     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19554     +    run;
19555     +proc sort data=_tmp;
19556     +    by NODEID;
19557     +run;
19558     +data _tmp;
19559     +    set _tmp; by NODEID;
19560     +    if first.NODEID then output;
19561     +run;
19562     +proc sort data=&outnode;
19563     +    by NODEID;
19564     +run;
19565     +data  &outnode;
19566     +    set _tmp &outnode;
19567     +run;
19568     +proc datasets lib = work nolist;
19569     +     delete _tmp;
19570     +run;
19571     +quit;
19572     +%mend MakeGobalConstellData;
19573     +
19574     +/* Make contellation plot data among GCLUSTERS */
19575     +
19576     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19577     +
19578     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19579     +     set &indata;
19580     +     LINKID = _N_;
19581     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19582     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19583     +     end;
19584     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19585     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19586     +     end;
19587     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19588     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19589     +    end;
19590     +run;
19591     +
19592     +data _tmp_outrsquare;
19593     +        set &inoutrsq;
19594     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19595     +run;
19596     +
19597     +proc freq data =_tmp_outrsquare noprint;
19598     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19599     +run;
19600     +
19601     +data &outnode(keep=_NAME_ TYPE LABEL);
19602     +    set &outlink;
19603     +    length TYPE $16;
19604     +    length LABEL $100;
19605     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19606     +
19607     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19608     +    TYPE = "GCLUSTER";
19609     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19610     +    end;
19611     +    else do;
19612     +    TYPE= "ROOT";
19613     +    LABEL= _NAME_;
19614     +    end;
19615     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19616     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19617     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19618     +    run;
19619     +
19620     +proc sort data=&outnode;
19621     +     by _NAME_;
19622     +proc sort data=_tmp_GCLUSFREQ;
19623     +     by _NAME_;
19624     +run;
19625     +
19626     +data  &outnode;
19627     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19628     +     if COUNT=. then COUNT=1;
19629     +run;
19630     +
19631     +proc datasets lib = work nolist;
19632     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19633     +run;
19634     +
19635     +quit;
19636     +%Mend MakeGClusterConstData;
19637     +
19638     +
19639     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19640     +
19641     +    data _gscoretmpds;
19642     +          set &indata;
19643     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19644     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19645     +          if _TYPE_ = 'STD' then _NAME_='STD';
19646     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19647     +          DROP _TYPE_ _NCL_;
19648     +     run;
19649     +
19650     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19651     +        GCluster Component &globalclusid ------ */
19652     +
19653     +    filename _file_  "&fileref";
19654     +
19655     +    data _null_;
19656     +        %if &globalclusid eq 1 %then %do;
19657     +          FILE _file_;
19658     +        %end;
19659     +        %else %do;
19660     +          FILE _file_ MOD;
19661     +        %end;
19662     +
19663     +        %let dsid = %sysfunc(open(work._gscoretmpds));
19664     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19665     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19666     +
19667     +        %let k = 1;
19668     +        %do %while(^%sysfunc(fetch(&dsid)));
19669     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19670     +                %if &k > 2 %then %do;
19671     +                put "&_name = 0 ; ";
19672     +                %end;
19673     +                %let k = %eval(&k+1);
19674     +        %end;
19675     +
19676     +        %let rc = %sysfunc(rewind(&dsid));
19677     +        %do i= 2 %to &nvar;
19678     +            %let _varname =  %sysfunc(varname(&dsid, &i));
19679     +            %do %while(^%sysfunc(fetch(&dsid)));
19680     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19681     +                %if &_name = MEAN %then
19682     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19683     +                %else %if &_name = STD %then
19684     +                %let _std = %sysfunc(getvarn(&dsid, &i));
19685     +                %else %do;
19686     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19687     +                      %let abscoeff = %sysfunc(abs(&coeff));
19688     +                          %if &abscoeff >  0 %then %do;
19689     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19690     +                           %end;
19691     +                 %end;
19692     +             %end;
19693     +             %let rc = %sysfunc(rewind(&dsid));
19694     +
19695     +         %end;
19696     +
19697     +        %let dsid= %sysfunc(close(&dsid));
19698     +       run;
19699     +
19700     +
19701     +       proc datasets lib=work nolist;
19702     +            delete _gscoretmpds;
19703     +       run;
19704     +      quit;
19705     +
19706     +%mend CreateGClusterScoreCode;
19707     +
19708     +
19709     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19710     +
19711     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19712     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19713     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19714     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19715     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19716     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19717     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19718     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19719     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19720     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19721     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19722     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19723     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19724     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19725     +
19726     +   filename gsfile "&gscorecode";
19727     +
19728     +   data &EM_USER_GSCORE;
19729     +             set &indata;
19730     +             %include  gsfile;
19731     +        keep
19732     +        %do i=1 %to &ngcluster;
19733     +         %let gcvarname = GC&i;
19734     +         &gcvarname
19735     +        %end;
19736     +     ;
19737     +   run;
19738     +
19739     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19740     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19741     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19742     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19743     +    noprint  ;
19744     +     var
19745     +       %do i=1 %to &ngcluster;
19746     +         %let gcvarname = GC&i;
19747     +         &gcvarname
19748     +        %end;
19749     +   ;
19750     +   run;
19751     +
19752     +
19753     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19754     +   data &EM_USER_GSCORECORRPLOT ;
19755     +        set &EM_USER_GSCORECORRPLOT;
19756     +        rename _X_ = X;
19757     +        rename _Y_ = Y;
19758     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19759     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19760     +   run;
19761     +
19762     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19763     +
19764     +   data &EM_USER_GSCORETREE;
19765     +        length _NAME_ $32;
19766     +        length _LABEL_ $100;
19767     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19768     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19769     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19770     +        end;else do;
19771     +         _LABEL_ = _NAME_;
19772     +        end;
19773     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19774     +
19775     +   run;
19776     +
19777     +   quit;
19778     +
19779     +%mend MakeGClusterCorrelation;
19780     +
19781     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
19782      *------------------------------------------------------------*;
19783      * End UPDATE: VarClus;
19784      *------------------------------------------------------------*;
19785      

19786      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\PROPERTIES.xml' encoding="UTF-8" NOBOM;
19788      %let _HPDMGRIDHOST=;
19789      %let _HPDMGRIDINSTALLLOC=;
19790      %let _HPDMGRIDDATASERVER=;
19791      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* VarClus : End update 
* datetime : 24OCT2020:18:48:50 
* 
*------------------------------------------------------------* 
19792      %let _emdsep = \;
19793      %em_getactionstatus(emlib =EMWS1, nodeid=VarClus);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

19794      %let em_filemodtime=;
19795      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
19796      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
19797      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
19798      where fileref eq "#LN00441";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00441";
19799      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
19800      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00441';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19801      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19802      %let em_Train = N;
19803      %let em_Score = N;
19804      %let em_Report = N;
19805      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

19806      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19807      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19808      put '<Node Id="VarClus" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="VarClus" Event="Complete" Pid="" Gridid=""/>';
19809      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19810      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19811      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Node "Clus" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Clus" succeeded. 
19813      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
19814      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19815      put '<Node Id="Clus" Event="Complete" Pid="72384" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus" Event="Complete" Pid="72384" Gridid=""/>';
19816      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "VarClus" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
NOTE: The task "C2SO67OQ" is not an active task.
19817      waitfor _all_ C2SO67OQ;
MPRINT(EM_DIAGRAM):    waitfor _all_ C2SO67OQ;
19818      signoff C2SO67OQ;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C2SO67OQ does not exist.  SIGNOFF is not necessary.
19819      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
19820      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
19821      put '<Node Id="Prof" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof" Event="Update" Pid="" Gridid=""/>';
19822      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19823      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Prof : Beginning update before running 
* datetime : 24OCT2020:18:48:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Prof_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
19854      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
19855      * Prof: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Prof: Update Variables Set;
19856      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

19857      proc sort data=EMWS1.Clus_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_CMeta_TRAIN out=_SortedVar;
19858      by name;
MPRINT(EM_DIAGRAM):   by name;
19859      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS1.CLUS_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 15 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19860      proc sort data=EMWS1.Prof_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Prof_VariableSet;
19861      by name;
MPRINT(EM_DIAGRAM):   by name;
19862      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19863      data EMWS1.Prof_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Prof_VariableSet;
19864      merge _SortedVar(in=_a) EMWS1.Prof_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Prof_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
19865      by name;
MPRINT(EM_DIAGRAM):   by name;
19866      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
19867      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
19868      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
19869      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 15 observations read from the data set EMWS1.PROF_VARIABLESET.
NOTE: The data set EMWS1.PROF_VARIABLESET has 15 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19870      * Prof: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Prof: End of Update Variables Set;
19871      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20067      %let emexceptionString =;
20068      %let EMEXCEPTIONSTRING=;
20069      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20070      * UPDATE: Prof;
MPRINT(EM_DIAGRAM):   * UPDATE: Prof;
20071      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20072      %let EM_ACTION = UPDATE;
20073      %let syscc = 0;
20074      %macro main;
20075         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
20076             options MPRINT;
20077         %end;
20078      
20079         filename temp catalog 'sashelp.emexpl.profile_macros.source';
20080         %include temp;
20081         filename temp;
20082      
20083         /* Initialize property macro variables */
20084         %SetProperties;
20085      
20086         %if %upcase(&EM_ACTION) = CREATE %then %do;
20087      
20088             filename temp catalog 'sashelp.emexpl.profile_create.source';
20089             %include temp;
20090             filename temp;
20091             %create;
20092         %end;
20093         %else
20094         %if %upcase(&EM_ACTION) = TRAIN %then %do;
20095      
20096             filename temp catalog 'sashelp.emexpl.profile_train.source';
20097             %include temp;
20098             filename temp;
20099             %train;
20100         %end;
20101      %mend main;
20102      
20103      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
20104     +%macro SetProperties;
20105     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
20106     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
20107     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
20108     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
20109     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
20110     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
20111     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
20112     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
20113     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
20114     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
20115     +%mend SetProperties;
20116     +
20117     +
20118     +%macro makeVarMacros(level= );
20119     +
20120     +    %let numvars = 0;
20121     +    %let where   = '';
20122     +
20123     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
20124     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
20125     +    %else
20126     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
20127     +
20128     +    %if &level = INTERVAL %then %do;
20129     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
20130     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
20131     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
20132     +    %end;
20133     +    %else %do;
20134     +        %if &level = NOMINAL %then %do;
20135     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
20136     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
20137     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
20138     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
20139     +             %end;
20140     +             %else
20141     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
20142     +
20143     +        %end;
20144     +        %else %do;
20145     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
20146     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
20147     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
20148     +        %end;
20149     +    %end;
20150     +
20151     +    %if &numvars>0 %then %do;
20152     +         %let numloop = %sysfunc(ceil(&numvars/10000));
20153     +         %let loopcount = 0;
20154     +
20155     +         %do %while((&numloop - &loopcount) > 0);
20156     +             %let first = %eval((&loopcount*10000) + 1);
20157     +             %let last  = %eval(&first + 10000);
20158     +             %let loopcount = %eval(&loopcount +1);
20159     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
20160     +             filename X catalog "&centry";
20161     +             data _null_;
20162     +                length _STRING_ $80;
20163     +                retain _STRING_ ;
20164     +                file X;
20165     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
20166     +
20167     +                where &where;
20168     +
20169     +                if _N_=1 then
20170     +                   put '%macro _PROFVAR;';
20171     +
20172     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
20173     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
20174     +                   if eof then do;
20175     +                      put _STRING_;
20176     +                      put '%mend _PROFVAR;';
20177     +                   end;
20178     +                end;
20179     +                else do;
20180     +                   put _STRING_;
20181     +                  _string_ = TRIM(NAME);
20182     +                   if eof then do;
20183     +                      put _string_;
20184     +                      put '%mend _PROFVAR;';
20185     +                   end;
20186     +                end;
20187     +             run;
20188     +             filename X;
20189     +         %end;
20190     +    %end;
20191     +
20192     +%mend makeVarMacros;
20193     +
20194     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Prof;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20195      *------------------------------------------------------------*;
20196      * End UPDATE: Prof;
20197      *------------------------------------------------------------*;

20198      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20200      %let _HPDMGRIDHOST=;
20201      %let _HPDMGRIDINSTALLLOC=;
20202      %let _HPDMGRIDDATASERVER=;
20203      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Prof : End update 
* datetime : 24OCT2020:18:48:51 
* 
*------------------------------------------------------------* 
20204      %let _emdsep = \;
20205      %em_getactionstatus(emlib =EMWS1, nodeid=Prof);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20206      %let em_Train = Y;
20207      %let em_Report = Y;
20208      %let em_Score = Y;
20209      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20210      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20211      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20212      put '<Node Id="Prof" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof" Event="Run" Pid="" Gridid=""/>';
20213      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 46.
      The maximum record length was 46.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20214      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
20215      %let SYSCC=0;
20216      signon C2XL3SAK macvar=C2XL3SAK;
MPRINT(EM_DIAGRAM):   signon macvar=C2XL3SAK;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C2XL3SAK commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.01 seconds
      cpu time            0.09 seconds
      
NOTE: Remote signon to C2XL3SAK complete.
20217      rsubmit C2XL3SAK wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C2XL3SAK in progress.
NOTE: Remote submit to C2XL3SAK commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Prof);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Prof;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Prof = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Prof = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
20218      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20219      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20220      put '<Node Id="Prof" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof" Event="Run" Pid=" " Gridid=""/>';
20221      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20222      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20223      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20224      put '<Node Id="Neural" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Update" Pid="" Gridid=""/>';
20225      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20226      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural : Beginning update before running 
* datetime : 24OCT2020:18:48:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20246      %let _HPDMGRIDHOST=;
20247      %let _HPDMGRIDINSTALLLOC=;
20248      %let _HPDMGRIDDATASERVER=;
20249      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural : End update 
* datetime : 24OCT2020:18:48:53 
* 
*------------------------------------------------------------* 
20250      %let _emdsep = \;
20251      %em_getactionstatus(emlib =EMWS1, nodeid=Neural);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20252      %let em_Train = N;
20253      %let em_Score = N;
20254      %let em_Report = N;
20255      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20256      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20257      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20258      put '<Node Id="Neural" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Complete" Pid="" Gridid=""/>';
20259      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20260      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20261      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Node "Neural" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
20262      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20263      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20264      put '<Node Id="Reg" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Update" Pid="" Gridid=""/>';
20265      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20266      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Reg : Beginning update before running 
* datetime : 24OCT2020:18:48:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Reg_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20286      %let _HPDMGRIDHOST=;
20287      %let _HPDMGRIDINSTALLLOC=;
20288      %let _HPDMGRIDDATASERVER=;
20289      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Reg : End update 
* datetime : 24OCT2020:18:48:54 
* 
*------------------------------------------------------------* 
20290      %let _emdsep = \;
20291      %em_getactionstatus(emlib =EMWS1, nodeid=Reg);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20292      %let em_Train = N;
20293      %let em_Score = N;
20294      %let em_Report = N;
20295      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20296      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20297      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20298      put '<Node Id="Reg" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Reg" Event="Complete" Pid="" Gridid=""/>';
20299      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20300      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20301      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Reg" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_readyNode_note 
20302      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20303      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20304      put '<Node Id="Tree" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Update" Pid="" Gridid=""/>';
20305      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20306      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Tree : Beginning update before running 
* datetime : 24OCT2020:18:48:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Tree_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Churned(type=PROFIT label= Churned);
MPRINT(EM_DIAGRAM):   label DECISION1= "YES";
MPRINT(EM_DIAGRAM):   label DECISION2= "NO";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Churned;
MPRINT(EM_DECDATA):   length Churned $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "YES" DECISION2= "NO" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Churned="YES";
MPRINT(EM_DECDATA):   COUNT=1096;
MPRINT(EM_DECDATA):   DATAPRIOR=0.20360393832435;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.20360393832435;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Churned="NO";
MPRINT(EM_DECDATA):   COUNT=4287;
MPRINT(EM_DECDATA):   DATAPRIOR=0.79639606167564;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.79639606167564;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Churned(type=PROFIT label= Churned);
MPRINT(EM_DECDATA):   label DECISION1= 'YES';
MPRINT(EM_DECDATA):   label DECISION2= 'NO';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Churned(type=PROFIT label= Churned);
MPRINT(EM_DIAGRAM):   label DECISION1= "YES";
MPRINT(EM_DIAGRAM):   label DECISION2= "NO";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20707      data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):    data EM_TARGETDECINFO;
20708      length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
20709      TARGET="Churned";
MPRINT(EM_DIAGRAM):   TARGET="Churned";
20710      DECDATA="EMWS1.Tree_Churned_DD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Tree_Churned_DD";
20711      DECMETA="EMWS1.Tree_Churned_DM";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Tree_Churned_DM";
20712      output;
MPRINT(EM_DIAGRAM):   output;
20713      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20714      %let emexceptionString =;
20715      %let EMEXCEPTIONSTRING=;
20716      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20717      * UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * UPDATE: Tree;
20718      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20719      %let EM_ACTION = UPDATE;
20720      %let syscc = 0;
20721      %macro main;
20722      
20723        %if %upcase(&EM_ACTION) = CREATE %then %do;
20724          filename temp catalog 'sashelp.emmodl.tree_create.source';
20725          %include temp;
20726          filename temp;
20727      
20728          %em_tree_create;
20729        %end;
20730      
20731         %else
20732         %if %upcase(&EM_ACTION) = TRAIN %then %do;
20733      
20734             filename temp catalog 'sashelp.emmodl.tree_train.source';
20735             %include temp;
20736             filename temp;
20737             %em_tree_train;
20738         %end;
20739      
20740        %else
20741        %if %upcase(&EM_ACTION) = SCORE %then %do;
20742          filename temp catalog 'sashelp.emmodl.tree_score.source';
20743          %include temp;
20744          filename temp;
20745      
20746          %em_tree_score;
20747      
20748        %end;
20749      
20750        %else
20751        %if %upcase(&EM_ACTION) = REPORT %then %do;
20752      
20753             filename temp catalog 'sashelp.emmodl.tree_report.source';
20754             %include temp;
20755             filename temp;
20756      
20757             %em_tree_report;
20758         %end;
20759      
20760        %else
20761        %if %upcase(&EM_ACTION) = OPENINT %then %do;
20762      
20763             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20764             %include temp;
20765             filename temp;
20766             %EM_TREE_OPENTREEVIEWER;
20767      
20768         %end;
20769      
20770        %else
20771        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20772      
20773             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20774             %include temp;
20775             filename temp;
20776             %EM_TREE_CLOSETREEVIEWER;
20777      
20778         %end;
20779      
20780      
20781         %doendm:
20782      %mend main;
20783      
20784      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(EM_DIAGRAM):  ;
20785      
20786      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
20787      * End UPDATE: Tree;
MPRINT(EM_DIAGRAM):   * End UPDATE: Tree;
20788      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

20789      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20791      %let _HPDMGRIDHOST=;
20792      %let _HPDMGRIDINSTALLLOC=;
20793      %let _HPDMGRIDDATASERVER=;
20794      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Tree : End update 
* datetime : 24OCT2020:18:48:55 
* 
*------------------------------------------------------------* 
20795      %let _emdsep = \;
20796      %em_getactionstatus(emlib =EMWS1, nodeid=Tree);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20797      %let em_filemodtime=;
20798      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
20799      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
20800      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
20801      where fileref eq "#LN00569";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00569";
20802      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
20803      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00569';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20804      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
20805      %let em_Train = N;
20806      %let em_Score = N;
20807      %let em_Report = N;
20808      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

20809      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20810      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20811      put '<Node Id="Tree" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Tree" Event="Complete" Pid="" Gridid=""/>';
20812      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20813      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20814      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Node "Tree" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_readyNode_note 
20815      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20816      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20817      put '<Node Id="MdlComp" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Update" Pid="" Gridid=""/>';
20818      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20819      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 24OCT2020:18:48:55 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_exportSet EMWS1.Reg_exportSet EMWS1.Tree_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("TREE_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TEST") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("TREE_TREE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_TEST") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("REG_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_TEST") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1MYBJBZ as select * from WORK.M38XGXBY order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp1MYBJBZ as select * from WORK.M1112O5X order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1MYBJBZ compare=work._comp1MYBJBZ out=WORK._DIFF11AYLXV noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
20867      %let _HPDMGRIDHOST=;
20868      %let _HPDMGRIDINSTALLLOC=;
20869      %let _HPDMGRIDDATASERVER=;
20870      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 24OCT2020:18:48:55 
* 
*------------------------------------------------------------* 
20871      %let _emdsep = \;
20872      %em_getactionstatus(emlib =EMWS1, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

20873      %let em_Train = N;
20874      %let em_Score = N;
20875      %let em_Report = N;
20876      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

20877      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20878      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20879      put '<Node Id="MdlComp" Event="Complete" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Complete" Pid="" Gridid=""/>';
20880      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 54.
      The maximum record length was 54.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20881      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20882      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "MdlComp" is up to date and doesn't need to run. 
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
20883      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20884      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
20885      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20886      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Prof2);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Prof2;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

6004   %let EM_MACROS=Y;
6005   filename temp catalog 'sashelp.emutil.em_loadrunmacros.source';
6006   %include temp;
NOTE: ALT_TOOLS Macros loaded
NOTE: Test usage by running the EM_TEST macro
NOTE: Fileref _TMPHPDM has been deassigned.
NOTE: Fileref _TMPHPDM has been deassigned.
9852   filename temp;
NOTE: Fileref TEMP has been deassigned.

*------------------------------------------------------------* 
* 
* Prof2 : Running 
* datetime : 24OCT2020:18:48:46 
* 
*------------------------------------------------------------* 
9853   %let SYSCC =0;
9854   %let EMGROUPMODE =;
9855   %let EMGROUPID =;
17640  data EMWS1.Prof2_EMTRAINVARIABLE;
17641  length NAME $64;
17642  set EMWS1.Prof2_VariableSet;
17643  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
17644     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
17645  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
17646  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
17647  drop lowerlimit upperlimit creator--type format--length;
17648  run;

NOTE: There were 15 observations read from the data set EMWS1.PROF2_VARIABLESET.
NOTE: The data set EMWS1.PROF2_EMTRAINVARIABLE has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17649  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Prof2 : End run 
* datetime : 24OCT2020:18:48:57 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-7.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           11.13 seconds
      cpu time            9.53 seconds
      

17652   %put &&emexceptionstring;
 
17653   %sysrput emerror_Prof2 = &&emexceptionstring;
17654   %put &&emloopmode;
 
17655   %sysrput emloopmode_Prof2 = &&emloopmode;
NOTE: Remote submit to C0EX2AC9 complete.
NOTE: Remote signoff from C0EX2AC9 commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           13.02 seconds
      cpu time            9.65 seconds
      
NOTE: Remote signoff from C0EX2AC9 complete.
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
traverser_runingNode_note 
20887      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20888      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Prof2" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Prof2" succeeded. 
20890      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20891      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20892      put '<Node Id="Prof2" Event="Complete" Pid="42744" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof2" Event="Complete" Pid="42744" Gridid=""/>';
20893      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
NOTE: The task "C0EX2AC9" is not an active task.
20894      waitfor _all_ C0EX2AC9;
MPRINT(EM_DIAGRAM):    waitfor _all_ C0EX2AC9;
20895      signoff C0EX2AC9;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C0EX2AC9 does not exist.  SIGNOFF is not necessary.
20896      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
20897      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Clus3);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMEXPL.CLUSTER.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Clus3;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* Clus3 : Running 
* datetime : 24OCT2020:18:48:50 
* 
*------------------------------------------------------------* 
6004   %let SYSCC =0;
6005   %let EMGROUPMODE =;
6006   %let EMGROUPID =;
13461  data EMWS1.Clus3_EMTRAINVARIABLE;
13462  length NAME $64;
13463  set EMWS1.Clus3_VariableSet;
13464  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE =
13464! "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
13464! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
13465     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
13465! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
13466  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
13467  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
13468  drop lowerlimit upperlimit creator--type format--length;
13469  run;

NOTE: There were 11 observations read from the data set EMWS1.CLUS3_VARIABLESET.
NOTE: The data set EMWS1.CLUS3_EMTRAINVARIABLE has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

13470  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Clus3 : End run 
* datetime : 24OCT2020:18:48:58 
* 
*------------------------------------------------------------* 
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.

NOTE: The PROCEDURE DISPLAY printed pages 1-2.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           8.12 seconds
      cpu time            5.15 seconds
      

13473   %put &&emexceptionstring;
 
20898      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20899      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
13474   %sysrput emerror_Clus3 = &&emexceptionstring;
13475   %put &&emloopmode;
 

13476   %sysrput emloopmode_Clus3 = &&emloopmode;
NOTE: Remote submit to C3NDZ204 complete.
NOTE: Remote signoff from C3NDZ204 commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           10.10 seconds
      cpu time            5.28 seconds
      
NOTE: Remote signoff from C3NDZ204 complete.
Traverser: WaitingNode "PROF3" 
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
20900      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20901      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Clus3" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Clus3" succeeded. 
20903      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
20904      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20905      put '<Node Id="Clus3" Event="Complete" Pid="24964" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Clus3" Event="Complete" Pid="24964" Gridid=""/>';
20906      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_readyNode_note 
NOTE: The task "C3NDZ204" is not an active task.
20907      waitfor _all_ C3NDZ204;
MPRINT(EM_DIAGRAM):    waitfor _all_ C3NDZ204;
20908      signoff C3NDZ204;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C3NDZ204 does not exist.  SIGNOFF is not necessary.
20909      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
20910      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
20911      put '<Node Id="Prof3" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof3" Event="Update" Pid="" Gridid=""/>';
20912      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20913      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Prof3 : Beginning update before running 
* datetime : 24OCT2020:18:48:59 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Prof3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
20944      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
20945      * Prof3: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Prof3: Update Variables Set;
20946      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

20947      proc sort data=EMWS1.Clus3_CMeta_TRAIN out=_SortedVar;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus3_CMeta_TRAIN out=_SortedVar;
20948      by name;
MPRINT(EM_DIAGRAM):   by name;
20949      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set EMWS1.CLUS3_CMETA_TRAIN.
NOTE: The data set WORK._SORTEDVAR has 15 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20950      proc sort data=EMWS1.Prof3_VariableSet;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Prof3_VariableSet;
20951      by name;
MPRINT(EM_DIAGRAM):   by name;
20952      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20953      data EMWS1.Prof3_VariableSet;
MPRINT(EM_DIAGRAM):   data EMWS1.Prof3_VariableSet;
20954      merge _SortedVar(in=_a) EMWS1.Prof3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
MPRINT(EM_DIAGRAM):   merge _SortedVar(in=_a) EMWS1.Prof3_VariableSet(in=_b rename=(ROLE = OLDROLE) keep=NAME ROLE USE REPORT);
20955      by name;
MPRINT(EM_DIAGRAM):   by name;
20956      if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
MPRINT(EM_DIAGRAM):   if (OLDROLE = 'TARGET' and use = 'Y') and ROLE = 'REJECTED' then USE = 'D';
20957      drop OLDROLE;
MPRINT(EM_DIAGRAM):   drop OLDROLE;
20958      if _b and ^_a then delete;
MPRINT(EM_DIAGRAM):   if _b and ^_a then delete;
20959      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 15 observations read from the data set WORK._SORTEDVAR.
NOTE: There were 15 observations read from the data set EMWS1.PROF3_VARIABLESET.
NOTE: The data set EMWS1.PROF3_VARIABLESET has 15 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20960      * Prof3: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Prof3: End of Update Variables Set;
20961      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Prof3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = '';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21156      %let emexceptionString =;
21157      %let EMEXCEPTIONSTRING=;
21158      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21159      * UPDATE: Prof3;
MPRINT(EM_DIAGRAM):   * UPDATE: Prof3;
21160      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21161      %let EM_ACTION = UPDATE;
21162      %let syscc = 0;
21163      %macro main;
21164         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
21165             options MPRINT;
21166         %end;
21167      
21168         filename temp catalog 'sashelp.emexpl.profile_macros.source';
21169         %include temp;
21170         filename temp;
21171      
21172         /* Initialize property macro variables */
21173         %SetProperties;
21174      
21175         %if %upcase(&EM_ACTION) = CREATE %then %do;
21176      
21177             filename temp catalog 'sashelp.emexpl.profile_create.source';
21178             %include temp;
21179             filename temp;
21180             %create;
21181         %end;
21182         %else
21183         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21184      
21185             filename temp catalog 'sashelp.emexpl.profile_train.source';
21186             %include temp;
21187             filename temp;
21188             %train;
21189         %end;
21190      %mend main;
21191      
21192      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
21193     +%macro SetProperties;
21194     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
21195     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
21196     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
21197     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
21198     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
21199     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
21200     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
21201     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
21202     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
21203     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
21204     +%mend SetProperties;
21205     +
21206     +
21207     +%macro makeVarMacros(level= );
21208     +
21209     +    %let numvars = 0;
21210     +    %let where   = '';
21211     +
21212     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
21213     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
21214     +    %else
21215     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
21216     +
21217     +    %if &level = INTERVAL %then %do;
21218     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
21219     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
21220     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
21221     +    %end;
21222     +    %else %do;
21223     +        %if &level = NOMINAL %then %do;
21224     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
21225     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
21226     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
21227     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
21228     +             %end;
21229     +             %else
21230     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
21231     +
21232     +        %end;
21233     +        %else %do;
21234     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
21235     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
21236     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
21237     +        %end;
21238     +    %end;
21239     +
21240     +    %if &numvars>0 %then %do;
21241     +         %let numloop = %sysfunc(ceil(&numvars/10000));
21242     +         %let loopcount = 0;
21243     +
21244     +         %do %while((&numloop - &loopcount) > 0);
21245     +             %let first = %eval((&loopcount*10000) + 1);
21246     +             %let last  = %eval(&first + 10000);
21247     +             %let loopcount = %eval(&loopcount +1);
21248     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
21249     +             filename X catalog "&centry";
21250     +             data _null_;
21251     +                length _STRING_ $80;
21252     +                retain _STRING_ ;
21253     +                file X;
21254     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
21255     +
21256     +                where &where;
21257     +
21258     +                if _N_=1 then
21259     +                   put '%macro _PROFVAR;';
21260     +
21261     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
21262     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
21263     +                   if eof then do;
21264     +                      put _STRING_;
21265     +                      put '%mend _PROFVAR;';
21266     +                   end;
21267     +                end;
21268     +                else do;
21269     +                   put _STRING_;
21270     +                  _string_ = TRIM(NAME);
21271     +                   if eof then do;
21272     +                      put _string_;
21273     +                      put '%mend _PROFVAR;';
21274     +                   end;
21275     +                end;
21276     +             run;
21277     +             filename X;
21278     +         %end;
21279     +    %end;
21280     +
21281     +%mend makeVarMacros;
21282     +
21283     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Prof3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21284      *------------------------------------------------------------*;
21285      * End UPDATE: Prof3;
21286      *------------------------------------------------------------*;

21287      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
21289      %let _HPDMGRIDHOST=;
21290      %let _HPDMGRIDINSTALLLOC=;
21291      %let _HPDMGRIDDATASERVER=;
21292      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Prof3 : End update 
* datetime : 24OCT2020:18:48:59 
* 
*------------------------------------------------------------* 
21293      %let _emdsep = \;
21294      %em_getactionstatus(emlib =EMWS1, nodeid=Prof3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

21295      %let em_Train = Y;
21296      %let em_Report = Y;
21297      %let em_Score = Y;
21298      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

21299      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21300      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21301      put '<Node Id="Prof3" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof3" Event="Run" Pid="" Gridid=""/>';
21302      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21303      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
21304      %let SYSCC=0;
21305      signon C2IA2RBG macvar=C2IA2RBG;
MPRINT(EM_DIAGRAM):   signon macvar=C2IA2RBG;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C2IA2RBG commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.24 seconds
      cpu time            0.09 seconds
      
NOTE: Remote signon to C2IA2RBG complete.
21306      rsubmit C2IA2RBG wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C2IA2RBG in progress.
NOTE: Remote submit to C2IA2RBG commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(Prof3);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =Prof3;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_Prof3 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_Prof3 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
21307      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21308      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21309      put '<Node Id="Prof3" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof3" Event="Run" Pid=" " Gridid=""/>';
21310      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21311      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21312      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
21313      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21314      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
21315      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21316      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
21317      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21318      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Prof);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Prof;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

6004   %let EM_MACROS=Y;
6005   filename temp catalog 'sashelp.emutil.em_loadrunmacros.source';
6006   %include temp;
NOTE: ALT_TOOLS Macros loaded
NOTE: Test usage by running the EM_TEST macro
NOTE: Fileref _TMPHPDM has been deassigned.
NOTE: Fileref _TMPHPDM has been deassigned.
9852   filename temp;
NOTE: Fileref TEMP has been deassigned.

*------------------------------------------------------------* 
* 
* Prof : Running 
* datetime : 24OCT2020:18:48:53 
* 
*------------------------------------------------------------* 
9853   %let SYSCC =0;
9854   %let EMGROUPMODE =;
9855   %let EMGROUPID =;
17667  data EMWS1.Prof_EMTRAINVARIABLE;
17668  length NAME $64;
17669  set EMWS1.Prof_VariableSet;
17670  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
17671     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
17672  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
17673  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
17674  drop lowerlimit upperlimit creator--type format--length;
17675  run;

NOTE: There were 15 observations read from the data set EMWS1.PROF_VARIABLESET.
NOTE: The data set EMWS1.PROF_EMTRAINVARIABLE has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

17676  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Prof : End run 
* datetime : 24OCT2020:18:49:04 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-7.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           10.70 seconds
      cpu time            9.07 seconds
      

17679   %put &&emexceptionstring;
 
17680   %sysrput emerror_Prof = &&emexceptionstring;
17681   %put &&emloopmode;
 
17682   %sysrput emloopmode_Prof = &&emloopmode;
NOTE: Remote submit to C2XL3SAK complete.
NOTE: Remote signoff from C2XL3SAK commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           12.21 seconds
      cpu time            9.18 seconds
      
NOTE: Remote signoff from C2XL3SAK complete.
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
traverser_runingNode_note 
21319      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21320      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Prof" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Prof" succeeded. 
21322      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21323      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21324      put '<Node Id="Prof" Event="Complete" Pid="76492" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof" Event="Complete" Pid="76492" Gridid=""/>';
21325      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
NOTE: The task "C2XL3SAK" is not an active task.
21326      waitfor _all_ C2XL3SAK;
MPRINT(EM_DIAGRAM):    waitfor _all_ C2XL3SAK;
21327      signoff C2XL3SAK;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C2XL3SAK does not exist.  SIGNOFF is not necessary.
21328      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
21329      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21330      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21331      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21332      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21333      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21334      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21335      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21336      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21337      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21338      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21339      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21340      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21341      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21342      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21343      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21344      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21345      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21346      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21347      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21348      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21349      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21350      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21351      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21352      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21353      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21354      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21355      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21356      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21357      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21358      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21359      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21360      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21361      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21362      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21363      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21364      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21365      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21366      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21367      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21368      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21369      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(Prof3);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMCORE.EXTENSION.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =Prof3;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

6004   %let EM_MACROS=Y;
6005   filename temp catalog 'sashelp.emutil.em_loadrunmacros.source';
6006   %include temp;
NOTE: ALT_TOOLS Macros loaded
NOTE: Test usage by running the EM_TEST macro
NOTE: Fileref _TMPHPDM has been deassigned.
NOTE: Fileref _TMPHPDM has been deassigned.
9852   filename temp;
NOTE: Fileref TEMP has been deassigned.

*------------------------------------------------------------* 
* 
* Prof3 : Running 
* datetime : 24OCT2020:18:49:02 
* 
*------------------------------------------------------------* 
9853   %let SYSCC =0;
9854   %let EMGROUPMODE =;
9855   %let EMGROUPID =;
17657  data EMWS1.Prof3_EMTRAINVARIABLE;
17658  length NAME $64;
17659  set EMWS1.Prof3_VariableSet;
17660  label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
17661     "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
17662  label USE = "%sysfunc(sasmsg(sashelp.dmine, META_USE_VLABEL, NOQUOTE))";
17663  label REPORT = "%sysfunc(sasmsg(sashelp.dmine, META_REPORT_VLABEL, NOQUOTE))";
17664  drop lowerlimit upperlimit creator--type format--length;
17665  run;

NOTE: There were 15 observations read from the data set EMWS1.PROF3_VARIABLESET.
NOTE: The data set EMWS1.PROF3_EMTRAINVARIABLE has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

17666  %let emexceptionstring =;
*------------------------------------------------------------* 
* 
* Prof3 : End run 
* datetime : 24OCT2020:18:49:16 
* 
*------------------------------------------------------------* 
NOTE: The PROCEDURE DISPLAY printed pages 1-7.
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           13.50 seconds
      cpu time            10.76 seconds
      

17669   %put &&emexceptionstring;
 
17670   %sysrput emerror_Prof3 = &&emexceptionstring;
17671   %put &&emloopmode;
 
17672   %sysrput emloopmode_Prof3 = &&emloopmode;
NOTE: Remote submit to C2IA2RBG complete.
NOTE: Remote signoff from C2IA2RBG commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           15.23 seconds
      cpu time            10.88 seconds
      
NOTE: Remote signoff from C2IA2RBG complete.
Traverser: WaitingNode "CNTRL" 
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21370      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21371      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "Prof3" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "Prof3" succeeded. 
21373      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21374      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21375      put '<Node Id="Prof3" Event="Complete" Pid="13296" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Prof3" Event="Complete" Pid="13296" Gridid=""/>';
21376      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "CNTRL2" 
traverser_readyNode_note 
NOTE: There are no active tasks/transactions.
21377      waitfor _all_ C2IA2RBG;
MPRINT(EM_DIAGRAM):    waitfor _all_ C2IA2RBG;
21378      signoff C2IA2RBG;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C2IA2RBG does not exist.  SIGNOFF is not necessary.
21379      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
21380      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21381      put '<Node Id="CNTRL" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Update" Pid="" Gridid=""/>';
21382      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21383      %let emloopmode =;
*------------------------------------------------------------* 
* 
* CNTRL : Beginning update before running 
* datetime : 24OCT2020:18:49:17 
* 
*------------------------------------------------------------* 
21384      %let _HPDMGRIDHOST=;
21385      %let _HPDMGRIDINSTALLLOC=;
21386      %let _HPDMGRIDDATASERVER=;
21387      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):    
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* CNTRL : End update 
* datetime : 24OCT2020:18:49:17 
* 
*------------------------------------------------------------* 
21388      %let _emdsep = \;
21389      %em_getactionstatus(emlib =EMWS1, nodeid=CNTRL);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

21390      %let em_Train = Y;
21391      %let em_Report = Y;
21392      %let em_Score = Y;
21393      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

21394      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21395      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21396      put '<Node Id="CNTRL" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Run" Pid="" Gridid=""/>';
21397      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 47.
      The maximum record length was 47.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21398      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
21399      %let SYSCC=0;
21400      signon C0SPMC1F macvar=C0SPMC1F;
MPRINT(EM_DIAGRAM):   signon macvar=C0SPMC1F;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C0SPMC1F commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.11 seconds
      cpu time            0.09 seconds
      
NOTE: Remote signon to C0SPMC1F complete.
21401      rsubmit C0SPMC1F wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C0SPMC1F in progress.
NOTE: Remote submit to C0SPMC1F commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(CNTRL);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMUTIL.CONTROLPOINT.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =CNTRL;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_CNTRL = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_CNTRL = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
21402      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21403      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21404      put '<Node Id="CNTRL" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Run" Pid=" " Gridid=""/>';
21405      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21406      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21407      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(CNTRL);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMUTIL.CONTROLPOINT.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =CNTRL;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* CNTRL : Running 
* datetime : 24OCT2020:18:49:21 
* 
*------------------------------------------------------------* 
*------------------------------------------------------------* 
* 
* CNTRL : End run 
* datetime : 24OCT2020:18:49:21 
* 
*------------------------------------------------------------* 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

6004    %put &&emexceptionstring;
 
6005    %sysrput emerror_CNTRL = &&emexceptionstring;
6006    %put &&emloopmode;
 
6007    %sysrput emloopmode_CNTRL = &&emloopmode;
NOTE: Remote submit to C0SPMC1F complete.
NOTE: Remote signoff from C0SPMC1F commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           2.02 seconds
      cpu time            0.29 seconds
      
NOTE: Remote signoff from C0SPMC1F complete.
Traverser: WaitingNode "CNTRL2" 
traverser_runingNode_note 
21408      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21409      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "CNTRL" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\CNTRL\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "CNTRL" succeeded. 
21411      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21412      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21413      put '<Node Id="CNTRL" Event="Complete" Pid="52624" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL" Event="Complete" Pid="52624" Gridid=""/>';
21414      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_readyNode_note 
NOTE: There are no active tasks/transactions.
21415      waitfor _all_ C0SPMC1F;
MPRINT(EM_DIAGRAM):    waitfor _all_ C0SPMC1F;
21416      signoff C0SPMC1F;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C0SPMC1F does not exist.  SIGNOFF is not necessary.
21417      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
21418      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21419      put '<Node Id="CNTRL2" Event="Update" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Update" Pid="" Gridid=""/>';
21420      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

21421      %let emloopmode =;
*------------------------------------------------------------* 
* 
* CNTRL2 : Beginning update before running 
* datetime : 24OCT2020:18:49:22 
* 
*------------------------------------------------------------* 
21422      %let _HPDMGRIDHOST=;
21423      %let _HPDMGRIDINSTALLLOC=;
21424      %let _HPDMGRIDDATASERVER=;
21425      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):    
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* CNTRL2 : End update 
* datetime : 24OCT2020:18:49:22 
* 
*------------------------------------------------------------* 
21426      %let _emdsep = \;
21427      %em_getactionstatus(emlib =EMWS1, nodeid=CNTRL2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

21428      %let em_Train = Y;
21429      %let em_Report = Y;
21430      %let em_Score = Y;
21431      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

21432      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21433      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21434      put '<Node Id="CNTRL2" Event="Run" Pid="" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Run" Pid="" Gridid=""/>';
21435      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 48.
      The maximum record length was 48.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21436      options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
MPRINT(EM_DIAGRAM):    options sascmd="!sascmdv -nosyntaxcheck -noasynchio -noobjectserver";
21437      %let SYSCC=0;
21438      signon C3DWOB9E macvar=C3DWOB9E;
MPRINT(EM_DIAGRAM):   signon macvar=C3DWOB9E;
NOTE: Default SASCMD value being used is: "C:\Program Files\SASHome\SASFoundation\9.4\SAS.EXE" -nologo -noterminal -noxcmd -objectserver -objectserverparms "protocol=bridge dnsname=127.0.0.1 jcbp=59867" -sspi -secpackage NTLM  -xcmd.
NOTE: Remote signon to C3DWOB9E commencing (SAS Release 9.04.01M3P062415).
NOTE: Unable to open SASUSER.PROFILE. WORK.PROFILE will be opened instead.
NOTE: All profile changes will be lost at the end of the session.
NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M3) 
      Licensed to LA TROBE UNI BUS SCHL SPONSORSHIP JCP SOFTWARE, Site 10008783.
NOTE: This session is executing on the X64_DS08R2  platform.



NOTE: Updated analytical products:
      
      SAS/STAT 14.1
      SAS/ETS 14.1
      SAS/OR 14.1
      SAS/IML 14.1
      SAS/QC 14.1

NOTE: Additional host information:

 X64_DS08R2 WIN 6.1.7601 Service Pack 1 Server

NOTE: SAS initialization used:
      real time           1.01 seconds
      cpu time            0.09 seconds
      
NOTE: Remote signon to C3DWOB9E complete.
21439      rsubmit C3DWOB9E wait=N persist=N  ;
MPRINT(EM_DIAGRAM):    rsubmit wait=N persist=N ;
The SAS System

NOTE: Background remote submit to C3DWOB9E in progress.
NOTE: Remote submit to C3DWOB9E commencing.
MPRINT(EM_DIAGRAM):   %global emexceptionstring emloopmode emloopnumber;
MPRINT(EM_DIAGRAM):   %let EMUSERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
MPRINT(EM_DIAGRAM):   %let EMFLOWMODE = Y;
MPRINT(EM_DIAGRAM):   %let EMONODE = %bquote(CNTRL2);
MPRINT(EM_DIAGRAM):   %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
MPRINT(EM_DIAGRAM):   %let EMWS = EMWS1;
MPRINT(EM_DIAGRAM):   %let EMNODECLASS = SASHELP.EMUTIL.CONTROLPOINT.CLASS;
MPRINT(EM_DIAGRAM):   %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
MPRINT(EM_DIAGRAM):   %let EM_DEBUG =;
MPRINT(EM_DIAGRAM):   %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
MPRINT(EM_DIAGRAM):   %let EMSERVERCODE = %nrstr();
MPRINT(EM_DIAGRAM):   %let EM_USERID = %bquote(20161277);
MPRINT(EM_DIAGRAM):   %let EM_METAHOST =;
MPRINT(EM_DIAGRAM):   %let EM_METAPORT =;
MPRINT(EM_DIAGRAM):   %let EM_JAVAPACKAGE = %bquote();
MPRINT(EM_DIAGRAM):   %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJNAME = %nrstr(CA Assignment 3);
MPRINT(EM_DIAGRAM):   %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
MPRINT(EM_DIAGRAM):   %let em_Train = Y;
MPRINT(EM_DIAGRAM):   %let em_Score = Y;
MPRINT(EM_DIAGRAM):   %let em_Report = Y;
MPRINT(EM_DIAGRAM):   %let emloopmode =;
MPRINT(EM_DIAGRAM):   %let emloopnumber =0;
MPRINT(EM_DIAGRAM):   %let emloopId =CNTRL2;
MPRINT(EM_DIAGRAM):   %let emexceptionstring=;
MPRINT(EM_DIAGRAM):   options VBUFSIZE= 64M;
MPRINT(EM_DIAGRAM):   %em5run();
MPRINT(EM_DIAGRAM):   %put &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %sysrput emerror_CNTRL2 = &&emexceptionstring;
MPRINT(EM_DIAGRAM):   %put &&emloopmode;
MPRINT(EM_DIAGRAM):   %sysrput emloopmode_CNTRL2 = &&emloopmode;
MPRINT(EM_DIAGRAM):   endrsubmit;
21440      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21441      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21442      put '<Node Id="CNTRL2" Event="Run" Pid=" " Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Run" Pid=" " Gridid=""/>';
21443      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21444      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21445      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1     %global emexceptionstring emloopmode emloopnumber;
2     %let EMUSERID = %bquote(20161277);
3     %let EMLDSPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\DataSources);
4     %let EMFLOWMODE = Y;
5     %let EMONODE = %bquote(CNTRL2);
6     %let EMPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1);
7     %let EMWS = EMWS1;
8     %let EMNODECLASS = SASHELP.EMUTIL.CONTROLPOINT.CLASS;
9     %let EMSTATUSDIR = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\System);
10    %let EM_DEBUG =;
11    %let EMPROJECTCODE = %nrstr(C:\Users\20161277\Documents\CA Assignment 3\System\STARTUP.sas);
12    %let EMSERVERCODE = %nrstr();
13    %let EM_USERID = %bquote(20161277);
14    %let EM_METAHOST =;
15    %let EM_METAPORT =;
16    %let EM_JAVAPACKAGE = %bquote();
17    %let EMPROJECTPATH = %nrstr(C:\Users\20161277\Documents\CA Assignment 3);
18    %let EMPROJNAME = %nrstr(CA Assignment 3);
19    %let EMPROJPATH = %nrstr(C:\Users\20161277\Documents);
20    %let em_Train = Y;
21    %let em_Score = Y;
22    %let em_Report = Y;
23    %let emloopmode =;
24    %let emloopnumber =0;
25    %let emloopId =CNTRL2;
26    %let emexceptionstring=;
27    options VBUFSIZE= 64M;
28    %em5run();

*------------------------------------------------------------* 
* 
* CNTRL2 : Running 
* datetime : 24OCT2020:18:49:26 
* 
*------------------------------------------------------------* 
*------------------------------------------------------------* 
* 
* CNTRL2 : End run 
* datetime : 24OCT2020:18:49:26 
* 
*------------------------------------------------------------* 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

6004    %put &&emexceptionstring;
 
6005    %sysrput emerror_CNTRL2 = &&emexceptionstring;
6006    %put &&emloopmode;
 
6007    %sysrput emloopmode_CNTRL2 = &&emloopmode;
NOTE: Remote submit to C3DWOB9E complete.
NOTE: Remote signoff from C3DWOB9E commencing.
NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           2.38 seconds
      cpu time            0.29 seconds
      
NOTE: Remote signoff from C3DWOB9E complete.
traverser_runingNode_note 
21446      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21447      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Node "CNTRL2" ran. 
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\CNTRL2\TRAINPROPERTIES.xml' encoding="UTF-8" NOBOM;
Node "CNTRL2" succeeded. 
21449      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
21450      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
21451      put '<Node Id="CNTRL2" Event="Complete" Pid="3172" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="CNTRL2" Event="Complete" Pid="3172" Gridid=""/>';
21452      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=ba-teaching,
      Local Host IP addr=fe80::7cfe:d56d:ef9:d7d2%12,
      Peer Hostname Name=ba-teaching,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=59866,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Traverser: Run Completed 
NOTE: There are no active tasks/transactions.
21453      waitfor _all_ C3DWOB9E;
MPRINT(EM_DIAGRAM):    waitfor _all_ C3DWOB9E;
21454      signoff C3DWOB9E;
MPRINT(EM_DIAGRAM):   signoff;
NOTE: A link to C3DWOB9E does not exist.  SIGNOFF is not necessary.
21455      proc printto;
MPRINT(EM_DIAGRAM):   proc printto;
21456      run;
MPRINT(EM_DIAGRAM):   run;

