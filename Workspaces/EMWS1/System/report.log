NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
25249      %let eminfo= %str();
25250      data _null_;
25251      set EMWS1.Prof2_ExportSet;
25252      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
25253      call symput('eminfo', strip(eminfo));
25254      run;

NOTE: There were 0 observations read from the data set EMWS1.PROF2_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "CLUS2" 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
Retrieving Score Code Filter2 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
Retrieving Score Code Clus2 
traverser_readyNode_note 
Retrieving Score Code Prof2 
25255      *------------------------------------------------------------*;
25256      * Report: Determine If validvarname ANY variables are score inputs;
25257      *------------------------------------------------------------*;
25258      filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_20IO8TQscore.sas";
25259      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
25260      %INCLUDE _pref;
25614      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

25615      quit;
25616      filename _pref;
NOTE: Fileref _PREF has been deassigned.
25617      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
25618      by NAME;
25619      run;

NOTE: There were 344 observations read from the data set WORK._TEMP.
NOTE: 306 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 38 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: Run Completed 
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_20IO8TQscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:51:39;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 37.4083887981916) * 0.0987618921697;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 72745.2967788519) * 0.00001591139499;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 651.853196031646) * 0.01045436368127;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 99738.3917719451) * 0.00001741990723;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.54426723596634) * 1.9625716996136;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 5.03327891498179) * 0.34714294064848;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.54590479700566;
MPRINT(SCOREXML):   CountryGermany = -0.30021504918388;
MPRINT(SCOREXML):   CountrySpain = -0.34148981067575;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.61053039814094;
MPRINT(SCOREXML):   CountryGermany = -0.30021504918388;
MPRINT(SCOREXML):   CountrySpain = 0.9759924385544;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.61053039814094;
MPRINT(SCOREXML):   CountryGermany = 1.11017576889947;
MPRINT(SCOREXML):   CountrySpain = -0.34148981067575;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.61096693963673;
MPRINT(SCOREXML):   GenderMale = 0.61096693963673;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.81827211451347;
MPRINT(SCOREXML):   GenderMale = -0.81827211451347;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.45501869474632;
MPRINT(SCOREXML):   HasCreditCardYes = 0.45501869474632;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.09871795459544;
MPRINT(SCOREXML):   HasCreditCardYes = -1.09871795459544;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.63368553370186;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.63368553370186;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.78893580964968;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.78893580964968;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS2vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS2vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS2vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Age - -0.16566993972626 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Age - 2.41294163220694 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Age - -0.21130465722278 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Age - -0.23291669457205 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Age - -0.24091362705082 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Balance - 0.71946212785028 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Balance - -0.00295852920558 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Balance - -0.96596752489114 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Balance - -0.98439647571239 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Balance - 0.73455776665648 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_CreditScore - 0.13365782926011 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_CreditScore - 0.01309695623595 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_CreditScore - -0.20750682941408 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_CreditScore - 0.12616463925761 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_CreditScore - -0.09154792107335 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_EstimatedSalary - 0.05544661121169 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_EstimatedSalary - -0.08001454681391 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_EstimatedSalary - -0.038002677383 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_EstimatedSalary - 0.02381853982681 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_EstimatedSalary - -0.01185261889904 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_NumOfProducts - -0.48911989655704 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_NumOfProducts - -0.11324052795531 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_NumOfProducts - 0.70136838597288 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_NumOfProducts - 0.68556703487007 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_NumOfProducts - -0.49923364531991 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Tenure - -0.07956087417821 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Tenure - 0.01798051573635 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Tenure - 0.01272849587742 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Tenure - 0.0699052846824 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Tenure - -0.02623568404652 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountryFrance - -0.1110159039352 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountryFrance - -0.0150525737744 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountryFrance - 0.1566348078197 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountryFrance - 0.13150237145971 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountryFrance - -0.09673594417622 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountryGermany - 0.172504453966 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountryGermany - -0.02024194648972 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountryGermany - -0.25859695946995 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountryGermany - -0.24954616576933 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountryGermany - 0.19933878253065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountrySpain - -0.03466467631531 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountrySpain - 0.03605734134243 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountrySpain - 0.06311402761241 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountrySpain - 0.08329186949895 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountrySpain - -0.07599992138797 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( GenderFemale - 0.00638336778141 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( GenderFemale - -0.00514023608649 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( GenderFemale - 0.01227500856647 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( GenderFemale - 0.01818422199009 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( GenderFemale - -0.01921872051814 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( GenderMale - -0.00638336778141 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( GenderMale - 0.00514023608649 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( GenderMale - -0.01227500856647 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( GenderMale - -0.01818422199009 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( GenderMale - 0.01921872051814 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( HasCreditCardNo - 1.09871795459546 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( HasCreditCardNo - -0.08861512669259 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( HasCreditCardNo - 1.07834108050573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( HasCreditCardNo - -0.4550186947463 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( HasCreditCardNo - -0.4550186947463 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( HasCreditCardYes - -1.09871795459546 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( HasCreditCardYes - 0.08861512669259 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( HasCreditCardYes - -1.07834108050573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( HasCreditCardYes - 0.4550186947463 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( HasCreditCardYes - 0.4550186947463 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( IsActiveMemberNo - -0.00800077293591 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( IsActiveMemberNo - -0.58484927863158 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( IsActiveMemberNo - 0.12660062684339 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( IsActiveMemberNo - 0.05724652391498 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( IsActiveMemberNo - 0.05512149911759 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( IsActiveMemberYes - 0.00800077293591 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( IsActiveMemberYes - 0.58484927863158 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( IsActiveMemberYes - -0.12660062684339 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( IsActiveMemberYes - -0.05724652391498 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( IsActiveMemberYes - -0.05512149911759 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS2vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS2vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS2vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS2vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus2: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:51:39;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 37.4083887981916) * 0.0987618921697;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 72745.2967788519) * 0.00001591139499;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 651.853196031646) * 0.01045436368127;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 99738.3917719451) * 0.00001741990723;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.54426723596634) * 1.9625716996136;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 5.03327891498179) * 0.34714294064848;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.54590479700566;
MPRINT(SCOREXML):   CountryGermany = -0.30021504918388;
MPRINT(SCOREXML):   CountrySpain = -0.34148981067575;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.61053039814094;
MPRINT(SCOREXML):   CountryGermany = -0.30021504918388;
MPRINT(SCOREXML):   CountrySpain = 0.9759924385544;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.61053039814094;
MPRINT(SCOREXML):   CountryGermany = 1.11017576889947;
MPRINT(SCOREXML):   CountrySpain = -0.34148981067575;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.61096693963673;
MPRINT(SCOREXML):   GenderMale = 0.61096693963673;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.81827211451347;
MPRINT(SCOREXML):   GenderMale = -0.81827211451347;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.45501869474632;
MPRINT(SCOREXML):   HasCreditCardYes = 0.45501869474632;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.09871795459544;
MPRINT(SCOREXML):   HasCreditCardYes = -1.09871795459544;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.63368553370186;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.63368553370186;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.78893580964968;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.78893580964968;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS2vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS2vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS2vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Age - -0.16566993972626 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Age - 2.41294163220694 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Age - -0.21130465722278 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Age - -0.23291669457205 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Age - -0.24091362705082 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Balance - 0.71946212785028 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Balance - -0.00295852920558 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Balance - -0.96596752489114 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Balance - -0.98439647571239 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Balance - 0.73455776665648 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_CreditScore - 0.13365782926011 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_CreditScore - 0.01309695623595 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_CreditScore - -0.20750682941408 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_CreditScore - 0.12616463925761 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_CreditScore - -0.09154792107335 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_EstimatedSalary - 0.05544661121169 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_EstimatedSalary - -0.08001454681391 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_EstimatedSalary - -0.038002677383 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_EstimatedSalary - 0.02381853982681 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_EstimatedSalary - -0.01185261889904 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_NumOfProducts - -0.48911989655704 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_NumOfProducts - -0.11324052795531 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_NumOfProducts - 0.70136838597288 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_NumOfProducts - 0.68556703487007 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_NumOfProducts - -0.49923364531991 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Tenure - -0.07956087417821 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Tenure - 0.01798051573635 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Tenure - 0.01272849587742 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Tenure - 0.0699052846824 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Tenure - -0.02623568404652 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountryFrance - -0.1110159039352 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountryFrance - -0.0150525737744 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountryFrance - 0.1566348078197 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountryFrance - 0.13150237145971 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountryFrance - -0.09673594417622 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountryGermany - 0.172504453966 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountryGermany - -0.02024194648972 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountryGermany - -0.25859695946995 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountryGermany - -0.24954616576933 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountryGermany - 0.19933878253065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( CountrySpain - -0.03466467631531 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( CountrySpain - 0.03605734134243 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( CountrySpain - 0.06311402761241 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( CountrySpain - 0.08329186949895 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( CountrySpain - -0.07599992138797 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( GenderFemale - 0.00638336778141 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( GenderFemale - -0.00514023608649 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( GenderFemale - 0.01227500856647 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( GenderFemale - 0.01818422199009 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( GenderFemale - -0.01921872051814 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( GenderMale - -0.00638336778141 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( GenderMale - 0.00514023608649 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( GenderMale - -0.01227500856647 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( GenderMale - -0.01818422199009 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( GenderMale - 0.01921872051814 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( HasCreditCardNo - 1.09871795459546 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( HasCreditCardNo - -0.08861512669259 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( HasCreditCardNo - 1.07834108050573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( HasCreditCardNo - -0.4550186947463 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( HasCreditCardNo - -0.4550186947463 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( HasCreditCardYes - -1.09871795459546 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( HasCreditCardYes - 0.08861512669259 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( HasCreditCardYes - -1.07834108050573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( HasCreditCardYes - 0.4550186947463 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( HasCreditCardYes - 0.4550186947463 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( IsActiveMemberNo - -0.00800077293591 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( IsActiveMemberNo - -0.58484927863158 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( IsActiveMemberNo - 0.12660062684339 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( IsActiveMemberNo - 0.05724652391498 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( IsActiveMemberNo - 0.05512149911759 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( IsActiveMemberYes - 0.00800077293591 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( IsActiveMemberYes - 0.58484927863158 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( IsActiveMemberYes - -0.12660062684339 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( IsActiveMemberYes - -0.05724652391498 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( IsActiveMemberYes - -0.05512149911759 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS2vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS2vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS2vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS2vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus2: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "10" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "10" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "10" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M3CDKM1_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CDKM1_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CDKM1_(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CDKM1_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CDKM1_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M34UKTZC NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2D323TA(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   set WORK.M34UKTZC;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 24OCT2020:18:51:46 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN03685";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:51:46 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2NPWK22 as select * from WORK.M2RAL25G order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2NPWK22 as select * from WORK.M1_MZKOV order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2NPWK22 compare=work._comp2NPWK22 out=WORK._DIFF1_QC0B3 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11GAZ7R1 as select * from WORK._DIFF1_QC0B3 where NAME in (select NAME from WORK._DIFF1_QC0B3 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM320KHDO as select * from WORK._DIFF1_QC0B3 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1_QC0B3 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM320KHDO as select * from WORK._DIFF1_QC0B3 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1_QC0B3 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM320KHDO;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM320KHDO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM320KHDO;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM320KHDO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS2" 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter2 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:51:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_EMTRAINVARIABLE / view=WORK.Filter2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_CLASS / view=WORK.Filter2_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_INTERVAL / view=WORK.Filter2_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:51:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2NLAB18 as select * from WORK.M1QMMBSN order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2NLAB18 as select * from WORK.M01Y5JGE order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2NLAB18 compare=work._comp2NLAB18 out=WORK._DIFF0C45OLL noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13FW68QR as select * from WORK._DIFF0C45OLL where NAME in (select NAME from WORK._DIFF0C45OLL where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM33G_SGV as select * from WORK._DIFF0C45OLL where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0C45OLL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM33G_SGV as select * from WORK._DIFF0C45OLL where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0C45OLL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM33G_SGV;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM33G_SGV;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM33G_SGV;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM33G_SGV;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus2 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:51:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_EMTRAINVARIABLE / view=WORK.Clus2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTMEAN / view=WORK.Clus2_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTSTAT / view=WORK.Clus2_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_INPUTMEAN / view=WORK.Clus2_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_TREE_PLOT / view=WORK.Clus2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_1"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTIMPORT / view=WORK.Clus2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_PROFILE / view=WORK.Clus2_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_DISTANCE / view=WORK.Clus2_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:51:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1VJ424Y as select * from WORK.M0DF4_T1 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1VJ424Y as select * from WORK.M3TGI_56 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1VJ424Y compare=work._comp1VJ424Y out=WORK._DIFF2OPY9HQ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof2 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:51:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN03849";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_EMTRAINVARIABLE / view=WORK.Prof2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_SIZE / view=WORK.Prof2_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_STATS / view=WORK.Prof2_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_CLASSDIST / view=WORK.Prof2_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_INTDIST / view=WORK.Prof2_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_WORTH / view=WORK.Prof2_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:51:49 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3MLS6K4 as select * from WORK.M3CQ46OF order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3MLS6K4 as select * from WORK.M2Y9G1AB order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3MLS6K4 compare=work._comp3MLS6K4 out=WORK._DIFF2_O5LZA noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN03922;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack0HZI = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0HZI, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment3_Prof2_0Z596" nodeid="Prof2" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0NF2 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0NF2, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack0NF2, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UELBQS "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0NF2, "fileref:F1UELBQS", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F02IEZCR "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0NF2, "fileref:F02IEZCR", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05P59UY "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0NF2, "fileref:F05P59UY", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ZGHNIZ "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0NF2, "fileref:F1ZGHNIZ", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3K49 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3K49, "File Import", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0TH0XGF "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F0TH0XGF", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2A4IVI3 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F2A4IVI3", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2J7TS9Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F2J7TS9Q", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3K49, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ANRHU8 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F1ANRHU8", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3BTLMY6 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F3BTLMY6", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F24JDB9F "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F24JDB9F", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04_5N3T "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3K49, "fileref:F04_5N3T", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack3K49, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1UZS = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1UZS, "churned - No", ' NAME="Filter2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package churned - No began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04UTKJC "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F04UTKJC", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1REA3V2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F1REA3V2", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2QL1Y_Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F2QL1Y_Q", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1UZS, "work", "Filter2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ONM4F2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F0ONM4F2", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F289LJXX "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F289LJXX", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2TFL7IY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F2TFL7IY", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QYS4QH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F1QYS4QH", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F06X6FN4 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F06X6FN4", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0LC0B3Y "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1UZS, "fileref:F0LC0B3Y", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1UZS, "work", "Filter2_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1UZS, "work", "Filter2_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack1UZS, rc, "NESTED_NAME", "Filter2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack30HC = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack30HC, "Non Churned Cluster", ' NAME="Clus2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Non Churned Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0RTRYWO "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F0RTRYWO", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F14DIFCR "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F14DIFCR", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0SOIV92 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F0SOIV92", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F00FD4TI "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F00FD4TI", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3REM0V2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F3REM0V2", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3548LOG "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F3548LOG", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WOX2MH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F0WOX2MH", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F29LA59F "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F29LA59F", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BTQBEB "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F2BTQBEB", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2H9YSF2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TREEPLOT.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F2H9YSF2", "BINARY", "text/xml", 'TreePlot.XML', 'NAME=TreePlot TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TREEPLOT.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0JR3ZIX "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack30HC, "fileref:F0JR3ZIX", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2K7G = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2K7G, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack30HC, Pack2K7G, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3BIKGAH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2K7G, "fileref:F3BIKGAH", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack30HC, "work", "Clus2_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack30HC, rc, "NESTED_NAME", "Clus2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack37YF = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack37YF, "Segment Profile", ' NAME="Prof2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0UIDREY "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F0UIDREY", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HW_SC6 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F1HW_SC6", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2DU5T75 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F2DU5T75", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3OHI5CJ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F3OHI5CJ", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3D0T6MV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F3D0T6MV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TSWJ4J "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F1TSWJ4J", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Q29ZUT "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F2Q29ZUT", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0GYU6NL "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack37YF, "fileref:F0GYU6NL", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack37YF, "work", "Prof2_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack37YF, rc, "NESTED_NAME", "Prof2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3X6J = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3X6J, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack3X6J, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0LH32K5 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3X6J, "fileref:F0LH32K5", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FJLQS_ "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3X6J, "fileref:F1FJLQS_", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2U29W5G "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3X6J, "fileref:F2U29W5G", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NCL22I "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HZI, "fileref:F0NCL22I", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0MHN = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0MHN, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HZI, Pack0MHN, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3LN4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3LN4, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MHN, Pack3LN4, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2KC5V73 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_20IO8TQscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3LN4, "fileref:F2KC5V73", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_20IO8TQscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0S4T = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0S4T, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MHN, Pack0S4T, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack0HZI, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack0HZI successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack0HZI, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack0HZI ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof2_0Z596\miningResult.xml inserted successfully.
Package File Import began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package churned - No began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Non Churned Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\TREEPLOT.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_266BTAJ\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_20IO8TQscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack0HZI successfully.
Package Pack0HZI ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F1UELBQS;
MPRINT(EM_DIAGRAM):   filename F02IEZCR;
MPRINT(EM_DIAGRAM):   filename F05P59UY;
MPRINT(EM_DIAGRAM):   filename F1ZGHNIZ;
MPRINT(EM_DIAGRAM):   filename F0TH0XGF;
MPRINT(EM_DIAGRAM):   filename F2A4IVI3;
MPRINT(EM_DIAGRAM):   filename F2J7TS9Q;
MPRINT(EM_DIAGRAM):   filename F1ANRHU8;
MPRINT(EM_DIAGRAM):   filename F3BTLMY6;
MPRINT(EM_DIAGRAM):   filename F24JDB9F;
MPRINT(EM_DIAGRAM):   filename F04_5N3T;
MPRINT(EM_DIAGRAM):   filename F04UTKJC;
MPRINT(EM_DIAGRAM):   filename F1REA3V2;
MPRINT(EM_DIAGRAM):   filename F2QL1Y_Q;
MPRINT(EM_DIAGRAM):   filename F0ONM4F2;
MPRINT(EM_DIAGRAM):   filename F289LJXX;
MPRINT(EM_DIAGRAM):   filename F2TFL7IY;
MPRINT(EM_DIAGRAM):   filename F1QYS4QH;
MPRINT(EM_DIAGRAM):   filename F06X6FN4;
MPRINT(EM_DIAGRAM):   filename F0LC0B3Y;
MPRINT(EM_DIAGRAM):   filename F0RTRYWO;
MPRINT(EM_DIAGRAM):   filename F14DIFCR;
MPRINT(EM_DIAGRAM):   filename F0SOIV92;
MPRINT(EM_DIAGRAM):   filename F00FD4TI;
MPRINT(EM_DIAGRAM):   filename F3REM0V2;
MPRINT(EM_DIAGRAM):   filename F3548LOG;
MPRINT(EM_DIAGRAM):   filename F0WOX2MH;
MPRINT(EM_DIAGRAM):   filename F29LA59F;
MPRINT(EM_DIAGRAM):   filename F2BTQBEB;
MPRINT(EM_DIAGRAM):   filename F2H9YSF2;
MPRINT(EM_DIAGRAM):   filename F0JR3ZIX;
MPRINT(EM_DIAGRAM):   filename F3BIKGAH;
MPRINT(EM_DIAGRAM):   filename F0UIDREY;
MPRINT(EM_DIAGRAM):   filename F1HW_SC6;
MPRINT(EM_DIAGRAM):   filename F2DU5T75;
MPRINT(EM_DIAGRAM):   filename F3OHI5CJ;
MPRINT(EM_DIAGRAM):   filename F3D0T6MV;
MPRINT(EM_DIAGRAM):   filename F1TSWJ4J;
MPRINT(EM_DIAGRAM):   filename F2Q29ZUT;
MPRINT(EM_DIAGRAM):   filename F0GYU6NL;
MPRINT(EM_DIAGRAM):   filename F0LH32K5;
MPRINT(EM_DIAGRAM):   filename F1FJLQS_;
MPRINT(EM_DIAGRAM):   filename F2U29W5G;
MPRINT(EM_DIAGRAM):   filename F0NCL22I;
MPRINT(EM_DIAGRAM):   filename F2KC5V73;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
28139      %let eminfo= %str();
28140      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
28141      set EMWS1.Prof_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_ExportSet;
28142      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
28143      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
28144      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
Retrieving Score Code Filter 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
Retrieving Score Code Clus 
traverser_readyNode_note 
Retrieving Score Code Prof 
28145      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28146      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
28147      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28148      filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas";
28149      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
28150      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents;
MPRINT(EM_DIAGRAM):   * Project Name: CA Assignment 3;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Task 1 and 2;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 24OCT2020:18:51:53;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 44.8379970544919) * 0.10244262604028;
MPRINT(EM_DIAGRAM):   *** Standardize Balance ;
MPRINT(EM_DIAGRAM):   drop T_Balance ;
MPRINT(EM_DIAGRAM):   if missing( Balance ) then T_Balance = .;
MPRINT(EM_DIAGRAM):   else T_Balance = (Balance - 91108.5393372606) * 0.00001713479062;
MPRINT(EM_DIAGRAM):   *** Standardize CreditScore ;
MPRINT(EM_DIAGRAM):   drop T_CreditScore ;
MPRINT(EM_DIAGRAM):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(EM_DIAGRAM):   else T_CreditScore = (CreditScore - 645.351497299951) * 0.00996795276773;
MPRINT(EM_DIAGRAM):   *** Standardize EstimatedSalary ;
MPRINT(EM_DIAGRAM):   drop T_EstimatedSalary ;
MPRINT(EM_DIAGRAM):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(EM_DIAGRAM):   else T_EstimatedSalary = (EstimatedSalary - 101465.677530682) * 0.00001726745373;
MPRINT(EM_DIAGRAM):   *** Standardize NumOfProducts ;
MPRINT(EM_DIAGRAM):   drop T_NumOfProducts ;
MPRINT(EM_DIAGRAM):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(EM_DIAGRAM):   else T_NumOfProducts = (NumOfProducts - 1.47520864015709) * 1.24762865485012;
MPRINT(EM_DIAGRAM):   *** Standardize Tenure ;
MPRINT(EM_DIAGRAM):   drop T_Tenure ;
MPRINT(EM_DIAGRAM):   if missing( Tenure ) then T_Tenure = .;
MPRINT(EM_DIAGRAM):   else T_Tenure = (Tenure - 4.9327442317133) * 0.34058712750009;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Country ;
MPRINT(EM_DIAGRAM):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(EM_DIAGRAM):   if missing( Country ) then do;
MPRINT(EM_DIAGRAM):   CountryFrance = .;
MPRINT(EM_DIAGRAM):   CountryGermany = .;
MPRINT(EM_DIAGRAM):   CountrySpain = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(EM_DIAGRAM):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'GERMANY' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = -0.4689785429911;
MPRINT(EM_DIAGRAM):   CountryGermany = 0.70751193611726;
MPRINT(EM_DIAGRAM):   CountrySpain = -0.29108160327617;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'FRANCE' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = 0.71041564475319;
MPRINT(EM_DIAGRAM):   CountryGermany = -0.47090328372808;
MPRINT(EM_DIAGRAM):   CountrySpain = -0.29108160327617;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'SPAIN' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = -0.4689785429911;
MPRINT(EM_DIAGRAM):   CountryGermany = -0.47090328372808;
MPRINT(EM_DIAGRAM):   CountrySpain = 1.14459206711986;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CountryFrance = .;
MPRINT(EM_DIAGRAM):   CountryGermany = .;
MPRINT(EM_DIAGRAM):   CountrySpain = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Gender ;
MPRINT(EM_DIAGRAM):   drop GenderFemale GenderMale ;
MPRINT(EM_DIAGRAM):   if missing( Gender ) then do;
MPRINT(EM_DIAGRAM):   GenderFemale = .;
MPRINT(EM_DIAGRAM):   GenderMale = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
MPRINT(EM_DIAGRAM):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm6 = 'FEMALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = 0.62770368870745;
MPRINT(EM_DIAGRAM):   GenderMale = -0.62770368870745;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'MALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = -0.79616314191291;
MPRINT(EM_DIAGRAM):   GenderMale = 0.79616314191291;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GenderFemale = .;
MPRINT(EM_DIAGRAM):   GenderMale = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HasCreditCard ;
MPRINT(EM_DIAGRAM):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(EM_DIAGRAM):   if missing( HasCreditCard ) then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = .;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = -0.46382442740522;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = 0.46382442740522;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = 1.07746490150903;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = -1.07746490150903;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = .;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IsActiveMember ;
MPRINT(EM_DIAGRAM):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(EM_DIAGRAM):   if missing( IsActiveMember ) then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = .;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = 0.5311492247447;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = -0.5311492247447;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = -0.9408929124049;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = 0.9408929124049;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = .;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Age - -0.01107527688125 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Age - 0.02324304778504 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Age - 0.15033311687726 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Age - -0.1210803650093 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Age - -0.01791871272042 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Balance ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Balance - -1.41972160215268 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Balance - 0.02821172079979 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Balance - 0.5320326471595 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Balance - 0.58508801882431 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Balance - -0.06733907340743 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_CreditScore ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_CreditScore - 0.04344305756875 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_CreditScore - 0.04249344760845 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_CreditScore - -0.57859992861114 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_CreditScore - 0.35669014739369 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_CreditScore - 0.01721820049563 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_EstimatedSalary ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_EstimatedSalary - -0.08759463112551 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_EstimatedSalary - 0.02123693930344 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_EstimatedSalary - 0.52079719833856 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_EstimatedSalary - -0.40076668977918 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_EstimatedSalary - 0.07697166104635 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_NumOfProducts ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_NumOfProducts - -0.35267954903557 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_NumOfProducts - -0.32621519637171 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_NumOfProducts - -0.30622250232313 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_NumOfProducts - -0.38453241150744 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_NumOfProducts - 2.16620884351669 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Tenure ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Tenure - -0.09160129221369 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Tenure - -0.0102422982136 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Tenure - 0.59559080952925 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Tenure - -0.40570518468486 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Tenure - 0.04732129677804 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( CountryFrance ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( CountryFrance - 0.31728424883842 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( CountryFrance - -0.00532357605346 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( CountryFrance - -0.12716978361873 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( CountryFrance - -0.11727053471745 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( CountryFrance - 0.00024280052006 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( CountryGermany ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( CountryGermany - -0.47090328372809 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( CountryGermany - -0.00763317821636 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( CountryGermany - 0.17214836365488 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( CountryGermany - 0.20615834357868 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( CountryGermany - -0.00629513253458 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( CountrySpain ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( CountrySpain - 0.18747628685583 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( CountrySpain - 0.01577994459473 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( CountrySpain - -0.0549264042293 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( CountrySpain - -0.10841139471683 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( CountrySpain - 0.00737385508572 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( GenderFemale ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( GenderFemale - 0.02624269991092 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( GenderFemale - -0.02173175502969 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( GenderFemale - 0.15927752510911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( GenderFemale - -0.14509083367695 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( GenderFemale - 0.05101210497949 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( GenderMale ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( GenderMale - -0.02624269991092 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( GenderMale - 0.02173175502969 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( GenderMale - -0.15927752510911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( GenderMale - 0.14509083367695 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( GenderMale - -0.05101210497949 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HasCreditCardNo ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( HasCreditCardNo - 1.07746490150903 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( HasCreditCardNo - -0.43967890267027 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( HasCreditCardNo - -0.00530466288951 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( HasCreditCardYes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( HasCreditCardYes - -1.07746490150903 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( HasCreditCardYes - 0.43967890267027 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( HasCreditCardYes - 0.00530466288951 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( IsActiveMemberNo ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IsActiveMemberNo - 0.07853856763261 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IsActiveMemberNo - -0.07564677072154 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IsActiveMemberNo - 0.22367306032703 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IsActiveMemberNo - -0.10390672706735 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IsActiveMemberNo - -0.07560649486893 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( IsActiveMemberYes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( IsActiveMemberYes - -0.07853856763261 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( IsActiveMemberYes - 0.07564677072154 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( IsActiveMemberYes - -0.22367306032703 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( IsActiveMemberYes - 0.10390672706735 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( IsActiveMemberYes - 0.07560649486893 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 10 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28504      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
28505      quit;
28506      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
28507      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
28508      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
28509      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 344 observations read from the data set WORK._TEMP.
NOTE: 306 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 38 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Balance'n 'Churned'n 'Country'n 'CreditScore'n 'CustomerID'n 'EstimatedSalary'n 'Gender'n 'HasCreditCard'n 'IsActiveMember'n 'NumOfProducts'n 'Tenure'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:51:53;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 44.8379970544919) * 0.10244262604028;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 91108.5393372606) * 0.00001713479062;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 645.351497299951) * 0.00996795276773;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 101465.677530682) * 0.00001726745373;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.47520864015709) * 1.24762865485012;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 4.9327442317133) * 0.34058712750009;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.4689785429911;
MPRINT(SCOREXML):   CountryGermany = 0.70751193611726;
MPRINT(SCOREXML):   CountrySpain = -0.29108160327617;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.71041564475319;
MPRINT(SCOREXML):   CountryGermany = -0.47090328372808;
MPRINT(SCOREXML):   CountrySpain = -0.29108160327617;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.4689785429911;
MPRINT(SCOREXML):   CountryGermany = -0.47090328372808;
MPRINT(SCOREXML):   CountrySpain = 1.14459206711986;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.62770368870745;
MPRINT(SCOREXML):   GenderMale = -0.62770368870745;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.79616314191291;
MPRINT(SCOREXML):   GenderMale = 0.79616314191291;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.46382442740522;
MPRINT(SCOREXML):   HasCreditCardYes = 0.46382442740522;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.07746490150903;
MPRINT(SCOREXML):   HasCreditCardYes = -1.07746490150903;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.5311492247447;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.5311492247447;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.9408929124049;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.9408929124049;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUSvlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUSvads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUSvads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Age - -0.01107527688125 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Age - 0.02324304778504 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Age - 0.15033311687726 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Age - -0.1210803650093 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Age - -0.01791871272042 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Balance - -1.41972160215268 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Balance - 0.02821172079979 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Balance - 0.5320326471595 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Balance - 0.58508801882431 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Balance - -0.06733907340743 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_CreditScore - 0.04344305756875 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_CreditScore - 0.04249344760845 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_CreditScore - -0.57859992861114 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_CreditScore - 0.35669014739369 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_CreditScore - 0.01721820049563 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_EstimatedSalary - -0.08759463112551 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_EstimatedSalary - 0.02123693930344 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_EstimatedSalary - 0.52079719833856 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_EstimatedSalary - -0.40076668977918 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_EstimatedSalary - 0.07697166104635 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_NumOfProducts - -0.35267954903557 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_NumOfProducts - -0.32621519637171 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_NumOfProducts - -0.30622250232313 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_NumOfProducts - -0.38453241150744 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_NumOfProducts - 2.16620884351669 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Tenure - -0.09160129221369 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Tenure - -0.0102422982136 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Tenure - 0.59559080952925 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Tenure - -0.40570518468486 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Tenure - 0.04732129677804 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountryFrance - 0.31728424883842 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountryFrance - -0.00532357605346 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountryFrance - -0.12716978361873 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountryFrance - -0.11727053471745 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountryFrance - 0.00024280052006 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountryGermany - -0.47090328372809 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountryGermany - -0.00763317821636 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountryGermany - 0.17214836365488 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountryGermany - 0.20615834357868 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountryGermany - -0.00629513253458 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountrySpain - 0.18747628685583 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountrySpain - 0.01577994459473 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountrySpain - -0.0549264042293 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountrySpain - -0.10841139471683 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountrySpain - 0.00737385508572 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( GenderFemale - 0.02624269991092 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( GenderFemale - -0.02173175502969 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( GenderFemale - 0.15927752510911 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( GenderFemale - -0.14509083367695 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( GenderFemale - 0.05101210497949 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( GenderMale - -0.02624269991092 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( GenderMale - 0.02173175502969 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( GenderMale - -0.15927752510911 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( GenderMale - 0.14509083367695 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( GenderMale - -0.05101210497949 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( HasCreditCardNo - 1.07746490150903 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( HasCreditCardNo - -0.43967890267027 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( HasCreditCardNo - -0.00530466288951 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( HasCreditCardYes - -1.07746490150903 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( HasCreditCardYes - 0.43967890267027 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( HasCreditCardYes - 0.00530466288951 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( IsActiveMemberNo - 0.07853856763261 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( IsActiveMemberNo - -0.07564677072154 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( IsActiveMemberNo - 0.22367306032703 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( IsActiveMemberNo - -0.10390672706735 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( IsActiveMemberNo - -0.07560649486893 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( IsActiveMemberYes - -0.07853856763261 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( IsActiveMemberYes - 0.07564677072154 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( IsActiveMemberYes - -0.22367306032703 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( IsActiveMemberYes - 0.10390672706735 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( IsActiveMemberYes - 0.07560649486893 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUSvads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUSvads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUSvlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:51:53;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 44.8379970544919) * 0.10244262604028;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 91108.5393372606) * 0.00001713479062;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 645.351497299951) * 0.00996795276773;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 101465.677530682) * 0.00001726745373;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.47520864015709) * 1.24762865485012;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 4.9327442317133) * 0.34058712750009;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.4689785429911;
MPRINT(SCOREXML):   CountryGermany = 0.70751193611726;
MPRINT(SCOREXML):   CountrySpain = -0.29108160327617;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.71041564475319;
MPRINT(SCOREXML):   CountryGermany = -0.47090328372808;
MPRINT(SCOREXML):   CountrySpain = -0.29108160327617;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.4689785429911;
MPRINT(SCOREXML):   CountryGermany = -0.47090328372808;
MPRINT(SCOREXML):   CountrySpain = 1.14459206711986;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.62770368870745;
MPRINT(SCOREXML):   GenderMale = -0.62770368870745;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.79616314191291;
MPRINT(SCOREXML):   GenderMale = 0.79616314191291;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.46382442740522;
MPRINT(SCOREXML):   HasCreditCardYes = 0.46382442740522;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.07746490150903;
MPRINT(SCOREXML):   HasCreditCardYes = -1.07746490150903;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.5311492247447;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.5311492247447;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.9408929124049;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.9408929124049;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUSvlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUSvads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUSvads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Age - -0.01107527688125 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Age - 0.02324304778504 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Age - 0.15033311687726 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Age - -0.1210803650093 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Age - -0.01791871272042 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Balance - -1.41972160215268 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Balance - 0.02821172079979 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Balance - 0.5320326471595 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Balance - 0.58508801882431 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Balance - -0.06733907340743 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_CreditScore - 0.04344305756875 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_CreditScore - 0.04249344760845 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_CreditScore - -0.57859992861114 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_CreditScore - 0.35669014739369 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_CreditScore - 0.01721820049563 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_EstimatedSalary - -0.08759463112551 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_EstimatedSalary - 0.02123693930344 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_EstimatedSalary - 0.52079719833856 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_EstimatedSalary - -0.40076668977918 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_EstimatedSalary - 0.07697166104635 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_NumOfProducts - -0.35267954903557 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_NumOfProducts - -0.32621519637171 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_NumOfProducts - -0.30622250232313 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_NumOfProducts - -0.38453241150744 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_NumOfProducts - 2.16620884351669 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Tenure - -0.09160129221369 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Tenure - -0.0102422982136 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Tenure - 0.59559080952925 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Tenure - -0.40570518468486 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Tenure - 0.04732129677804 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountryFrance - 0.31728424883842 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountryFrance - -0.00532357605346 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountryFrance - -0.12716978361873 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountryFrance - -0.11727053471745 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountryFrance - 0.00024280052006 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountryGermany - -0.47090328372809 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountryGermany - -0.00763317821636 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountryGermany - 0.17214836365488 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountryGermany - 0.20615834357868 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountryGermany - -0.00629513253458 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( CountrySpain - 0.18747628685583 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( CountrySpain - 0.01577994459473 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( CountrySpain - -0.0549264042293 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( CountrySpain - -0.10841139471683 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( CountrySpain - 0.00737385508572 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( GenderFemale - 0.02624269991092 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( GenderFemale - -0.02173175502969 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( GenderFemale - 0.15927752510911 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( GenderFemale - -0.14509083367695 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( GenderFemale - 0.05101210497949 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( GenderMale - -0.02624269991092 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( GenderMale - 0.02173175502969 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( GenderMale - -0.15927752510911 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( GenderMale - 0.14509083367695 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( GenderMale - -0.05101210497949 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( HasCreditCardNo - 1.07746490150903 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( HasCreditCardNo - -0.43967890267027 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( HasCreditCardNo - -0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( HasCreditCardNo - -0.00530466288951 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( HasCreditCardYes - -1.07746490150903 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( HasCreditCardYes - 0.43967890267027 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( HasCreditCardYes - 0.46382442740522 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( HasCreditCardYes - 0.00530466288951 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( IsActiveMemberNo - 0.07853856763261 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( IsActiveMemberNo - -0.07564677072154 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( IsActiveMemberNo - 0.22367306032703 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( IsActiveMemberNo - -0.10390672706735 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( IsActiveMemberNo - -0.07560649486893 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( IsActiveMemberYes - -0.07853856763261 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( IsActiveMemberYes - 0.07564677072154 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( IsActiveMemberYes - -0.22367306032703 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( IsActiveMemberYes - 0.10390672706735 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( IsActiveMemberYes - 0.07560649486893 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUSvads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUSvads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUSvlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "10" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "10" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "10" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M2P0XWHB noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2P0XWHB;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P0XWHB(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2P0XWHB;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2P0XWHB;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3KLXC1B NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3IM0MEO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KLXC1B;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN04092";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:00 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base03TA5E4 as select * from WORK.M32T0Z43 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp03TA5E4 as select * from WORK.M31SPVAE order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base03TA5E4 compare=work._comp03TA5E4 out=WORK._DIFF3JCOJLH noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10HC6A9O as select * from WORK._DIFF3JCOJLH where NAME in (select NAME from WORK._DIFF3JCOJLH where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3GKIWK_ as select * from WORK._DIFF3JCOJLH where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF3JCOJLH where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3GKIWK_ as select * from WORK._DIFF3JCOJLH where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF3JCOJLH where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3GKIWK_;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3GKIWK_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3GKIWK_;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3GKIWK_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_EMTRAINVARIABLE / view=WORK.Filter_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_CLASS / view=WORK.Filter_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_INTERVAL / view=WORK.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3RYB0HZ as select * from WORK.M0YNCMFG order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3RYB0HZ as select * from WORK.M3D0JP7C order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3RYB0HZ compare=work._comp3RYB0HZ out=WORK._DIFF2MI808M noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13DRJYQG as select * from WORK._DIFF2MI808M where NAME in (select NAME from WORK._DIFF2MI808M where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3PRV7MM as select * from WORK._DIFF2MI808M where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF2MI808M where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3PRV7MM as select * from WORK._DIFF2MI808M where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF2MI808M where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3PRV7MM;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3PRV7MM;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3PRV7MM;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3PRV7MM;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_EMTRAINVARIABLE / view=WORK.Clus_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTMEAN / view=WORK.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTSTAT / view=WORK.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_INPUTMEAN / view=WORK.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_TREE_PLOT / view=WORK.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_1"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTIMPORT / view=WORK.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_PROFILE / view=WORK.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_DISTANCE / view=WORK.Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0E31SYT as select * from WORK.M1K2H_0T order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0E31SYT as select * from WORK.M1EO8FN5 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0E31SYT compare=work._comp0E31SYT out=WORK._DIFF3RV5AVY noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN04256";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_EMTRAINVARIABLE / view=WORK.Prof_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_SIZE / view=WORK.Prof_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_STATS / view=WORK.Prof_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_CLASSDIST / view=WORK.Prof_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_INTDIST / view=WORK.Prof_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_WORTH / view=WORK.Prof_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2EQDJWM as select * from WORK.M2Q7LKG2 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2EQDJWM as select * from WORK.M1LLN2M8 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2EQDJWM compare=work._comp2EQDJWM out=WORK._DIFF0BU1SSH noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN04329;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack1740 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1740, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment3_Prof_1WY_C" nodeid="Prof" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack05D6 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack05D6, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack05D6, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0N0S29W "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05D6, "fileref:F0N0S29W", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1J4WACY "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05D6, "fileref:F1J4WACY", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1PBR28E "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05D6, "fileref:F1PBR28E", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0UDFRHX "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05D6, "fileref:F0UDFRHX", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1W0U = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1W0U, "File Import", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BI2SF1 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F2BI2SF1", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F12F1I66 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F12F1I66", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F251KAKO "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F251KAKO", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W0U, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F12J38_B "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F12J38_B", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F308MJQ6 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F308MJQ6", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HE66OY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F1HE66OY", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1H4A_QY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W0U, "fileref:F1H4A_QY", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack1W0U, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0QAG = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0QAG, "churned - Yes", ' NAME="Filter"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package churned - Yes began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3M25M92 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F3M25M92", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1H0Q9KB "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F1H0Q9KB", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2LZWASL "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F2LZWASL", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0QAG, "work", "Filter_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0YEDYRH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F0YEDYRH", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ICYYW1 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F0ICYYW1", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1421O6M "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F1421O6M", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1O62F98 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F1O62F98", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3AZUSPT "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F3AZUSPT", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1OCGLW9 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QAG, "fileref:F1OCGLW9", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0QAG, "work", "Filter_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0QAG, "work", "Filter_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack0QAG, rc, "NESTED_NAME", "Filter");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2KI7 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2KI7, "Churned Cluster", ' NAME="Clus"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Churned Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0PV3GR5 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F0PV3GR5", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F25MHZ4J "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F25MHZ4J", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Q4_F2Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F1Q4_F2Q", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2NGG8GH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F2NGG8GH", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2PAPN4Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F2PAPN4Q", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_O39RR "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F2_O39RR", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1NKQH04 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F1NKQH04", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05_7HMU "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F05_7HMU", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KWYXQB "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F1KWYXQB", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1O7FR4O "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F1O7FR4O", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F24Z5OL9 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TREEPLOT.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F24Z5OL9", "BINARY", "text/xml", 'TreePlot.XML', 'NAME=TreePlot TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TREEPLOT.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_H0HET "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2KI7, "fileref:F2_H0HET", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1PPB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1PPB, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2KI7, Pack1PPB, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_ZS7ZX "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1PPB, "fileref:F0_ZS7ZX", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2KI7, "work", "Clus_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack2KI7, rc, "NESTED_NAME", "Clus");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack05M7 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack05M7, "Segment Profile", ' NAME="Prof"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2J6O_B5 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F2J6O_B5", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0UMU2W9 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F0UMU2W9", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UV7_EZ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F1UV7_EZ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0SFDEKO "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F0SFDEKO", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3EBOU1Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F3EBOU1Q", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3FPDKGS "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F3FPDKGS", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0XD0THW "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F0XD0THW", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3GJADC6 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack05M7, "fileref:F3GJADC6", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack05M7, "work", "Prof_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack05M7, rc, "NESTED_NAME", "Prof");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3CJY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3CJY, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack3CJY, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F399JJ2H "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CJY, "fileref:F399JJ2H", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1EI8RKF "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CJY, "fileref:F1EI8RKF", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0XIKHCB "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3CJY, "fileref:F0XIKHCB", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F270DKPK "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1740, "fileref:F270DKPK", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack374O = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack374O, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1740, Pack374O, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3AMM = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3AMM, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack374O, Pack3AMM, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_A6EHH "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3AMM, "fileref:F0_A6EHH", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0MHE = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0MHE, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack374O, Pack0MHE, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack1740, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack1740 successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack1740, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack1740 ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof_1WY_C\miningResult.xml inserted successfully.
Package File Import began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package churned - Yes began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Churned Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\TREEPLOT.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3IJOQED\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3QLT4E6score.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack1740 successfully.
Package Pack1740 ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F0N0S29W;
MPRINT(EM_DIAGRAM):   filename F1J4WACY;
MPRINT(EM_DIAGRAM):   filename F1PBR28E;
MPRINT(EM_DIAGRAM):   filename F0UDFRHX;
MPRINT(EM_DIAGRAM):   filename F2BI2SF1;
MPRINT(EM_DIAGRAM):   filename F12F1I66;
MPRINT(EM_DIAGRAM):   filename F251KAKO;
MPRINT(EM_DIAGRAM):   filename F12J38_B;
MPRINT(EM_DIAGRAM):   filename F308MJQ6;
MPRINT(EM_DIAGRAM):   filename F1HE66OY;
MPRINT(EM_DIAGRAM):   filename F1H4A_QY;
MPRINT(EM_DIAGRAM):   filename F3M25M92;
MPRINT(EM_DIAGRAM):   filename F1H0Q9KB;
MPRINT(EM_DIAGRAM):   filename F2LZWASL;
MPRINT(EM_DIAGRAM):   filename F0YEDYRH;
MPRINT(EM_DIAGRAM):   filename F0ICYYW1;
MPRINT(EM_DIAGRAM):   filename F1421O6M;
MPRINT(EM_DIAGRAM):   filename F1O62F98;
MPRINT(EM_DIAGRAM):   filename F3AZUSPT;
MPRINT(EM_DIAGRAM):   filename F1OCGLW9;
MPRINT(EM_DIAGRAM):   filename F0PV3GR5;
MPRINT(EM_DIAGRAM):   filename F25MHZ4J;
MPRINT(EM_DIAGRAM):   filename F1Q4_F2Q;
MPRINT(EM_DIAGRAM):   filename F2NGG8GH;
MPRINT(EM_DIAGRAM):   filename F2PAPN4Q;
MPRINT(EM_DIAGRAM):   filename F2_O39RR;
MPRINT(EM_DIAGRAM):   filename F1NKQH04;
MPRINT(EM_DIAGRAM):   filename F05_7HMU;
MPRINT(EM_DIAGRAM):   filename F1KWYXQB;
MPRINT(EM_DIAGRAM):   filename F1O7FR4O;
MPRINT(EM_DIAGRAM):   filename F24Z5OL9;
MPRINT(EM_DIAGRAM):   filename F2_H0HET;
MPRINT(EM_DIAGRAM):   filename F0_ZS7ZX;
MPRINT(EM_DIAGRAM):   filename F2J6O_B5;
MPRINT(EM_DIAGRAM):   filename F0UMU2W9;
MPRINT(EM_DIAGRAM):   filename F1UV7_EZ;
MPRINT(EM_DIAGRAM):   filename F0SFDEKO;
MPRINT(EM_DIAGRAM):   filename F3EBOU1Q;
MPRINT(EM_DIAGRAM):   filename F3FPDKGS;
MPRINT(EM_DIAGRAM):   filename F0XD0THW;
MPRINT(EM_DIAGRAM):   filename F3GJADC6;
MPRINT(EM_DIAGRAM):   filename F399JJ2H;
MPRINT(EM_DIAGRAM):   filename F1EI8RKF;
MPRINT(EM_DIAGRAM):   filename F0XIKHCB;
MPRINT(EM_DIAGRAM):   filename F270DKPK;
MPRINT(EM_DIAGRAM):   filename F0_A6EHH;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
31037      %let eminfo= %str();
31038      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
31039      set EMWS1.Prof3_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_ExportSet;
31040      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
31041      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
31042      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF3_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "FILTER3" 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
Retrieving Score Code Filter2 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
Retrieving Score Code Filter3 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
Retrieving Score Code Clus3 
traverser_readyNode_note 
Retrieving Score Code Prof3 
31043      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31044      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
31045      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31046      filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas";
31047      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
31048      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents;
MPRINT(EM_DIAGRAM):   * Project Name: CA Assignment 3;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Task 1 and 2;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 24OCT2020:18:52:08;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ( Tenure eq . or (-0.5<=Tenure) and (Tenure<=8.543)) then do;
MPRINT(EM_DIAGRAM):   if M_FILTER eq . then M_FILTER = 0;
MPRINT(EM_DIAGRAM):   else M_FILTER = M_FILTER + 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else M_FILTER = 1;
MPRINT(EM_DIAGRAM):   label M_FILTER = 'Filtered Indicator';
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 37.3486697045421) * 0.09926078075696;
MPRINT(EM_DIAGRAM):   *** Standardize Balance ;
MPRINT(EM_DIAGRAM):   drop T_Balance ;
MPRINT(EM_DIAGRAM):   if missing( Balance ) then T_Balance = .;
MPRINT(EM_DIAGRAM):   else T_Balance = (Balance - 73061.5528869617) * 0.00001588092652;
MPRINT(EM_DIAGRAM):   *** Standardize CreditScore ;
MPRINT(EM_DIAGRAM):   drop T_CreditScore ;
MPRINT(EM_DIAGRAM):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(EM_DIAGRAM):   else T_CreditScore = (CreditScore - 651.549022490078) * 0.01042994811318;
MPRINT(EM_DIAGRAM):   *** Standardize EstimatedSalary ;
MPRINT(EM_DIAGRAM):   drop T_EstimatedSalary ;
MPRINT(EM_DIAGRAM):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(EM_DIAGRAM):   else T_EstimatedSalary = (EstimatedSalary - 99793.9284227545) * 0.00001741903921;
MPRINT(EM_DIAGRAM):   *** Standardize NumOfProducts ;
MPRINT(EM_DIAGRAM):   drop T_NumOfProducts ;
MPRINT(EM_DIAGRAM):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(EM_DIAGRAM):   else T_NumOfProducts = (NumOfProducts - 1.54240776128178) * 1.96227379743286;
MPRINT(EM_DIAGRAM):   *** Standardize Tenure ;
MPRINT(EM_DIAGRAM):   drop T_Tenure ;
MPRINT(EM_DIAGRAM):   if missing( Tenure ) then T_Tenure = .;
MPRINT(EM_DIAGRAM):   else T_Tenure = (Tenure - 4.29972071145083) * 0.40890070825491;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Country ;
MPRINT(EM_DIAGRAM):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(EM_DIAGRAM):   if missing( Country ) then do;
MPRINT(EM_DIAGRAM):   CountryFrance = .;
MPRINT(EM_DIAGRAM):   CountryGermany = .;
MPRINT(EM_DIAGRAM):   CountrySpain = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(EM_DIAGRAM):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'FRANCE' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = 0.5456716093712;
MPRINT(EM_DIAGRAM):   CountryGermany = -0.29822455780832;
MPRINT(EM_DIAGRAM):   CountrySpain = -0.3432732191203;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'SPAIN' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = -0.6107782219535;
MPRINT(EM_DIAGRAM):   CountryGermany = -0.29822455780832;
MPRINT(EM_DIAGRAM):   CountrySpain = 0.9709010688231;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GERMANY' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = -0.6107782219535;
MPRINT(EM_DIAGRAM):   CountryGermany = 1.11756167161947;
MPRINT(EM_DIAGRAM):   CountrySpain = -0.3432732191203;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CountryFrance = .;
MPRINT(EM_DIAGRAM):   CountryGermany = .;
MPRINT(EM_DIAGRAM):   CountrySpain = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Gender ;
MPRINT(EM_DIAGRAM):   drop GenderFemale GenderMale ;
MPRINT(EM_DIAGRAM):   if missing( Gender ) then do;
MPRINT(EM_DIAGRAM):   GenderFemale = .;
MPRINT(EM_DIAGRAM):   GenderMale = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
MPRINT(EM_DIAGRAM):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm6 = 'MALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = -0.61185501232938;
MPRINT(EM_DIAGRAM):   GenderMale = 0.61185501232938;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'FEMALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = 0.81706694059776;
MPRINT(EM_DIAGRAM):   GenderMale = -0.81706694059776;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GenderFemale = .;
MPRINT(EM_DIAGRAM):   GenderMale = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HasCreditCard ;
MPRINT(EM_DIAGRAM):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(EM_DIAGRAM):   if missing( HasCreditCard ) then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = .;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = -0.45432132763227;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = 0.45432132763227;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = 1.10038088156409;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = -1.10038088156409;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = .;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IsActiveMember ;
MPRINT(EM_DIAGRAM):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(EM_DIAGRAM):   if missing( IsActiveMember ) then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = .;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = -0.62948604442221;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = 0.62948604442221;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = 0.79418202745422;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = -0.79418202745422;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = .;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Age - -0.22109399278566 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Age - 2.37562453586545 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Age - -0.20869514120168 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Age - -0.1927097919727 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_Age - -0.26870501947878 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Balance ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Balance - 0.67620159309638 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Balance - -0.05799203913972 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Balance - 0.55845836120091 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Balance - -0.42813165274001 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_Balance - -0.76703639383354 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_CreditScore ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_CreditScore - 0.08413911593443 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_CreditScore - 0.00082564378288 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_CreditScore - -0.13200233397635 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_CreditScore - 0.28150771736911 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_CreditScore - -0.2071895978559 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_EstimatedSalary ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_EstimatedSalary - 0.07743237765037 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_EstimatedSalary - -0.09808287200863 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_EstimatedSalary - -0.12747463353498 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_EstimatedSalary - 0.3546663718626 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_EstimatedSalary - -0.22910942813794 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_NumOfProducts ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_NumOfProducts - -0.80722700541004 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_NumOfProducts - -0.02491378570639 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_NumOfProducts - -0.81567399360304 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_NumOfProducts - 0.82849785483766 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_NumOfProducts - 0.81101402882366 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Tenure ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Tenure - -0.20762615854049 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Tenure - 0.03433967652659 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Tenure - 0.21725149654314 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Tenure - -0.51167596316201 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_Tenure - 0.43789530921442 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( CountryFrance ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( CountryFrance - -0.04252270138877 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( CountryFrance - -0.02371795104333 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( CountryFrance - -0.02370937094598 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( CountryFrance - 0.02046803976597 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( CountryFrance - 0.05370868578901 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( CountryGermany ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( CountryGermany - 0.0947781713949 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( CountryGermany - -0.03141255192295 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( CountryGermany - 0.07402513543525 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( CountryGermany - 0.00435502624267 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( CountryGermany - -0.14806541226295 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( CountrySpain ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( CountrySpain - -0.03965364225062 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( CountrySpain - 0.05611081745332 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( CountrySpain - -0.04176928561544 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( CountrySpain - -0.02730207263282 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( CountrySpain - 0.07640481688959 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( GenderFemale ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( GenderFemale - -0.57325769521006 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( GenderFemale - -0.08055805529874 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( GenderFemale - 0.75046023630984 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( GenderFemale - 0.32803516753822 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( GenderFemale - -0.25628993429914 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( GenderMale ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( GenderMale - 0.57325769521006 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( GenderMale - 0.08055805529874 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( GenderMale - -0.75046023630984 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( GenderMale - -0.32803516753822 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( GenderMale - 0.25628993429914 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( HasCreditCardNo ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HasCreditCardNo - -0.02275743852776 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HasCreditCardNo - -0.01087485709748 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HasCreditCardNo - -0.04101739000906 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HasCreditCardNo - 0.41900597832784 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( HasCreditCardNo - -0.27855662566018 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( HasCreditCardYes ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( HasCreditCardYes - 0.02275743852776 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( HasCreditCardYes - 0.01087485709748 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( HasCreditCardYes - 0.04101739000906 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( HasCreditCardYes - -0.41900597832784 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( HasCreditCardYes - 0.27855662566018 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( IsActiveMemberNo ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( IsActiveMemberNo - 0.1216215934988 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( IsActiveMemberNo - -0.59081254841198 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( IsActiveMemberNo - -0.02393458486224 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( IsActiveMemberNo - -0.14122443132379 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( IsActiveMemberNo - 0.21260200508511 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( IsActiveMemberYes ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( IsActiveMemberYes - -0.1216215934988 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( IsActiveMemberYes - 0.59081254841198 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( IsActiveMemberYes - 0.02393458486224 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( IsActiveMemberYes - 0.14122443132379 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( IsActiveMemberYes - -0.21260200508511 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 10 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31415      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
31416      quit;
31417      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
31418      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
31419      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31420      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 350 observations read from the data set WORK._TEMP.
NOTE: 310 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 40 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Balance'n 'Churned'n 'Country'n 'CreditScore'n 'CustomerID'n 'EstimatedSalary'n 'Gender'n 'HasCreditCard'n 'IsActiveMember'n 'NumOfProducts'n 'Tenure'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:52:08;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if ( Tenure eq . or (-0.5<=Tenure) and (Tenure<=8.543)) then do;
MPRINT(SCOREXML):   if M_FILTER eq . then M_FILTER = 0;
MPRINT(SCOREXML):   else M_FILTER = M_FILTER + 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else M_FILTER = 1;
MPRINT(SCOREXML):   label M_FILTER = 'Filtered Indicator';
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 37.3486697045421) * 0.09926078075696;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 73061.5528869617) * 0.00001588092652;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 651.549022490078) * 0.01042994811318;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 99793.9284227545) * 0.00001741903921;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.54240776128178) * 1.96227379743286;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 4.29972071145083) * 0.40890070825491;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.5456716093712;
MPRINT(SCOREXML):   CountryGermany = -0.29822455780832;
MPRINT(SCOREXML):   CountrySpain = -0.3432732191203;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.6107782219535;
MPRINT(SCOREXML):   CountryGermany = -0.29822455780832;
MPRINT(SCOREXML):   CountrySpain = 0.9709010688231;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.6107782219535;
MPRINT(SCOREXML):   CountryGermany = 1.11756167161947;
MPRINT(SCOREXML):   CountrySpain = -0.3432732191203;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.61185501232938;
MPRINT(SCOREXML):   GenderMale = 0.61185501232938;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.81706694059776;
MPRINT(SCOREXML):   GenderMale = -0.81706694059776;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.45432132763227;
MPRINT(SCOREXML):   HasCreditCardYes = 0.45432132763227;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.10038088156409;
MPRINT(SCOREXML):   HasCreditCardYes = -1.10038088156409;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.62948604442221;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.62948604442221;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.79418202745422;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.79418202745422;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS3vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS3vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS3vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Age - -0.22109399278566 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Age - 2.37562453586545 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Age - -0.20869514120168 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Age - -0.1927097919727 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Age - -0.26870501947878 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Balance - 0.67620159309638 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Balance - -0.05799203913972 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Balance - 0.55845836120091 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Balance - -0.42813165274001 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Balance - -0.76703639383354 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_CreditScore - 0.08413911593443 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_CreditScore - 0.00082564378288 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_CreditScore - -0.13200233397635 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_CreditScore - 0.28150771736911 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_CreditScore - -0.2071895978559 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_EstimatedSalary - 0.07743237765037 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_EstimatedSalary - -0.09808287200863 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_EstimatedSalary - -0.12747463353498 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_EstimatedSalary - 0.3546663718626 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_EstimatedSalary - -0.22910942813794 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_NumOfProducts - -0.80722700541004 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_NumOfProducts - -0.02491378570639 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_NumOfProducts - -0.81567399360304 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_NumOfProducts - 0.82849785483766 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_NumOfProducts - 0.81101402882366 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Tenure - -0.20762615854049 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Tenure - 0.03433967652659 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Tenure - 0.21725149654314 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Tenure - -0.51167596316201 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Tenure - 0.43789530921442 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountryFrance - -0.04252270138877 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountryFrance - -0.02371795104333 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountryFrance - -0.02370937094598 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountryFrance - 0.02046803976597 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountryFrance - 0.05370868578901 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountryGermany - 0.0947781713949 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountryGermany - -0.03141255192295 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountryGermany - 0.07402513543525 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountryGermany - 0.00435502624267 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountryGermany - -0.14806541226295 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountrySpain - -0.03965364225062 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountrySpain - 0.05611081745332 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountrySpain - -0.04176928561544 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountrySpain - -0.02730207263282 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountrySpain - 0.07640481688959 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( GenderFemale - -0.57325769521006 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( GenderFemale - -0.08055805529874 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( GenderFemale - 0.75046023630984 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( GenderFemale - 0.32803516753822 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( GenderFemale - -0.25628993429914 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( GenderMale - 0.57325769521006 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( GenderMale - 0.08055805529874 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( GenderMale - -0.75046023630984 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( GenderMale - -0.32803516753822 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( GenderMale - 0.25628993429914 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( HasCreditCardNo - -0.02275743852776 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( HasCreditCardNo - -0.01087485709748 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( HasCreditCardNo - -0.04101739000906 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( HasCreditCardNo - 0.41900597832784 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( HasCreditCardNo - -0.27855662566018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( HasCreditCardYes - 0.02275743852776 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( HasCreditCardYes - 0.01087485709748 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( HasCreditCardYes - 0.04101739000906 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( HasCreditCardYes - -0.41900597832784 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( HasCreditCardYes - 0.27855662566018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( IsActiveMemberNo - 0.1216215934988 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( IsActiveMemberNo - -0.59081254841198 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( IsActiveMemberNo - -0.02393458486224 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( IsActiveMemberNo - -0.14122443132379 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( IsActiveMemberNo - 0.21260200508511 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( IsActiveMemberYes - -0.1216215934988 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( IsActiveMemberYes - 0.59081254841198 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( IsActiveMemberYes - 0.02393458486224 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( IsActiveMemberYes - 0.14122443132379 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( IsActiveMemberYes - -0.21260200508511 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS3vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS3vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS3vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus3: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:52:08;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if ( Tenure eq . or (-0.5<=Tenure) and (Tenure<=8.543)) then do;
MPRINT(SCOREXML):   if M_FILTER eq . then M_FILTER = 0;
MPRINT(SCOREXML):   else M_FILTER = M_FILTER + 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else M_FILTER = 1;
MPRINT(SCOREXML):   label M_FILTER = 'Filtered Indicator';
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 37.3486697045421) * 0.09926078075696;
MPRINT(SCOREXML):   *** Standardize Balance ;
MPRINT(SCOREXML):   drop T_Balance ;
MPRINT(SCOREXML):   if missing( Balance ) then T_Balance = .;
MPRINT(SCOREXML):   else T_Balance = (Balance - 73061.5528869617) * 0.00001588092652;
MPRINT(SCOREXML):   *** Standardize CreditScore ;
MPRINT(SCOREXML):   drop T_CreditScore ;
MPRINT(SCOREXML):   if missing( CreditScore ) then T_CreditScore = .;
MPRINT(SCOREXML):   else T_CreditScore = (CreditScore - 651.549022490078) * 0.01042994811318;
MPRINT(SCOREXML):   *** Standardize EstimatedSalary ;
MPRINT(SCOREXML):   drop T_EstimatedSalary ;
MPRINT(SCOREXML):   if missing( EstimatedSalary ) then T_EstimatedSalary = .;
MPRINT(SCOREXML):   else T_EstimatedSalary = (EstimatedSalary - 99793.9284227545) * 0.00001741903921;
MPRINT(SCOREXML):   *** Standardize NumOfProducts ;
MPRINT(SCOREXML):   drop T_NumOfProducts ;
MPRINT(SCOREXML):   if missing( NumOfProducts ) then T_NumOfProducts = .;
MPRINT(SCOREXML):   else T_NumOfProducts = (NumOfProducts - 1.54240776128178) * 1.96227379743286;
MPRINT(SCOREXML):   *** Standardize Tenure ;
MPRINT(SCOREXML):   drop T_Tenure ;
MPRINT(SCOREXML):   if missing( Tenure ) then T_Tenure = .;
MPRINT(SCOREXML):   else T_Tenure = (Tenure - 4.29972071145083) * 0.40890070825491;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   drop CountryFrance CountryGermany CountrySpain ;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 0.5456716093712;
MPRINT(SCOREXML):   CountryGermany = -0.29822455780832;
MPRINT(SCOREXML):   CountrySpain = -0.3432732191203;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountryFrance = -0.6107782219535;
MPRINT(SCOREXML):   CountryGermany = -0.29822455780832;
MPRINT(SCOREXML):   CountrySpain = 0.9709010688231;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryFrance = -0.6107782219535;
MPRINT(SCOREXML):   CountryGermany = 1.11756167161947;
MPRINT(SCOREXML):   CountrySpain = -0.3432732191203;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   drop GenderFemale GenderMale ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = -0.61185501232938;
MPRINT(SCOREXML):   GenderMale = 0.61185501232938;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0.81706694059776;
MPRINT(SCOREXML):   GenderMale = -0.81706694059776;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   drop HasCreditCardNo HasCreditCardYes ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = -0.45432132763227;
MPRINT(SCOREXML):   HasCreditCardYes = 0.45432132763227;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1.10038088156409;
MPRINT(SCOREXML):   HasCreditCardYes = -1.10038088156409;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   drop IsActiveMemberNo IsActiveMemberYes ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = -0.62948604442221;
MPRINT(SCOREXML):   IsActiveMemberYes = 0.62948604442221;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0.79418202745422;
MPRINT(SCOREXML):   IsActiveMemberYes = -0.79418202745422;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS3vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS3vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS3vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Age - -0.22109399278566 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Age - 2.37562453586545 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Age - -0.20869514120168 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Age - -0.1927097919727 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Age - -0.26870501947878 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Balance ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Balance - 0.67620159309638 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Balance - -0.05799203913972 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Balance - 0.55845836120091 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Balance - -0.42813165274001 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Balance - -0.76703639383354 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_CreditScore ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_CreditScore - 0.08413911593443 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_CreditScore - 0.00082564378288 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_CreditScore - -0.13200233397635 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_CreditScore - 0.28150771736911 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_CreditScore - -0.2071895978559 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_EstimatedSalary ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_EstimatedSalary - 0.07743237765037 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_EstimatedSalary - -0.09808287200863 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_EstimatedSalary - -0.12747463353498 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_EstimatedSalary - 0.3546663718626 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_EstimatedSalary - -0.22910942813794 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_NumOfProducts ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_NumOfProducts - -0.80722700541004 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_NumOfProducts - -0.02491378570639 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_NumOfProducts - -0.81567399360304 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_NumOfProducts - 0.82849785483766 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_NumOfProducts - 0.81101402882366 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Tenure ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Tenure - -0.20762615854049 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Tenure - 0.03433967652659 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Tenure - 0.21725149654314 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Tenure - -0.51167596316201 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Tenure - 0.43789530921442 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( CountryFrance ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountryFrance - -0.04252270138877 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountryFrance - -0.02371795104333 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountryFrance - -0.02370937094598 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountryFrance - 0.02046803976597 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountryFrance - 0.05370868578901 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountryGermany ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountryGermany - 0.0947781713949 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountryGermany - -0.03141255192295 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountryGermany - 0.07402513543525 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountryGermany - 0.00435502624267 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountryGermany - -0.14806541226295 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( CountrySpain ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( CountrySpain - -0.03965364225062 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( CountrySpain - 0.05611081745332 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( CountrySpain - -0.04176928561544 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( CountrySpain - -0.02730207263282 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( CountrySpain - 0.07640481688959 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( GenderFemale ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( GenderFemale - -0.57325769521006 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( GenderFemale - -0.08055805529874 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( GenderFemale - 0.75046023630984 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( GenderFemale - 0.32803516753822 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( GenderFemale - -0.25628993429914 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( GenderMale ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( GenderMale - 0.57325769521006 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( GenderMale - 0.08055805529874 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( GenderMale - -0.75046023630984 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( GenderMale - -0.32803516753822 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( GenderMale - 0.25628993429914 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( HasCreditCardNo ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( HasCreditCardNo - -0.02275743852776 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( HasCreditCardNo - -0.01087485709748 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( HasCreditCardNo - -0.04101739000906 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( HasCreditCardNo - 0.41900597832784 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( HasCreditCardNo - -0.27855662566018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( HasCreditCardYes ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( HasCreditCardYes - 0.02275743852776 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( HasCreditCardYes - 0.01087485709748 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( HasCreditCardYes - 0.04101739000906 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( HasCreditCardYes - -0.41900597832784 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( HasCreditCardYes - 0.27855662566018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberNo ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( IsActiveMemberNo - 0.1216215934988 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( IsActiveMemberNo - -0.59081254841198 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( IsActiveMemberNo - -0.02393458486224 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( IsActiveMemberNo - -0.14122443132379 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( IsActiveMemberNo - 0.21260200508511 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( IsActiveMemberYes ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( IsActiveMemberYes - -0.1216215934988 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( IsActiveMemberYes - 0.59081254841198 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( IsActiveMemberYes - 0.02393458486224 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( IsActiveMemberYes - 0.14122443132379 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( IsActiveMemberYes - -0.21260200508511 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 10 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 1.7053025658242E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS3vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS3vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (10 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS3vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus3: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "10" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "10" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "10" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M2QKY_K1 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QKY_K1;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QKY_K1(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QKY_K1;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QKY_K1;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2R0JE59 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2DLYTH4(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   set WORK.M2R0JE59;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:13 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN04508";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2VOFVP5 as select * from WORK.M0B9DJI7 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2VOFVP5 as select * from WORK.M21YKQE9 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2VOFVP5 compare=work._comp2VOFVP5 out=WORK._DIFF0ZID6JC noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP128A7J12 as select * from WORK._DIFF0ZID6JC where NAME in (select NAME from WORK._DIFF0ZID6JC where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM19PPPQO as select * from WORK._DIFF0ZID6JC where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0ZID6JC where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM19PPPQO as select * from WORK._DIFF0ZID6JC where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0ZID6JC where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM19PPPQO;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM19PPPQO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM19PPPQO;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM19PPPQO;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "FILTER3" 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter2 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_EMTRAINVARIABLE / view=WORK.Filter2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_CLASS / view=WORK.Filter2_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_INTERVAL / view=WORK.Filter2_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3DK46E6 as select * from WORK.M2SSFJXP order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3DK46E6 as select * from WORK.M2LUTDK0 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3DK46E6 compare=work._comp3DK46E6 out=WORK._DIFF39HC10R noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12CSRJWG as select * from WORK._DIFF39HC10R where NAME in (select NAME from WORK._DIFF39HC10R where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM15Q2LTH as select * from WORK._DIFF39HC10R where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF39HC10R where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM15Q2LTH as select * from WORK._DIFF39HC10R where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF39HC10R where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM15Q2LTH;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM15Q2LTH;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM15Q2LTH;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM15Q2LTH;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter3 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:15 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter3_EMTRAINVARIABLE / view=WORK.Filter3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter3_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter3_INTERVAL / view=WORK.Filter3_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:15 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2AD996Z as select * from WORK.M36V4YWN order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2AD996Z as select * from WORK.M25RZQUM order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2AD996Z compare=work._comp2AD996Z out=WORK._DIFF2Z21YK3 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11COOCX0 as select * from WORK._DIFF2Z21YK3 where NAME in (select NAME from WORK._DIFF2Z21YK3 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2H_ZRTF as select * from WORK._DIFF2Z21YK3 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF2Z21YK3 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2H_ZRTF as select * from WORK._DIFF2Z21YK3 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF2Z21YK3 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2H_ZRTF;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2H_ZRTF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2H_ZRTF;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2H_ZRTF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus3 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:16 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_EMTRAINVARIABLE / view=WORK.Clus3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTMEAN / view=WORK.Clus3_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTSTAT / view=WORK.Clus3_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CreditScore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSalary"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_INPUTMEAN / view=WORK.Clus3_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_TREE_PLOT / view=WORK.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_3"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTIMPORT / view=WORK.Clus3_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_PROFILE / view=WORK.Clus3_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_DISTANCE / view=WORK.Clus3_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:16 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1KFU3TE as select * from WORK.M1EVDVLR order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1KFU3TE as select * from WORK.M2HMM8OY order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1KFU3TE compare=work._comp1KFU3TE out=WORK._DIFF3PDNBJ9 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof3 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN04722";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_EMTRAINVARIABLE / view=WORK.Prof3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_SIZE / view=WORK.Prof3_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_STATS / view=WORK.Prof3_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_CLASSDIST / view=WORK.Prof3_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_INTDIST / view=WORK.Prof3_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_WORTH / view=WORK.Prof3_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0RAT8B3 as select * from WORK.M1VUABOC order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0RAT8B3 as select * from WORK.M180ORE_ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0RAT8B3 compare=work._comp0RAT8B3 out=WORK._DIFF3OW9ZUX noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN04798;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack19ZK = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack19ZK, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment3_Prof3_0MMFK" nodeid="Prof3" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2Q_1 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2Q_1, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack2Q_1, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1162C44 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2Q_1, "fileref:F1162C44", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3I72ETM "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2Q_1, "fileref:F3I72ETM", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1S195QL "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2Q_1, "fileref:F1S195QL", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F22329FU "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2Q_1, "fileref:F22329FU", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1HWK = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1HWK, "File Import", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DQLH6H "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F0DQLH6H", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_2TK72 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F0_2TK72", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CL_KKE "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F2CL_KKE", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1HWK, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FT91WU "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F1FT91WU", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3BLJ8L3 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F3BLJ8L3", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2F900JJ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F2F900JJ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CAGU6I "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1HWK, "fileref:F3CAGU6I", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack1HWK, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1XAS = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1XAS, "churned - No", ' NAME="Filter2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package churned - No began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3DUU8DT "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F3DUU8DT", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0JUT0WZ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F0JUT0WZ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E3K5YE "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F1E3K5YE", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1XAS, "work", "Filter2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E1ND2L "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F1E1ND2L", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BK6XME "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F2BK6XME", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2OJ7O3Z "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F2OJ7O3Z", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1LFEM5W "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F1LFEM5W", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3O3OL2J "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F3O3OL2J", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2V4BZ3L "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1XAS, "fileref:F2V4BZ3L", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1XAS, "work", "Filter2_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1XAS, "work", "Filter2_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack1XAS, rc, "NESTED_NAME", "Filter2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0PAX = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0PAX, "Tenure >= 9", ' NAME="Filter3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Tenure >= 9 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2M68LK3 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F2M68LK3", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UQ5RXR "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F1UQ5RXR", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13TX5SJ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F13TX5SJ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0PAX, "work", "Filter3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2QUN_3B "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F2QUN_3B", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3IRIY7F "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F3IRIY7F", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F23Y0U48 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F23Y0U48", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1LPEZXK "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F1LPEZXK", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3RBXEM0 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F3RBXEM0", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3UXNDQP "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0PAX, "fileref:F3UXNDQP", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0PAX, "work", "Filter3_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack0PAX, rc, "NESTED_NAME", "Filter3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1E4B = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1E4B, "Loyal Cluster", ' NAME="Clus3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Loyal Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BUKN18 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F2BUKN18", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2F4KCPQ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F2F4KCPQ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1OGR8U2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F1OGR8U2", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0TSHT0O "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F0TSHT0O", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0A0K9DJ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F0A0K9DJ", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05K3DQZ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F05K3DQZ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05CJ4VB "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F05CJ4VB", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F391JDY2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F391JDY2", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3V5XOVF "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F3V5XOVF", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FC2RBY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TREEPLOT.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F1FC2RBY", "BINARY", "text/xml", 'TreePlot.XML', 'NAME=TreePlot TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TREEPLOT.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2UF6NPY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1E4B, "fileref:F2UF6NPY", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2WVN = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2WVN, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1E4B, Pack2WVN, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WBD0U1 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2WVN, "fileref:F0WBD0U1", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1E4B, "work", "Clus3_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack1E4B, rc, "NESTED_NAME", "Clus3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1495 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1495, "Segment Profile", ' NAME="Prof3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F19AP_MY "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F19AP_MY", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F10MC8X1 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F10MC8X1", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NE17N9 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F0NE17N9", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F14M13CQ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F14M13CQ", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1BF2GY_ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F1BF2GY_", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FQ3HHH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F1FQ3HHH", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F10K5TNB "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F10K5TNB", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0U18ZTH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1495, "fileref:F0U18ZTH", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1495, "work", "Prof3_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack1495, rc, "NESTED_NAME", "Prof3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack15_U = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack15_U, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack15_U, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Q660UP "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack15_U, "fileref:F1Q660UP", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13SQ1C3 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack15_U, "fileref:F13SQ1C3", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3JXPT0D "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack15_U, "fileref:F3JXPT0D", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01WFTCU "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19ZK, "fileref:F01WFTCU", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2L5X = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2L5X, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack19ZK, Pack2L5X, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack04GQ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack04GQ, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2L5X, Pack04GQ, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2OU1DT8 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack04GQ, "fileref:F2OU1DT8", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1XRB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1XRB, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2L5X, Pack1XRB, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack19ZK, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack19ZK successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack19ZK, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack19ZK ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_Prof3_0MMFK\miningResult.xml inserted successfully.
Package File Import began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package churned - No began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Tenure >= 9 began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Loyal Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\TREEPLOT.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3F0XHWJ\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_0TLA9UAscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack19ZK successfully.
Package Pack19ZK ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F1162C44;
MPRINT(EM_DIAGRAM):   filename F3I72ETM;
MPRINT(EM_DIAGRAM):   filename F1S195QL;
MPRINT(EM_DIAGRAM):   filename F22329FU;
MPRINT(EM_DIAGRAM):   filename F0DQLH6H;
MPRINT(EM_DIAGRAM):   filename F0_2TK72;
MPRINT(EM_DIAGRAM):   filename F2CL_KKE;
MPRINT(EM_DIAGRAM):   filename F1FT91WU;
MPRINT(EM_DIAGRAM):   filename F3BLJ8L3;
MPRINT(EM_DIAGRAM):   filename F2F900JJ;
MPRINT(EM_DIAGRAM):   filename F3CAGU6I;
MPRINT(EM_DIAGRAM):   filename F3DUU8DT;
MPRINT(EM_DIAGRAM):   filename F0JUT0WZ;
MPRINT(EM_DIAGRAM):   filename F1E3K5YE;
MPRINT(EM_DIAGRAM):   filename F1E1ND2L;
MPRINT(EM_DIAGRAM):   filename F2BK6XME;
MPRINT(EM_DIAGRAM):   filename F2OJ7O3Z;
MPRINT(EM_DIAGRAM):   filename F1LFEM5W;
MPRINT(EM_DIAGRAM):   filename F3O3OL2J;
MPRINT(EM_DIAGRAM):   filename F2V4BZ3L;
MPRINT(EM_DIAGRAM):   filename F2M68LK3;
MPRINT(EM_DIAGRAM):   filename F1UQ5RXR;
MPRINT(EM_DIAGRAM):   filename F13TX5SJ;
MPRINT(EM_DIAGRAM):   filename F2QUN_3B;
MPRINT(EM_DIAGRAM):   filename F3IRIY7F;
MPRINT(EM_DIAGRAM):   filename F23Y0U48;
MPRINT(EM_DIAGRAM):   filename F1LPEZXK;
MPRINT(EM_DIAGRAM):   filename F3RBXEM0;
MPRINT(EM_DIAGRAM):   filename F3UXNDQP;
MPRINT(EM_DIAGRAM):   filename F2BUKN18;
MPRINT(EM_DIAGRAM):   filename F2F4KCPQ;
MPRINT(EM_DIAGRAM):   filename F1OGR8U2;
MPRINT(EM_DIAGRAM):   filename F0TSHT0O;
MPRINT(EM_DIAGRAM):   filename F0A0K9DJ;
MPRINT(EM_DIAGRAM):   filename F05K3DQZ;
MPRINT(EM_DIAGRAM):   filename F05CJ4VB;
MPRINT(EM_DIAGRAM):   filename F391JDY2;
MPRINT(EM_DIAGRAM):   filename F3V5XOVF;
MPRINT(EM_DIAGRAM):   filename F1FC2RBY;
MPRINT(EM_DIAGRAM):   filename F2UF6NPY;
MPRINT(EM_DIAGRAM):   filename F0WBD0U1;
MPRINT(EM_DIAGRAM):   filename F19AP_MY;
MPRINT(EM_DIAGRAM):   filename F10MC8X1;
MPRINT(EM_DIAGRAM):   filename F0NE17N9;
MPRINT(EM_DIAGRAM):   filename F14M13CQ;
MPRINT(EM_DIAGRAM):   filename F1BF2GY_;
MPRINT(EM_DIAGRAM):   filename F1FQ3HHH;
MPRINT(EM_DIAGRAM):   filename F10K5TNB;
MPRINT(EM_DIAGRAM):   filename F0U18ZTH;
MPRINT(EM_DIAGRAM):   filename F1Q660UP;
MPRINT(EM_DIAGRAM):   filename F13SQ1C3;
MPRINT(EM_DIAGRAM):   filename F3JXPT0D;
MPRINT(EM_DIAGRAM):   filename F01WFTCU;
MPRINT(EM_DIAGRAM):   filename F2OU1DT8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
34156      %let eminfo= %str();
34157      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
34158      set EMWS1.MdlComp_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_ExportSet;
34159      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
34160      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
34161      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

34162      %let prescoreid = %str();
34163      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
34164      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
34165      where key = 'PRESCORECODE';
MPRINT(EM_DIAGRAM):   where key = 'PRESCORECODE';
34166      if DATA ne '' then call symput('prescoreid', strip(DATA));
MPRINT(EM_DIAGRAM):   if DATA ne '' then call symput('prescoreid', strip(DATA));
34167      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key='PRESCORECODE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT2 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
Retrieving Score Code Stat 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
Retrieving Score Code Trans 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
Retrieving Score Code Part 
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
Retrieving Score Code VarClus 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
Retrieving Score Code Neural 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
Retrieving Score Code MdlComp 
34168      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34169      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
34170      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34171      filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas";
34172      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
34173      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents;
MPRINT(EM_DIAGRAM):   * Project Name: CA Assignment 3;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: Task 1 and 2;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 24OCT2020:18:52:24;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Statistics Exploration;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Stat;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   Age_Zscore =(Age - 38.9218)/10.48781 ;
MPRINT(EM_DIAGRAM):   Balance_Zscore =(Balance - 76485.89)/62397.41 ;
MPRINT(EM_DIAGRAM):   Creditscore_Zscore =(CreditScore - 650.5288)/96.6533 ;
MPRINT(EM_DIAGRAM):   EstimatedSal_Zscore =(EstimatedSalary - 100090.2)/57510.49 ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Country ;
MPRINT(EM_DIAGRAM):   label CountryFrance = 'Country=France' ;
MPRINT(EM_DIAGRAM):   label CountryGermany = 'Country=Germany' ;
MPRINT(EM_DIAGRAM):   label CountrySpain = 'Country=Spain' ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   CountryFrance = 0;
MPRINT(EM_DIAGRAM):   CountryGermany = 0;
MPRINT(EM_DIAGRAM):   CountrySpain = 0;
MPRINT(EM_DIAGRAM):   if missing( Country ) then do;
MPRINT(EM_DIAGRAM):   CountryFrance = .;
MPRINT(EM_DIAGRAM):   CountryGermany = .;
MPRINT(EM_DIAGRAM):   CountrySpain = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
MPRINT(EM_DIAGRAM):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'FRANCE' then do;
MPRINT(EM_DIAGRAM):   CountryFrance = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'SPAIN' then do;
MPRINT(EM_DIAGRAM):   CountrySpain = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'GERMANY' then do;
MPRINT(EM_DIAGRAM):   CountryGermany = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Gender ;
MPRINT(EM_DIAGRAM):   label GenderFemale = 'Gender=Female' ;
MPRINT(EM_DIAGRAM):   label GenderMale = 'Gender=Male' ;
MPRINT(EM_DIAGRAM):   if missing( Gender ) then do;
MPRINT(EM_DIAGRAM):   GenderFemale = .;
MPRINT(EM_DIAGRAM):   GenderMale = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
MPRINT(EM_DIAGRAM):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm6 = 'MALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = 0;
MPRINT(EM_DIAGRAM):   GenderMale = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm6 = 'FEMALE' then do;
MPRINT(EM_DIAGRAM):   GenderFemale = 1;
MPRINT(EM_DIAGRAM):   GenderMale = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for HasCreditCard ;
MPRINT(EM_DIAGRAM):   label HasCreditCardNo = 'HasCreditCard=No' ;
MPRINT(EM_DIAGRAM):   label HasCreditCardYes = 'HasCreditCard=Yes' ;
MPRINT(EM_DIAGRAM):   if missing( HasCreditCard ) then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = .;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
213 The SAS System                                                                                                                                                                                                              11:29 Saturday, October 24, 2020

MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = 0;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   HasCreditCardNo = 1;
MPRINT(EM_DIAGRAM):   HasCreditCardYes = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IsActiveMember ;
MPRINT(EM_DIAGRAM):   label IsActiveMemberNo = 'IsActiveMember=No' ;
MPRINT(EM_DIAGRAM):   label IsActiveMemberYes = 'IsActiveMember=Yes' ;
MPRINT(EM_DIAGRAM):   if missing( IsActiveMember ) then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = .;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = 0;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   IsActiveMemberNo = 1;
MPRINT(EM_DIAGRAM):   IsActiveMemberYes = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   /*-------------------------------------------------*/ /* Varclus Score Code Begins*/ /*-------------------------------------------------*/ Clus1 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 1------ */ Clus2 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 2------ */ Clus3 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 3------ */ Clus4 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 4------ */ Clus5 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 5------ */ Clus6 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 6------ */ Clus7 = 0 ;
MPRINT(EM_DIAGRAM):   /*---Cluster Component 7------ */ Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
MPRINT(EM_DIAGRAM):   Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
MPRINT(EM_DIAGRAM):   Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
MPRINT(EM_DIAGRAM):   Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
MPRINT(EM_DIAGRAM):   Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
MPRINT(EM_DIAGRAM):   Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
MPRINT(EM_DIAGRAM):   Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Neural;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Neural;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ***********************************;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 I_Churned $ 3 U_Churned $ 3 ;
MPRINT(EM_DIAGRAM):   label S_Age_Zscore = 'Standard: Age_Zscore' ;
MPRINT(EM_DIAGRAM):   label S_CountrySpain = 'Standard: CountrySpain' ;
MPRINT(EM_DIAGRAM):   label S_EstimatedSal_Zscore = 'Standard: EstimatedSal_Zscore' ;
MPRINT(EM_DIAGRAM):   label S_GenderFemale = 'Standard: GenderFemale' ;
MPRINT(EM_DIAGRAM):   label S_HasCreditCardNo = 'Standard: HasCreditCardNo' ;
MPRINT(EM_DIAGRAM):   label S_IsActiveMemberNo = 'Standard: IsActiveMemberNo' ;
MPRINT(EM_DIAGRAM):   label S_NumOfProducts = 'Standard: NumOfProducts' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H16 = 'Hidden: H1=6' ;
MPRINT(EM_DIAGRAM):   label H17 = 'Hidden: H1=7' ;
MPRINT(EM_DIAGRAM):   label H18 = 'Hidden: H1=8' ;
MPRINT(EM_DIAGRAM):   label I_Churned = 'Into: Churned' ;
MPRINT(EM_DIAGRAM):   label U_Churned = 'Unnormalized Into: Churned' ;
MPRINT(EM_DIAGRAM):   label P_ChurnedYes = 'Predicted: Churned=Yes' ;
MPRINT(EM_DIAGRAM):   label P_ChurnedNo = 'Predicted: Churned=No' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
MPRINT(EM_DIAGRAM):   IF NMISS( Age_Zscore , CountrySpain , EstimatedSal_Zscore , GenderFemale , HasCreditCardNo , IsActiveMemberNo , NumOfProducts ) THEN DO;
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(EM_DIAGRAM):   S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(EM_DIAGRAM):   S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(EM_DIAGRAM):   S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(EM_DIAGRAM):   S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(EM_DIAGRAM):   S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(EM_DIAGRAM):   S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   IF MISSING( Age_Zscore ) THEN S_Age_Zscore = . ;
MPRINT(EM_DIAGRAM):   ELSE S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(EM_DIAGRAM):   IF MISSING( CountrySpain ) THEN S_CountrySpain = . ;
MPRINT(EM_DIAGRAM):   ELSE S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(EM_DIAGRAM):   IF MISSING( EstimatedSal_Zscore ) THEN S_EstimatedSal_Zscore = . ;
MPRINT(EM_DIAGRAM):   ELSE S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(EM_DIAGRAM):   IF MISSING( GenderFemale ) THEN S_GenderFemale = . ;
MPRINT(EM_DIAGRAM):   ELSE S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(EM_DIAGRAM):   IF MISSING( HasCreditCardNo ) THEN S_HasCreditCardNo = . ;
MPRINT(EM_DIAGRAM):   ELSE S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(EM_DIAGRAM):   IF MISSING( IsActiveMemberNo ) THEN S_IsActiveMemberNo = . ;
MPRINT(EM_DIAGRAM):   ELSE S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(EM_DIAGRAM):   IF MISSING( NumOfProducts ) THEN S_NumOfProducts = . ;
MPRINT(EM_DIAGRAM):   ELSE S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   H11 = -0.71664347354229 * S_Age_Zscore + 0.02082585197224 * S_CountrySpain + -0.16408245331366 * S_EstimatedSal_Zscore + -0.03085431918445 * S_GenderFemale + 0.09978786102725 * S_HasCreditCardNo + 0.42999994088264 * 
S_IsActiveMemberNo + -2.54418130750709 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H12 = -0.30771718442849 * S_Age_Zscore + 0.16897714290138 * S_CountrySpain + -0.11012870811229 * S_EstimatedSal_Zscore + 0.11689299599059 * S_GenderFemale + 0.13057370727213 * S_HasCreditCardNo + -0.62266427263493 * 
S_IsActiveMemberNo + 1.01224671133994 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H13 = -1.28048790326506 * S_Age_Zscore + 0.97388280256631 * S_CountrySpain + -0.8380818336472 * S_EstimatedSal_Zscore + 0.62525532564768 * S_GenderFemale + -0.01135632230573 * S_HasCreditCardNo + 0.96730908991183 * S_IsActiveMemberNo 
+ -0.9562519665766 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H14 = 1.09516600333059 * S_Age_Zscore + -0.45969961734479 * S_CountrySpain + 0.83780739956718 * S_EstimatedSal_Zscore + 0.11632377022107 * S_GenderFemale + 0.43730931130838 * S_HasCreditCardNo + -1.0055252405879 * S_IsActiveMemberNo 
+ -0.71687466686388 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H15 = -1.01837408165083 * S_Age_Zscore + 0.07338947994978 * S_CountrySpain + 0.12019990583006 * S_EstimatedSal_Zscore + 0.07624759104505 * S_GenderFemale + 0.01771719658967 * S_HasCreditCardNo + 0.12822782407198 * S_IsActiveMemberNo 
+ -0.08155273326944 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H16 = -0.07956717553368 * S_Age_Zscore + -0.07861879461781 * S_CountrySpain + -0.0651138120323 * S_EstimatedSal_Zscore + -0.16446292078835 * S_GenderFemale + -0.124613333726 * S_HasCreditCardNo + -0.96966690687134 * 
S_IsActiveMemberNo + -0.43431361497963 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H17 = 0.88306049852399 * S_Age_Zscore + 0.05397589553663 * S_CountrySpain + -0.2865299852198 * S_EstimatedSal_Zscore + -0.72121322084594 * S_GenderFemale + -0.17491069706417 * S_HasCreditCardNo + 2.06126541005056 * S_IsActiveMemberNo 
+ -0.5283578443334 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H18 = -1.32324793675974 * S_Age_Zscore + -0.71149672826928 * S_CountrySpain + 0.90060440143191 * S_EstimatedSal_Zscore + 0.13880767734573 * S_GenderFemale + -0.796651590728 * S_HasCreditCardNo + -0.98040861338671 * S_IsActiveMemberNo 
+ -0.18556141755479 * S_NumOfProducts ;
MPRINT(EM_DIAGRAM):   H11 = -0.50273458897886 + H11 ;
MPRINT(EM_DIAGRAM):   H12 = -1.66240849092297 + H12 ;
MPRINT(EM_DIAGRAM):   H13 = -0.5253375938445 + H13 ;
MPRINT(EM_DIAGRAM):   H14 = 0.92277572510213 + H14 ;
MPRINT(EM_DIAGRAM):   H15 = 0.48472119485229 + H15 ;
MPRINT(EM_DIAGRAM):   H16 = 0.81753210571317 + H16 ;
MPRINT(EM_DIAGRAM):   H17 = 1.58551112819418 + H17 ;
MPRINT(EM_DIAGRAM):   H18 = 1.08798825212916 + H18 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
MPRINT(EM_DIAGRAM):   H16 = TANH(H16 );
MPRINT(EM_DIAGRAM):   H17 = TANH(H17 );
MPRINT(EM_DIAGRAM):   H18 = TANH(H18 );
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   H11 = .;
MPRINT(EM_DIAGRAM):   H12 = .;
MPRINT(EM_DIAGRAM):   H13 = .;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
MPRINT(EM_DIAGRAM):   H16 = .;
MPRINT(EM_DIAGRAM):   H17 = .;
MPRINT(EM_DIAGRAM):   H18 = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the Node Churned ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = 2.53421924508816 * H11 + 2.07345424375637 * H12 + -0.48564432462057 * H13 + -0.70675506598556 * H14 + -3.24974798800237 * H15 + -3.19911530582397 * H16 + -1.09357606138052 * H17 + 0.71767835440297 * H18 ;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = 2.45024576350668 + P_ChurnedYes ;
MPRINT(EM_DIAGRAM):   P_ChurnedNo = 0;
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_ChurnedYes , P_ChurnedNo );
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = EXP(P_ChurnedYes - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_ChurnedYes ;
MPRINT(EM_DIAGRAM):   P_ChurnedNo = EXP(P_ChurnedNo - _MAX_);
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_ChurnedNo ;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = P_ChurnedYes / _SUM_;
MPRINT(EM_DIAGRAM):   P_ChurnedNo = P_ChurnedNo / _SUM_;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ELSE DO;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = .;
MPRINT(EM_DIAGRAM):   P_ChurnedNo = .;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_ChurnedYes = 0.20360393832435;
MPRINT(EM_DIAGRAM):   P_ChurnedNo = 0.79639606167564;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_Churned AND U_Churned ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_ChurnedYes ;
MPRINT(EM_DIAGRAM):   I_Churned = "YES" ;
MPRINT(EM_DIAGRAM):   U_Churned = "Yes" ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_ChurnedNo ) THEN DO;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_ChurnedNo ;
MPRINT(EM_DIAGRAM):   I_Churned = "NO " ;
MPRINT(EM_DIAGRAM):   U_Churned = "No " ;
MPRINT(EM_DIAGRAM):   END;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   ********************************;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 H16 H17 H18 ;
MPRINT(EM_DIAGRAM):   drop S_:;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Model Compare Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: MdlComp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if (P_ChurnedYes ge 0.8454841178829) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.57822424858616) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.42672950132571) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.32042812123643) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.25883949379362) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.20812282955069) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.17228398226006) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.14302081535623) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 8;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.12130510173242) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 9;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.10144486231143) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 10;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.0865814416019) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 11;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.0739378900796) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 12;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.06104403452364) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 13;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.05178479326852) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 14;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.04323895171727) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 15;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.03657062619459) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 16;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.03015367803726) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 17;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.02420840106314) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 18;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (P_ChurnedYes ge 0.01698391702872) then do;
MPRINT(EM_DIAGRAM):   b_Churned = 19;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   b_Churned = 20;
MPRINT(EM_DIAGRAM):   end;
34679      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
34680      quit;
34681      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
34682      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
34683      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
34684      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1206 observations read from the data set WORK._TEMP.
NOTE: 1134 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 72 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT2_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Balance'n 'Churned'n 'Country'n 'CreditScore'n 'CustomerID'n 'EstimatedSalary'n 'Gender'n 'HasCreditCard'n 'IsActiveMember'n 'NumOfProducts'n 'Tenure'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:52:24;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Transform;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Trans;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Formula Code;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   Age_Zscore =(Age - 38.9218)/10.48781 ;
MPRINT(SCOREXML):   Balance_Zscore =(Balance - 76485.89)/62397.41 ;
MPRINT(SCOREXML):   Creditscore_Zscore =(CreditScore - 650.5288)/96.6533 ;
MPRINT(SCOREXML):   EstimatedSal_Zscore =(EstimatedSalary - 100090.2)/57510.49 ;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: VarClus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   label CountryFrance = 'Country=France' ;
MPRINT(SCOREXML):   label CountryGermany = 'Country=Germany' ;
MPRINT(SCOREXML):   label CountrySpain = 'Country=Spain' ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   CountryFrance = 0;
MPRINT(SCOREXML):   CountryGermany = 0;
MPRINT(SCOREXML):   CountrySpain = 0;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountrySpain = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryGermany = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   label GenderFemale = 'Gender=Female' ;
MPRINT(SCOREXML):   label GenderMale = 'Gender=Male' ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0;
MPRINT(SCOREXML):   GenderMale = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 1;
MPRINT(SCOREXML):   GenderMale = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   label HasCreditCardNo = 'HasCreditCard=No' ;
MPRINT(SCOREXML):   label HasCreditCardYes = 'HasCreditCard=Yes' ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 0;
MPRINT(SCOREXML):   HasCreditCardYes = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1;
MPRINT(SCOREXML):   HasCreditCardYes = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   label IsActiveMemberNo = 'IsActiveMember=No' ;
MPRINT(SCOREXML):   label IsActiveMemberYes = 'IsActiveMember=Yes' ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0;
MPRINT(SCOREXML):   IsActiveMemberYes = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 1;
MPRINT(SCOREXML):   IsActiveMemberYes = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   /*-------------------------------------------------*/ /* Varclus Score Code Begins*/ /*-------------------------------------------------*/ Clus1 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 1------ */ Clus2 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 2------ */ Clus3 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 3------ */ Clus4 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 4------ */ Clus5 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 5------ */ Clus6 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 6------ */ Clus7 = 0 ;
MPRINT(SCOREXML):   /*---Cluster Component 7------ */ Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
MPRINT(SCOREXML):   Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
MPRINT(SCOREXML):   Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
MPRINT(SCOREXML):   Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
MPRINT(SCOREXML):   Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
MPRINT(SCOREXML):   Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
MPRINT(SCOREXML):   Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
MPRINT(SCOREXML):   Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
MPRINT(SCOREXML):   Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
MPRINT(SCOREXML):   Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
MPRINT(SCOREXML):   Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
MPRINT(SCOREXML):   Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
MPRINT(SCOREXML):   Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
MPRINT(SCOREXML):   Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
MPRINT(SCOREXML):   Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Neural;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Neural;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   ***********************************;
MPRINT(SCOREXML):   *** Begin Scoring Code for Neural;
MPRINT(SCOREXML):   ***********************************;
MPRINT(SCOREXML):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCOREXML):   _DM_BAD = 0;
MPRINT(SCOREXML):   _NOCL_ = .;
MPRINT(SCOREXML):   _MAX_ = .;
MPRINT(SCOREXML):   _MAXP_ = .;
MPRINT(SCOREXML):   _SUM_ = .;
MPRINT(SCOREXML):   _NTRIALS = .;
MPRINT(SCOREXML):   _EPS = 1E-10;
MPRINT(SCOREXML):   LENGTH _WARN_ $4 I_Churned $ 3 U_Churned $ 3 ;
MPRINT(SCOREXML):   label S_Age_Zscore = 'Standard: Age_Zscore' ;
MPRINT(SCOREXML):   label S_CountrySpain = 'Standard: CountrySpain' ;
MPRINT(SCOREXML):   label S_EstimatedSal_Zscore = 'Standard: EstimatedSal_Zscore' ;
MPRINT(SCOREXML):   label S_GenderFemale = 'Standard: GenderFemale' ;
MPRINT(SCOREXML):   label S_HasCreditCardNo = 'Standard: HasCreditCardNo' ;
MPRINT(SCOREXML):   label S_IsActiveMemberNo = 'Standard: IsActiveMemberNo' ;
MPRINT(SCOREXML):   label S_NumOfProducts = 'Standard: NumOfProducts' ;
MPRINT(SCOREXML):   label H11 = 'Hidden: H1=1' ;
MPRINT(SCOREXML):   label H12 = 'Hidden: H1=2' ;
MPRINT(SCOREXML):   label H13 = 'Hidden: H1=3' ;
MPRINT(SCOREXML):   label H14 = 'Hidden: H1=4' ;
MPRINT(SCOREXML):   label H15 = 'Hidden: H1=5' ;
MPRINT(SCOREXML):   label H16 = 'Hidden: H1=6' ;
MPRINT(SCOREXML):   label H17 = 'Hidden: H1=7' ;
MPRINT(SCOREXML):   label H18 = 'Hidden: H1=8' ;
MPRINT(SCOREXML):   label I_Churned = 'Into: Churned' ;
MPRINT(SCOREXML):   label U_Churned = 'Unnormalized Into: Churned' ;
MPRINT(SCOREXML):   label P_ChurnedYes = 'Predicted: Churned=Yes' ;
MPRINT(SCOREXML):   label P_ChurnedNo = 'Predicted: Churned=No' ;
MPRINT(SCOREXML):   label _WARN_ = "Warnings";
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Checking missing input Interval *** *************************;
MPRINT(SCOREXML):   IF NMISS( Age_Zscore , CountrySpain , EstimatedSal_Zscore , GenderFemale , HasCreditCardNo , IsActiveMemberNo , NumOfProducts ) THEN DO;
MPRINT(SCOREXML):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node intvl ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(SCOREXML):   S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(SCOREXML):   S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(SCOREXML):   S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(SCOREXML):   S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(SCOREXML):   S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(SCOREXML):   S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   IF MISSING( Age_Zscore ) THEN S_Age_Zscore = . ;
MPRINT(SCOREXML):   ELSE S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(SCOREXML):   IF MISSING( CountrySpain ) THEN S_CountrySpain = . ;
MPRINT(SCOREXML):   ELSE S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(SCOREXML):   IF MISSING( EstimatedSal_Zscore ) THEN S_EstimatedSal_Zscore = . ;
MPRINT(SCOREXML):   ELSE S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(SCOREXML):   IF MISSING( GenderFemale ) THEN S_GenderFemale = . ;
MPRINT(SCOREXML):   ELSE S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(SCOREXML):   IF MISSING( HasCreditCardNo ) THEN S_HasCreditCardNo = . ;
MPRINT(SCOREXML):   ELSE S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(SCOREXML):   IF MISSING( IsActiveMemberNo ) THEN S_IsActiveMemberNo = . ;
MPRINT(SCOREXML):   ELSE S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(SCOREXML):   IF MISSING( NumOfProducts ) THEN S_NumOfProducts = . ;
MPRINT(SCOREXML):   ELSE S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node H1 ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   H11 = -0.71664347354229 * S_Age_Zscore + 0.02082585197224 * S_CountrySpain + -0.16408245331366 * S_EstimatedSal_Zscore + -0.03085431918445 * S_GenderFemale + 0.09978786102725 * S_HasCreditCardNo + 0.42999994088264 * S_IsActiveMemberNo 
+ -2.54418130750709 * S_NumOfProducts ;
MPRINT(SCOREXML):   H12 = -0.30771718442849 * S_Age_Zscore + 0.16897714290138 * S_CountrySpain + -0.11012870811229 * S_EstimatedSal_Zscore + 0.11689299599059 * S_GenderFemale + 0.13057370727213 * S_HasCreditCardNo + -0.62266427263493 * S_IsActiveMemberNo 
+ 1.01224671133994 * S_NumOfProducts ;
MPRINT(SCOREXML):   H13 = -1.28048790326506 * S_Age_Zscore + 0.97388280256631 * S_CountrySpain + -0.8380818336472 * S_EstimatedSal_Zscore + 0.62525532564768 * S_GenderFemale + -0.01135632230573 * S_HasCreditCardNo + 0.96730908991183 * S_IsActiveMemberNo + 
-0.9562519665766 * S_NumOfProducts ;
MPRINT(SCOREXML):   H14 = 1.09516600333059 * S_Age_Zscore + -0.45969961734479 * S_CountrySpain + 0.83780739956718 * S_EstimatedSal_Zscore + 0.11632377022107 * S_GenderFemale + 0.43730931130838 * S_HasCreditCardNo + -1.0055252405879 * S_IsActiveMemberNo + 
-0.71687466686388 * S_NumOfProducts ;
MPRINT(SCOREXML):   H15 = -1.01837408165083 * S_Age_Zscore + 0.07338947994978 * S_CountrySpain + 0.12019990583006 * S_EstimatedSal_Zscore + 0.07624759104505 * S_GenderFemale + 0.01771719658967 * S_HasCreditCardNo + 0.12822782407198 * S_IsActiveMemberNo + 
-0.08155273326944 * S_NumOfProducts ;
MPRINT(SCOREXML):   H16 = -0.07956717553368 * S_Age_Zscore + -0.07861879461781 * S_CountrySpain + -0.0651138120323 * S_EstimatedSal_Zscore + -0.16446292078835 * S_GenderFemale + -0.124613333726 * S_HasCreditCardNo + -0.96966690687134 * S_IsActiveMemberNo 
+ -0.43431361497963 * S_NumOfProducts ;
MPRINT(SCOREXML):   H17 = 0.88306049852399 * S_Age_Zscore + 0.05397589553663 * S_CountrySpain + -0.2865299852198 * S_EstimatedSal_Zscore + -0.72121322084594 * S_GenderFemale + -0.17491069706417 * S_HasCreditCardNo + 2.06126541005056 * S_IsActiveMemberNo + 
-0.5283578443334 * S_NumOfProducts ;
MPRINT(SCOREXML):   H18 = -1.32324793675974 * S_Age_Zscore + -0.71149672826928 * S_CountrySpain + 0.90060440143191 * S_EstimatedSal_Zscore + 0.13880767734573 * S_GenderFemale + -0.796651590728 * S_HasCreditCardNo + -0.98040861338671 * S_IsActiveMemberNo + 
-0.18556141755479 * S_NumOfProducts ;
MPRINT(SCOREXML):   H11 = -0.50273458897886 + H11 ;
MPRINT(SCOREXML):   H12 = -1.66240849092297 + H12 ;
MPRINT(SCOREXML):   H13 = -0.5253375938445 + H13 ;
MPRINT(SCOREXML):   H14 = 0.92277572510213 + H14 ;
MPRINT(SCOREXML):   H15 = 0.48472119485229 + H15 ;
MPRINT(SCOREXML):   H16 = 0.81753210571317 + H16 ;
MPRINT(SCOREXML):   H17 = 1.58551112819418 + H17 ;
MPRINT(SCOREXML):   H18 = 1.08798825212916 + H18 ;
MPRINT(SCOREXML):   H11 = TANH(H11 );
MPRINT(SCOREXML):   H12 = TANH(H12 );
MPRINT(SCOREXML):   H13 = TANH(H13 );
MPRINT(SCOREXML):   H14 = TANH(H14 );
MPRINT(SCOREXML):   H15 = TANH(H15 );
MPRINT(SCOREXML):   H16 = TANH(H16 );
MPRINT(SCOREXML):   H17 = TANH(H17 );
MPRINT(SCOREXML):   H18 = TANH(H18 );
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   H11 = .;
MPRINT(SCOREXML):   H12 = .;
MPRINT(SCOREXML):   H13 = .;
MPRINT(SCOREXML):   H14 = .;
MPRINT(SCOREXML):   H15 = .;
MPRINT(SCOREXML):   H16 = .;
MPRINT(SCOREXML):   H17 = .;
MPRINT(SCOREXML):   H18 = .;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node Churned ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   P_ChurnedYes = 2.53421924508816 * H11 + 2.07345424375637 * H12 + -0.48564432462057 * H13 + -0.70675506598556 * H14 + -3.24974798800237 * H15 + -3.19911530582397 * H16 + -1.09357606138052 * H17 + 0.71767835440297 * H18 ;
MPRINT(SCOREXML):   P_ChurnedYes = 2.45024576350668 + P_ChurnedYes ;
MPRINT(SCOREXML):   P_ChurnedNo = 0;
MPRINT(SCOREXML):   _MAX_ = MAX (P_ChurnedYes , P_ChurnedNo );
MPRINT(SCOREXML):   _SUM_ = 0.;
MPRINT(SCOREXML):   P_ChurnedYes = EXP(P_ChurnedYes - _MAX_);
MPRINT(SCOREXML):   _SUM_ = _SUM_ + P_ChurnedYes ;
MPRINT(SCOREXML):   P_ChurnedNo = EXP(P_ChurnedNo - _MAX_);
MPRINT(SCOREXML):   _SUM_ = _SUM_ + P_ChurnedNo ;
MPRINT(SCOREXML):   P_ChurnedYes = P_ChurnedYes / _SUM_;
MPRINT(SCOREXML):   P_ChurnedNo = P_ChurnedNo / _SUM_;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   P_ChurnedYes = .;
MPRINT(SCOREXML):   P_ChurnedNo = .;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCOREXML):   P_ChurnedYes = 0.20360393832435;
MPRINT(SCOREXML):   P_ChurnedNo = 0.79639606167564;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the I_Churned AND U_Churned ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   _MAXP_ = P_ChurnedYes ;
MPRINT(SCOREXML):   I_Churned = "YES" ;
MPRINT(SCOREXML):   U_Churned = "Yes" ;
MPRINT(SCOREXML):   IF( _MAXP_ LT P_ChurnedNo ) THEN DO;
MPRINT(SCOREXML):   _MAXP_ = P_ChurnedNo ;
MPRINT(SCOREXML):   I_Churned = "NO " ;
MPRINT(SCOREXML):   U_Churned = "No " ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ********************************;
MPRINT(SCOREXML):   *** End Scoring Code for Neural;
MPRINT(SCOREXML):   ********************************;
MPRINT(SCOREXML):   drop H11 H12 H13 H14 H15 H16 H17 H18 ;
MPRINT(SCOREXML):   drop S_:;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_ChurnedYes ge 0.8454841178829) then do;
MPRINT(SCOREXML):   b_Churned = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.57822424858616) then do;
MPRINT(SCOREXML):   b_Churned = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.42672950132571) then do;
MPRINT(SCOREXML):   b_Churned = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.32042812123643) then do;
MPRINT(SCOREXML):   b_Churned = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.25883949379362) then do;
MPRINT(SCOREXML):   b_Churned = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.20812282955069) then do;
MPRINT(SCOREXML):   b_Churned = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.17228398226006) then do;
MPRINT(SCOREXML):   b_Churned = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.14302081535623) then do;
MPRINT(SCOREXML):   b_Churned = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.12130510173242) then do;
MPRINT(SCOREXML):   b_Churned = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.10144486231143) then do;
MPRINT(SCOREXML):   b_Churned = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.0865814416019) then do;
MPRINT(SCOREXML):   b_Churned = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.0739378900796) then do;
MPRINT(SCOREXML):   b_Churned = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.06104403452364) then do;
MPRINT(SCOREXML):   b_Churned = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.05178479326852) then do;
MPRINT(SCOREXML):   b_Churned = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.04323895171727) then do;
MPRINT(SCOREXML):   b_Churned = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.03657062619459) then do;
MPRINT(SCOREXML):   b_Churned = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.03015367803726) then do;
MPRINT(SCOREXML):   b_Churned = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.02420840106314) then do;
MPRINT(SCOREXML):   b_Churned = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.01698391702872) then do;
MPRINT(SCOREXML):   b_Churned = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Churned = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT2_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT2_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT2_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents;
MPRINT(SCOREXML):   * Project Name: CA Assignment 3;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: Task 1 and 2;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 24OCT2020:18:52:24;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Statistics Exploration;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Stat;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Transform;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Trans;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Formula Code;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   Age_Zscore =(Age - 38.9218)/10.48781 ;
MPRINT(SCOREXML):   Balance_Zscore =(Balance - 76485.89)/62397.41 ;
MPRINT(SCOREXML):   Creditscore_Zscore =(CreditScore - 650.5288)/96.6533 ;
MPRINT(SCOREXML):   EstimatedSal_Zscore =(EstimatedSalary - 100090.2)/57510.49 ;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Partition Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: Part;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: VarClus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Generate dummy variables for Country ;
MPRINT(SCOREXML):   label CountryFrance = 'Country=France' ;
MPRINT(SCOREXML):   label CountryGermany = 'Country=Germany' ;
MPRINT(SCOREXML):   label CountrySpain = 'Country=Spain' ;
MPRINT(SCOREXML):   *** encoding is sparse, initialize to zero;
MPRINT(SCOREXML):   CountryFrance = 0;
MPRINT(SCOREXML):   CountryGermany = 0;
MPRINT(SCOREXML):   CountrySpain = 0;
MPRINT(SCOREXML):   if missing( Country ) then do;
MPRINT(SCOREXML):   CountryFrance = .;
MPRINT(SCOREXML):   CountryGermany = .;
MPRINT(SCOREXML):   CountrySpain = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm7 $ 7;
MPRINT(SCOREXML):   drop _dm7 ;
MPRINT(SCOREXML):   _dm7 = put( Country , $7. );
MPRINT(DMNORMIP):   call dmnorm(_dm7,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm7 = 'FRANCE' then do;
MPRINT(SCOREXML):   CountryFrance = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'SPAIN' then do;
MPRINT(SCOREXML):   CountrySpain = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm7 = 'GERMANY' then do;
MPRINT(SCOREXML):   CountryGermany = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Gender ;
MPRINT(SCOREXML):   label GenderFemale = 'Gender=Female' ;
MPRINT(SCOREXML):   label GenderMale = 'Gender=Male' ;
MPRINT(SCOREXML):   if missing( Gender ) then do;
MPRINT(SCOREXML):   GenderFemale = .;
MPRINT(SCOREXML):   GenderMale = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm6 $ 6;
MPRINT(SCOREXML):   drop _dm6 ;
MPRINT(SCOREXML):   _dm6 = put( Gender , $6. );
MPRINT(DMNORMIP):   call dmnorm(_dm6,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm6 = 'MALE' then do;
MPRINT(SCOREXML):   GenderFemale = 0;
MPRINT(SCOREXML):   GenderMale = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm6 = 'FEMALE' then do;
MPRINT(SCOREXML):   GenderFemale = 1;
MPRINT(SCOREXML):   GenderMale = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for HasCreditCard ;
MPRINT(SCOREXML):   label HasCreditCardNo = 'HasCreditCard=No' ;
MPRINT(SCOREXML):   label HasCreditCardYes = 'HasCreditCard=Yes' ;
MPRINT(SCOREXML):   if missing( HasCreditCard ) then do;
MPRINT(SCOREXML):   HasCreditCardNo = .;
MPRINT(SCOREXML):   HasCreditCardYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( HasCreditCard , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 0;
MPRINT(SCOREXML):   HasCreditCardYes = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   HasCreditCardNo = 1;
MPRINT(SCOREXML):   HasCreditCardYes = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for IsActiveMember ;
MPRINT(SCOREXML):   label IsActiveMemberNo = 'IsActiveMember=No' ;
MPRINT(SCOREXML):   label IsActiveMemberYes = 'IsActiveMember=Yes' ;
MPRINT(SCOREXML):   if missing( IsActiveMember ) then do;
MPRINT(SCOREXML):   IsActiveMemberNo = .;
MPRINT(SCOREXML):   IsActiveMemberYes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( IsActiveMember , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 0;
MPRINT(SCOREXML):   IsActiveMemberYes = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   IsActiveMemberNo = 1;
MPRINT(SCOREXML):   IsActiveMemberYes = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   delete;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   Clus1 = 0 ;
MPRINT(SCOREXML):   Clus2 = 0 ;
MPRINT(SCOREXML):   Clus3 = 0 ;
MPRINT(SCOREXML):   Clus4 = 0 ;
MPRINT(SCOREXML):   Clus5 = 0 ;
MPRINT(SCOREXML):   Clus6 = 0 ;
MPRINT(SCOREXML):   Clus7 = 0 ;
MPRINT(SCOREXML):   Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
MPRINT(SCOREXML):   Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
MPRINT(SCOREXML):   Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
MPRINT(SCOREXML):   Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
MPRINT(SCOREXML):   Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
MPRINT(SCOREXML):   Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
MPRINT(SCOREXML):   Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
MPRINT(SCOREXML):   Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
MPRINT(SCOREXML):   Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
MPRINT(SCOREXML):   Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
MPRINT(SCOREXML):   Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
MPRINT(SCOREXML):   Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
MPRINT(SCOREXML):   Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
MPRINT(SCOREXML):   Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
MPRINT(SCOREXML):   Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Neural;
MPRINT(SCOREXML):   * TYPE: MODEL;
MPRINT(SCOREXML):   * NODE: Neural;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   ***********************************;
MPRINT(SCOREXML):   *** Begin Scoring Code for Neural;
MPRINT(SCOREXML):   ***********************************;
MPRINT(SCOREXML):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(SCOREXML):   _DM_BAD = 0;
MPRINT(SCOREXML):   _NOCL_ = .;
MPRINT(SCOREXML):   _MAX_ = .;
MPRINT(SCOREXML):   _MAXP_ = .;
MPRINT(SCOREXML):   _SUM_ = .;
MPRINT(SCOREXML):   _NTRIALS = .;
MPRINT(SCOREXML):   _EPS = 1E-10;
MPRINT(SCOREXML):   LENGTH _WARN_ $4 I_Churned $ 3 U_Churned $ 3 ;
MPRINT(SCOREXML):   label S_Age_Zscore = 'Standard: Age_Zscore' ;
MPRINT(SCOREXML):   label S_CountrySpain = 'Standard: CountrySpain' ;
MPRINT(SCOREXML):   label S_EstimatedSal_Zscore = 'Standard: EstimatedSal_Zscore' ;
MPRINT(SCOREXML):   label S_GenderFemale = 'Standard: GenderFemale' ;
MPRINT(SCOREXML):   label S_HasCreditCardNo = 'Standard: HasCreditCardNo' ;
MPRINT(SCOREXML):   label S_IsActiveMemberNo = 'Standard: IsActiveMemberNo' ;
MPRINT(SCOREXML):   label S_NumOfProducts = 'Standard: NumOfProducts' ;
MPRINT(SCOREXML):   label H11 = 'Hidden: H1=1' ;
MPRINT(SCOREXML):   label H12 = 'Hidden: H1=2' ;
MPRINT(SCOREXML):   label H13 = 'Hidden: H1=3' ;
MPRINT(SCOREXML):   label H14 = 'Hidden: H1=4' ;
MPRINT(SCOREXML):   label H15 = 'Hidden: H1=5' ;
MPRINT(SCOREXML):   label H16 = 'Hidden: H1=6' ;
MPRINT(SCOREXML):   label H17 = 'Hidden: H1=7' ;
MPRINT(SCOREXML):   label H18 = 'Hidden: H1=8' ;
MPRINT(SCOREXML):   label I_Churned = 'Into: Churned' ;
MPRINT(SCOREXML):   label U_Churned = 'Unnormalized Into: Churned' ;
MPRINT(SCOREXML):   label P_ChurnedYes = 'Predicted: Churned=Yes' ;
MPRINT(SCOREXML):   label P_ChurnedNo = 'Predicted: Churned=No' ;
MPRINT(SCOREXML):   label _WARN_ = "Warnings";
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Checking missing input Interval *** *************************;
MPRINT(SCOREXML):   IF NMISS( Age_Zscore , CountrySpain , EstimatedSal_Zscore , GenderFemale , HasCreditCardNo , IsActiveMemberNo , NumOfProducts ) THEN DO;
MPRINT(SCOREXML):   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node intvl ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(SCOREXML):   S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(SCOREXML):   S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(SCOREXML):   S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(SCOREXML):   S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(SCOREXML):   S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(SCOREXML):   S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   IF MISSING( Age_Zscore ) THEN S_Age_Zscore = . ;
MPRINT(SCOREXML):   ELSE S_Age_Zscore = -0.00063789817181 + 1.00173859197331 * Age_Zscore ;
MPRINT(SCOREXML):   IF MISSING( CountrySpain ) THEN S_CountrySpain = . ;
MPRINT(SCOREXML):   ELSE S_CountrySpain = -0.57994201539318 + 2.30393200653986 * CountrySpain ;
MPRINT(SCOREXML):   IF MISSING( EstimatedSal_Zscore ) THEN S_EstimatedSal_Zscore = . ;
MPRINT(SCOREXML):   ELSE S_EstimatedSal_Zscore = -0.0034650897459 + 0.99846517787452 * EstimatedSal_Zscore ;
MPRINT(SCOREXML):   IF MISSING( GenderFemale ) THEN S_GenderFemale = . ;
MPRINT(SCOREXML):   ELSE S_GenderFemale = -0.91524475798131 + 2.0076456936485 * GenderFemale ;
MPRINT(SCOREXML):   IF MISSING( HasCreditCardNo ) THEN S_HasCreditCardNo = . ;
MPRINT(SCOREXML):   ELSE S_HasCreditCardNo = -0.63758078782364 + 2.20571811108914 * HasCreditCardNo ;
MPRINT(SCOREXML):   IF MISSING( IsActiveMemberNo ) THEN S_IsActiveMemberNo = . ;
MPRINT(SCOREXML):   ELSE S_IsActiveMemberNo = -0.9646770645575 + 2.00110082408981 * IsActiveMemberNo ;
MPRINT(SCOREXML):   IF MISSING( NumOfProducts ) THEN S_NumOfProducts = . ;
MPRINT(SCOREXML):   ELSE S_NumOfProducts = -2.63256254497297 + 1.72020929589579 * NumOfProducts ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node H1 ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   H11 = -0.71664347354229 * S_Age_Zscore + 0.02082585197224 * S_CountrySpain + -0.16408245331366 * S_EstimatedSal_Zscore + -0.03085431918445 * S_GenderFemale + 0.09978786102725 * S_HasCreditCardNo + 0.42999994088264 * S_IsActiveMemberNo 
+ -2.54418130750709 * S_NumOfProducts ;
MPRINT(SCOREXML):   H12 = -0.30771718442849 * S_Age_Zscore + 0.16897714290138 * S_CountrySpain + -0.11012870811229 * S_EstimatedSal_Zscore + 0.11689299599059 * S_GenderFemale + 0.13057370727213 * S_HasCreditCardNo + -0.62266427263493 * S_IsActiveMemberNo 
+ 1.01224671133994 * S_NumOfProducts ;
MPRINT(SCOREXML):   H13 = -1.28048790326506 * S_Age_Zscore + 0.97388280256631 * S_CountrySpain + -0.8380818336472 * S_EstimatedSal_Zscore + 0.62525532564768 * S_GenderFemale + -0.01135632230573 * S_HasCreditCardNo + 0.96730908991183 * S_IsActiveMemberNo + 
-0.9562519665766 * S_NumOfProducts ;
MPRINT(SCOREXML):   H14 = 1.09516600333059 * S_Age_Zscore + -0.45969961734479 * S_CountrySpain + 0.83780739956718 * S_EstimatedSal_Zscore + 0.11632377022107 * S_GenderFemale + 0.43730931130838 * S_HasCreditCardNo + -1.0055252405879 * S_IsActiveMemberNo + 
-0.71687466686388 * S_NumOfProducts ;
MPRINT(SCOREXML):   H15 = -1.01837408165083 * S_Age_Zscore + 0.07338947994978 * S_CountrySpain + 0.12019990583006 * S_EstimatedSal_Zscore + 0.07624759104505 * S_GenderFemale + 0.01771719658967 * S_HasCreditCardNo + 0.12822782407198 * S_IsActiveMemberNo + 
-0.08155273326944 * S_NumOfProducts ;
MPRINT(SCOREXML):   H16 = -0.07956717553368 * S_Age_Zscore + -0.07861879461781 * S_CountrySpain + -0.0651138120323 * S_EstimatedSal_Zscore + -0.16446292078835 * S_GenderFemale + -0.124613333726 * S_HasCreditCardNo + -0.96966690687134 * S_IsActiveMemberNo 
+ -0.43431361497963 * S_NumOfProducts ;
MPRINT(SCOREXML):   H17 = 0.88306049852399 * S_Age_Zscore + 0.05397589553663 * S_CountrySpain + -0.2865299852198 * S_EstimatedSal_Zscore + -0.72121322084594 * S_GenderFemale + -0.17491069706417 * S_HasCreditCardNo + 2.06126541005056 * S_IsActiveMemberNo + 
-0.5283578443334 * S_NumOfProducts ;
MPRINT(SCOREXML):   H18 = -1.32324793675974 * S_Age_Zscore + -0.71149672826928 * S_CountrySpain + 0.90060440143191 * S_EstimatedSal_Zscore + 0.13880767734573 * S_GenderFemale + -0.796651590728 * S_HasCreditCardNo + -0.98040861338671 * S_IsActiveMemberNo + 
-0.18556141755479 * S_NumOfProducts ;
MPRINT(SCOREXML):   H11 = -0.50273458897886 + H11 ;
MPRINT(SCOREXML):   H12 = -1.66240849092297 + H12 ;
MPRINT(SCOREXML):   H13 = -0.5253375938445 + H13 ;
MPRINT(SCOREXML):   H14 = 0.92277572510213 + H14 ;
MPRINT(SCOREXML):   H15 = 0.48472119485229 + H15 ;
MPRINT(SCOREXML):   H16 = 0.81753210571317 + H16 ;
MPRINT(SCOREXML):   H17 = 1.58551112819418 + H17 ;
MPRINT(SCOREXML):   H18 = 1.08798825212916 + H18 ;
MPRINT(SCOREXML):   H11 = TANH(H11 );
MPRINT(SCOREXML):   H12 = TANH(H12 );
MPRINT(SCOREXML):   H13 = TANH(H13 );
MPRINT(SCOREXML):   H14 = TANH(H14 );
MPRINT(SCOREXML):   H15 = TANH(H15 );
MPRINT(SCOREXML):   H16 = TANH(H16 );
MPRINT(SCOREXML):   H17 = TANH(H17 );
MPRINT(SCOREXML):   H18 = TANH(H18 );
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   H11 = .;
MPRINT(SCOREXML):   H12 = .;
MPRINT(SCOREXML):   H13 = .;
MPRINT(SCOREXML):   H14 = .;
MPRINT(SCOREXML):   H15 = .;
MPRINT(SCOREXML):   H16 = .;
MPRINT(SCOREXML):   H17 = .;
MPRINT(SCOREXML):   H18 = .;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the Node Churned ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   IF _DM_BAD EQ 0 THEN DO;
MPRINT(SCOREXML):   P_ChurnedYes = 2.53421924508816 * H11 + 2.07345424375637 * H12 + -0.48564432462057 * H13 + -0.70675506598556 * H14 + -3.24974798800237 * H15 + -3.19911530582397 * H16 + -1.09357606138052 * H17 + 0.71767835440297 * H18 ;
MPRINT(SCOREXML):   P_ChurnedYes = 2.45024576350668 + P_ChurnedYes ;
MPRINT(SCOREXML):   P_ChurnedNo = 0;
MPRINT(SCOREXML):   _MAX_ = MAX (P_ChurnedYes , P_ChurnedNo );
MPRINT(SCOREXML):   _SUM_ = 0.;
MPRINT(SCOREXML):   P_ChurnedYes = EXP(P_ChurnedYes - _MAX_);
MPRINT(SCOREXML):   _SUM_ = _SUM_ + P_ChurnedYes ;
MPRINT(SCOREXML):   P_ChurnedNo = EXP(P_ChurnedNo - _MAX_);
MPRINT(SCOREXML):   _SUM_ = _SUM_ + P_ChurnedNo ;
MPRINT(SCOREXML):   P_ChurnedYes = P_ChurnedYes / _SUM_;
MPRINT(SCOREXML):   P_ChurnedNo = P_ChurnedNo / _SUM_;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ELSE DO;
MPRINT(SCOREXML):   P_ChurnedYes = .;
MPRINT(SCOREXML):   P_ChurnedNo = .;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(SCOREXML):   P_ChurnedYes = 0.20360393832435;
MPRINT(SCOREXML):   P_ChurnedNo = 0.79639606167564;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   *** Writing the I_Churned AND U_Churned ;
MPRINT(SCOREXML):   *** *************************;
MPRINT(SCOREXML):   _MAXP_ = P_ChurnedYes ;
MPRINT(SCOREXML):   I_Churned = "YES" ;
MPRINT(SCOREXML):   U_Churned = "Yes" ;
MPRINT(SCOREXML):   IF( _MAXP_ LT P_ChurnedNo ) THEN DO;
MPRINT(SCOREXML):   _MAXP_ = P_ChurnedNo ;
MPRINT(SCOREXML):   I_Churned = "NO " ;
MPRINT(SCOREXML):   U_Churned = "No " ;
MPRINT(SCOREXML):   END;
MPRINT(SCOREXML):   ********************************;
MPRINT(SCOREXML):   *** End Scoring Code for Neural;
MPRINT(SCOREXML):   ********************************;
MPRINT(SCOREXML):   drop H11 H12 H13 H14 H15 H16 H17 H18 ;
MPRINT(SCOREXML):   drop S_:;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Model Compare Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: MdlComp;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if (P_ChurnedYes ge 0.8454841178829) then do;
MPRINT(SCOREXML):   b_Churned = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.57822424858616) then do;
MPRINT(SCOREXML):   b_Churned = 2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.42672950132571) then do;
MPRINT(SCOREXML):   b_Churned = 3;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.32042812123643) then do;
MPRINT(SCOREXML):   b_Churned = 4;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.25883949379362) then do;
MPRINT(SCOREXML):   b_Churned = 5;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.20812282955069) then do;
MPRINT(SCOREXML):   b_Churned = 6;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.17228398226006) then do;
MPRINT(SCOREXML):   b_Churned = 7;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.14302081535623) then do;
MPRINT(SCOREXML):   b_Churned = 8;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.12130510173242) then do;
MPRINT(SCOREXML):   b_Churned = 9;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.10144486231143) then do;
MPRINT(SCOREXML):   b_Churned = 10;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.0865814416019) then do;
MPRINT(SCOREXML):   b_Churned = 11;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.0739378900796) then do;
MPRINT(SCOREXML):   b_Churned = 12;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.06104403452364) then do;
MPRINT(SCOREXML):   b_Churned = 13;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.05178479326852) then do;
MPRINT(SCOREXML):   b_Churned = 14;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.04323895171727) then do;
MPRINT(SCOREXML):   b_Churned = 15;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.03657062619459) then do;
MPRINT(SCOREXML):   b_Churned = 16;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.03015367803726) then do;
MPRINT(SCOREXML):   b_Churned = 17;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.02420840106314) then do;
MPRINT(SCOREXML):   b_Churned = 18;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if (P_ChurnedYes ge 0.01698391702872) then do;
MPRINT(SCOREXML):   b_Churned = 19;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   b_Churned = 20;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "10" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "26" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "10" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "10" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "26" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "26" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT2_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M20G45E8 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M20G45E8;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M20G45E8(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M20G45E8;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M20G45E8;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3BQ6_ZT NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1T4T9RP(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BQ6_ZT;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Target table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\target.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.target;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   length NODEID $32;
MPRINT(EM_DIAGRAM):   where upcase(NAME) in( "CHURNED" );
MPRINT(EM_DIAGRAM):   if upcase(NAME) eq "CHURNED" then NODEID = "Neural";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CHURNED" then do;
MPRINT(EM_DIAGRAM):   NAME = 'CHURNED';
MPRINT(EM_DIAGRAM):   CREATOR = '';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _emrprt "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\statistic.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data statistic;
MPRINT(EM_DIAGRAM):   length TARGET $32;
MPRINT(EM_DIAGRAM):   retain TARGET;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   if STAT = 'TARGET' then TARGET = LABEL;
MPRINT(EM_DIAGRAM):   if substr(stat, 1, 1)='_' then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=statistic NOTHREADS;
MPRINT(EM_DIAGRAM):   by stat target;
MPRINT(EM_DIAGRAM):   where stat in('_APROF_', '_ALOSS_', '_AROI_', '_NOBS_', '_ASE_', '_MISC_', '_MSE_');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=statistic out=_emrprt.statistic(drop=_LABEL_ rename=(COL1=VALUE _NAME_=TYPE));
MPRINT(EM_DIAGRAM):   by stat target;
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable COL1 in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT2 : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN05004";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT2_EMTRAINVARIABLE / view=WORK.FIMPORT2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT2_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   length LEVEL $10;
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   length DROP $1;
MPRINT(EM_DIAGRAM):   length ORDER $8;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_EMCMETADEFAULT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0Y6DQEW as select * from WORK.M2FXI16L order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0Y6DQEW as select * from WORK.M190VKT3 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0Y6DQEW compare=work._comp0Y6DQEW out=WORK._DIFF0N2S3XE noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10A_456_ as select * from WORK._DIFF0N2S3XE where NAME in (select NAME from WORK._DIFF0N2S3XE where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM07MBNI5 as select * from WORK._DIFF0N2S3XE where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0N2S3XE where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM07MBNI5 as select * from WORK._DIFF0N2S3XE where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0N2S3XE where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM07MBNI5;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM07MBNI5;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM07MBNI5;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM07MBNI5;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Stat : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:37 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Stat_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_EMTRAINVARIABLE / view=WORK.Stat_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CLASS / view=WORK.Stat_CLASS;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "Target"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TargetValue"n = "Target Level (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "CODE"n = " (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "TYPE"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "WITHINPCT"n = "Percent Within (N)";
MPRINT(EM_DIAGRAM):   label "LevelIndex"n = "Level Index (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_INTERVAL / view=WORK.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "Target"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TargetValue"n = "Target Level (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "P50"n = "Median (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "N"n = "Non Missing (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)(BEST8.3)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "ScaleDevMean"n = "Scaled Mean Deviation (N)";
MPRINT(EM_DIAGRAM):   label "MaxDev"n = "Maximum Deviation (N)";
MPRINT(EM_DIAGRAM):   label "LevelId"n = "Level Id (N)(BEST3.0)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CHIMEASURE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CHIMEASURE / view=WORK.Stat_CHIMEASURE;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVar"n = "Segment (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "SegmentId"n = "Segment Name:Value (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "CRAMERV"n = "Cramer's V (N)";
MPRINT(EM_DIAGRAM):   label "PROB"n = "Prob (N)(PVALUE6.4)";
MPRINT(EM_DIAGRAM):   label "CHIMEASURE"n = "Chi-Square (N)(10.4)";
MPRINT(EM_DIAGRAM):   label "DF"n = "Df (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "ORDEREDINPUTS"n = "Ordered Inputs (N)(5.0)";
MPRINT(EM_DIAGRAM):   label "groupcount"n = "Group (N)";
MPRINT(EM_DIAGRAM):   label "Plot"n = "Plot (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CHIMEASURE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_CHI2 OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_CHI2 / view=WORK.Stat_CHI2;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVar"n = "Segment (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "SegmentId"n = "Segment Name:Value (C)";
MPRINT(EM_DIAGRAM):   label "YVAR"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "XVAR"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "YTEXT"n = "Target: Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "XTEXT"n = "Input: Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "Y"n = "Target: Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "X"n = "Input: Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "CHISQUARE"n = "Chi-Square (N)";
MPRINT(EM_DIAGRAM):   label "LOGCHISQUARE"n = "Log Chi Square (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "XLabel"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CHI2(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Stat_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Stat_WORTH / view=WORK.Stat_WORTH;
MPRINT(EM_DIAGRAM):   label "Target"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "Name"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "StatVar"n = "Analysis Variable (N)(6.0)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "plot"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:38 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Stat_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("ID" "SEGMENT" "TARGET" "INPUT" "REJECTED" "PREDICT" "RESIDUAL" "DECISION" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base28XD072 as select * from WORK.M0J7BO1S order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp28XD072 as select * from WORK.M13ASL7U order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base28XD072 compare=work._comp28XD072 out=WORK._DIFF1OO8XE5 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "PART" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Trans : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:38 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN05110";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN05111";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Trans_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Trans_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_EMTRAINVARIABLE / view=WORK.Trans_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "METHOD"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "NUMBINS"n = "Number of Bins (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Trans_STATISTICS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_STATISTICS / view=WORK.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   label "SOURCE"n = "Source (C)";
MPRINT(EM_DIAGRAM):   label "_METHOD_"n = "Method (C)";
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "FORMULA"n = "Formula (C)";
MPRINT(EM_DIAGRAM):   label "NLEVEL"n = "Number of Levels (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Non Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_STATISTICS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Trans_FORMULA OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Trans_FORMULA / view=WORK.Trans_FORMULA;
MPRINT(EM_DIAGRAM):   label "Name"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "Formula"n = "Formula (C)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "Length"n = "Length (N)";
MPRINT(EM_DIAGRAM):   label "Format"n = "Format (C)";
MPRINT(EM_DIAGRAM):   label "Role"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "Level"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "Report"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "Label"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "nlevel"n = "Number of Levels (N)";
MPRINT(EM_DIAGRAM):   label "nmiss"n = "Missing (N)";
MPRINT(EM_DIAGRAM):   label "min"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "max"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "mean"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "std"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "skewness"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "kurtosis"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_FORMULA(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Trans_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length METHOD $12;
MPRINT(EM_DIAGRAM):   length NUMBINS 8;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("TARGET", "INPUT", "REJECTED", "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0RSAJ1L as select * from WORK.M1F7B7TK order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0RSAJ1L as select * from WORK.M34BT3CY order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0RSAJ1L compare=work._comp0RSAJ1L out=WORK._DIFF28063G4 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "VARCLUS" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Part : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Part_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Part_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_EMTRAINVARIABLE / view=WORK.Part_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "PARTITIONROLE"n = "Partition Role (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Part_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Part_CLASS / view=WORK.Part_CLASS;
MPRINT(EM_DIAGRAM):   label "DATA"n = "Data (C)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FORMATTEDVALUE"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Part_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length PARTITIONROLE $14;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0NP3BKB as select * from WORK.M1YGC6I9 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0NP3BKB as select * from WORK.M22AL88H order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0NP3BKB compare=work._comp0NP3BKB out=WORK._DIFF2EV8QP_ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "REG" 
Traverser: WaitingNode "TREE" 
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* VarClus : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:40 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN05213";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\VarClus_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_EMTRAINVARIABLE / view=WORK.VarClus_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTVARSEL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTVARSEL / view=WORK.VarClus_OUTVARSEL;
MPRINT(EM_DIAGRAM):   label "Cluster"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Label"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithOwnClusComp"n = "R-Square With Own Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "ClosestCluster"n = "Next Closest Cluster (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithNextClusComp"n = "R-Square with Next Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "RsqRatio"n = "1-R2 Ratio (N)";
MPRINT(EM_DIAGRAM):   label "Selected"n = "Variable Selected (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTVARSEL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_CLUSFREQ OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_CLUSFREQ / view=WORK.VarClus_CLUSFREQ;
MPRINT(EM_DIAGRAM):   label "Cluster"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent of Total Frequency (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_CLUSFREQ(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTRSQUARE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTRSQUARE / view=WORK.VarClus_OUTRSQUARE;
MPRINT(EM_DIAGRAM):   label "Cluster"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Label"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithOwnClusComp"n = "R-Square With Own Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "ClosestCluster"n = "Next Closest Cluster (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithNextClusComp"n = "R-Square with Next Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "RsqRatio"n = "1-R2 Ratio (N)";
MPRINT(EM_DIAGRAM):   label "Selected"n = "Variable Selected (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTRSQUARE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTLINK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTLINK / view=WORK.VarClus_OUTLINK;
MPRINT(EM_DIAGRAM):   label "Cluster"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Label"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithOwnClusComp"n = "R-Square With Own Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "ClosestCluster"n = "Next Closest Cluster (C)";
MPRINT(EM_DIAGRAM):   label "RSqWithNextClusComp"n = "R-Square with Next Cluster Component (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "RsqRatio"n = "1-R2 Ratio (N)";
MPRINT(EM_DIAGRAM):   label "LINKID"n = "Link ID (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTLINK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTNODE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTNODE / view=WORK.VarClus_OUTNODE;
MPRINT(EM_DIAGRAM):   label "NODEID"n = "Node ID (C)";
MPRINT(EM_DIAGRAM):   label "Label"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Node Type (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTNODE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTTREE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTTREE / view=WORK.VarClus_OUTTREE;
MPRINT(EM_DIAGRAM):   label "Name"n = "Name of Variable or Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Parent"n = "Parent of Variable or Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Proportion"n = "Proportion of Variance Explained (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTTREE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTCORRPLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTCORRPLOT / view=WORK.VarClus_OUTCORRPLOT;
MPRINT(EM_DIAGRAM):   label "_X_"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_Y_"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Correlation"n = "Correlation (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTCORRPLOT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTCLUSCORRPLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTCLUSCORRPLOT / view=WORK.VarClus_OUTCLUSCORRPLOT;
MPRINT(EM_DIAGRAM):   label "X"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Y"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Correlation"n = "Correlation (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTCLUSCORRPLOT(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.VarClus_OUTCLUSSTRUCT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.VarClus_OUTCLUSSTRUCT / view=WORK.VarClus_OUTCLUSSTRUCT;
MPRINT(EM_DIAGRAM):   label "Cluster"n = "Cluster (C)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Balance_Zscore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Creditscore_Zscore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore"n = " (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tenure"n = " (N)";
MPRINT(EM_DIAGRAM):   label "CountryFrance"n = "Country=France (N)";
MPRINT(EM_DIAGRAM):   label "CountryGermany"n = "Country=Germany (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain"n = "Country=Spain (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale"n = "Gender=Female (N)";
MPRINT(EM_DIAGRAM):   label "GenderMale"n = "Gender=Male (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo"n = "HasCreditCard=No (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardYes"n = "HasCreditCard=Yes (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo"n = "IsActiveMember=No (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberYes"n = "IsActiveMember=Yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_OUTCLUSSTRUCT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:40 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.VarClus_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Part_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base10GWU2I as select * from WORK.M00LERQ6 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp10GWU2I as select * from WORK.M27SH914 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base10GWU2I compare=work._comp10GWU2I out=WORK._DIFF0ACCQ7I noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Neural : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:41 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Neural_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMTRAINVARIABLE / view=WORK.Neural_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMRANK / view=WORK.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "RESPC"n = "Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "CAP"n = "% Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "CAPC"n = "Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESP"n = "Baseline % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESPC"n = "Baseline Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAP"n = "Baseline % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAPC"n = "Baseline Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMNEVENT"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "BESTNUMBEROFEVENTS"n = "Best Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAPC"n = "Best Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASENUMBEROFEVENTS"n = "Baseline Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAP"n = "Best % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFT"n = "Best Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFTC"n = "Best Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESP"n = "Best % Response (N)";
MPRINT(EM_DIAGRAM):   label "RESP"n = "% Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESPC"n = "Best Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTGAIN"n = "Best Gain (N)";
MPRINT(EM_DIAGRAM):   label "GAIN"n = "Gain (N)";
MPRINT(EM_DIAGRAM):   label "BASEGAIN"n = "Baseline Gain (N)";
MPRINT(EM_DIAGRAM):   label "LIFT"n = "Lift (N)";
MPRINT(EM_DIAGRAM):   label "LIFTC"n = "Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFT"n = "Baseline Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFTC"n = "Baseline Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMSCOREDIST / view=WORK.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Posterior Probability Range (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "LOWPOSTERIOR"n = "Lower Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "UPPOSTERIOR"n = "Upper Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFEVENTS"n = "Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFEVENTS"n = "Cumulative Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFNONEVENTS"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFNONEVENTS"n = "Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFNONEVENTS"n = "Cumulative Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGE"n = "Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGE"n = "Cumulative Percentage (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMOUTFIT / view=WORK.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TWRONG_"n = "Test: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMREPORTFIT / view=WORK.Neural_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMCLASSIFICATION OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMCLASSIFICATION / view=WORK.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Outcome Type (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "INTO"n = "Outcome (C)";
MPRINT(EM_DIAGRAM):   label "CORRECTTEXT"n = "Correct Text (C)";
MPRINT(EM_DIAGRAM):   label "PCT_ROW"n = "Target Percentage (N)";
MPRINT(EM_DIAGRAM):   label "PCT_COL"n = "Outcome Percentage (N)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Total Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CORRECT"n = "Correct (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMEVENTREPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMEVENTREPORT / view=WORK.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FALSENEVENT"n = "False Negative (N)";
MPRINT(EM_DIAGRAM):   label "TRUENEVENT"n = "True Negative (N)";
MPRINT(EM_DIAGRAM):   label "FALSEEVENT"n = "False Positive (N)";
MPRINT(EM_DIAGRAM):   label "TRUEEVENT"n = "True Positive (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_PLOTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_PLOTDS / view=WORK.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   label "_ITER_"n = "Training Iterations (N)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Name (C)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimated Weights (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_PLOTDS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_WEIGHTDS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_WEIGHTDS / view=WORK.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "From (C)";
MPRINT(EM_DIAGRAM):   label "TO"n = "Into (C)";
MPRINT(EM_DIAGRAM):   label "WEIGHT"n = "Weight (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Neural_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_EMESTIMATE / view=WORK.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_TECH_"n = "Optimization Technique (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "_DECAY_"n = "Weight Decay (N)";
MPRINT(EM_DIAGRAM):   label "_SEED_"n = "Initial seed (N)";
MPRINT(EM_DIAGRAM):   label "_NOBJ_"n = "Train: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_OBJ_"n = "Train: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_OBJERR_"n = "Train: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBJ_"n = "Valid: Objective Function Divisor (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJ_"n = "Valid: Objective Function (N)";
MPRINT(EM_DIAGRAM):   label "_VOBJERR_"n = "Valid: Objective Function (Error Part) (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (scoring) (N)";
MPRINT(EM_DIAGRAM):   label "_P_NUM_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_ITER_"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H11"n = "Age_Zscore -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H11"n = "CountrySpain -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H11"n = "EstimatedSal_Zscore -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H11"n = "GenderFemale -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H11"n = "HasCreditCardNo -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H11"n = "IsActiveMemberNo -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H11"n = "NumOfProducts -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H12"n = "Age_Zscore -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H12"n = "CountrySpain -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H12"n = "EstimatedSal_Zscore -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H12"n = "GenderFemale -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H12"n = "HasCreditCardNo -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H12"n = "IsActiveMemberNo -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H12"n = "NumOfProducts -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H13"n = "Age_Zscore -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H13"n = "CountrySpain -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H13"n = "EstimatedSal_Zscore -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H13"n = "GenderFemale -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H13"n = "HasCreditCardNo -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H13"n = "IsActiveMemberNo -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H13"n = "NumOfProducts -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H14"n = "Age_Zscore -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H14"n = "CountrySpain -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H14"n = "EstimatedSal_Zscore -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H14"n = "GenderFemale -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H14"n = "HasCreditCardNo -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H14"n = "IsActiveMemberNo -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H14"n = "NumOfProducts -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H15"n = "Age_Zscore -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H15"n = "CountrySpain -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H15"n = "EstimatedSal_Zscore -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H15"n = "GenderFemale -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H15"n = "HasCreditCardNo -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H15"n = "IsActiveMemberNo -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H15"n = "NumOfProducts -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H16"n = "Age_Zscore -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H16"n = "CountrySpain -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H16"n = "EstimatedSal_Zscore -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H16"n = "GenderFemale -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H16"n = "HasCreditCardNo -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H16"n = "IsActiveMemberNo -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H16"n = "NumOfProducts -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H17"n = "Age_Zscore -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H17"n = "CountrySpain -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H17"n = "EstimatedSal_Zscore -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H17"n = "GenderFemale -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H17"n = "HasCreditCardNo -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H17"n = "IsActiveMemberNo -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H17"n = "NumOfProducts -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_H18"n = "Age_Zscore -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_H18"n = "CountrySpain -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_H18"n = "EstimatedSal_Zscore -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_H18"n = "GenderFemale -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_H18"n = "HasCreditCardNo -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_H18"n = "IsActiveMemberNo -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_H18"n = "NumOfProducts -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H11"n = "BIAS -> H11 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H12"n = "BIAS -> H12 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H13"n = "BIAS -> H13 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H14"n = "BIAS -> H14 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H15"n = "BIAS -> H15 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H16"n = "BIAS -> H16 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H17"n = "BIAS -> H17 (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_H18"n = "BIAS -> H18 (N)";
MPRINT(EM_DIAGRAM):   label "H11_ChurnedYes"n = "H11 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H12_ChurnedYes"n = "H12 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H13_ChurnedYes"n = "H13 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H14_ChurnedYes"n = "H14 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H15_ChurnedYes"n = "H15 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H16_ChurnedYes"n = "H16 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H17_ChurnedYes"n = "H17 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "H18_ChurnedYes"n = "H18 -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   label "BIAS_ChurnedYes"n = "BIAS -> ChurnedYes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Neural_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1RU0IX9 as select * from WORK.M2JZ283F order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1RU0IX9 as select * from WORK.M1XU538A order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1RU0IX9 compare=work._comp1RU0IX9 out=WORK._DIFF1XFOQXU noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Reg : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Reg_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMTRAINVARIABLE / view=WORK.Reg_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMRANK / view=WORK.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "RESPC"n = "Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "CAP"n = "% Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "CAPC"n = "Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESP"n = "Baseline % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESPC"n = "Baseline Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAP"n = "Baseline % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAPC"n = "Baseline Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMNEVENT"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "BESTNUMBEROFEVENTS"n = "Best Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAPC"n = "Best Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASENUMBEROFEVENTS"n = "Baseline Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAP"n = "Best % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFT"n = "Best Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFTC"n = "Best Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESP"n = "Best % Response (N)";
MPRINT(EM_DIAGRAM):   label "RESP"n = "% Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESPC"n = "Best Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTGAIN"n = "Best Gain (N)";
MPRINT(EM_DIAGRAM):   label "GAIN"n = "Gain (N)";
MPRINT(EM_DIAGRAM):   label "BASEGAIN"n = "Baseline Gain (N)";
MPRINT(EM_DIAGRAM):   label "LIFT"n = "Lift (N)";
MPRINT(EM_DIAGRAM):   label "LIFTC"n = "Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFT"n = "Baseline Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFTC"n = "Baseline Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMSCOREDIST / view=WORK.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Posterior Probability Range (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "LOWPOSTERIOR"n = "Lower Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "UPPOSTERIOR"n = "Upper Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFEVENTS"n = "Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFEVENTS"n = "Cumulative Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFNONEVENTS"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFNONEVENTS"n = "Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFNONEVENTS"n = "Cumulative Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGE"n = "Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGE"n = "Cumulative Percentage (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMOUTFIT / view=WORK.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMREPORTFIT / view=WORK.Reg_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMCLASSIFICATION OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMCLASSIFICATION / view=WORK.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Outcome Type (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "INTO"n = "Outcome (C)";
MPRINT(EM_DIAGRAM):   label "CORRECTTEXT"n = "Correct Text (C)";
MPRINT(EM_DIAGRAM):   label "PCT_ROW"n = "Target Percentage (N)";
MPRINT(EM_DIAGRAM):   label "PCT_COL"n = "Outcome Percentage (N)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Total Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CORRECT"n = "Correct (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMEVENTREPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMEVENTREPORT / view=WORK.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FALSENEVENT"n = "False Negative (N)";
MPRINT(EM_DIAGRAM):   label "TRUENEVENT"n = "True Negative (N)";
MPRINT(EM_DIAGRAM):   label "FALSEEVENT"n = "False Positive (N)";
MPRINT(EM_DIAGRAM):   label "TRUEEVENT"n = "True Positive (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EFFECTS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EFFECTS / view=WORK.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ClassLevel"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "tValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "PValue"n = "P Value (N)";
MPRINT(EM_DIAGRAM):   label "TargetLevel"n = "Target Level (C)";
MPRINT(EM_DIAGRAM):   label "CODE"n = "Score Code Variable (C)";
MPRINT(EM_DIAGRAM):   label "Sign"n = "Sign (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   label "TEffectNum"n = "TScore Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   label "EffectNum"n = "Effect Number (N)(3.0)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_EMESTIMATE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_EMESTIMATE / view=WORK.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "_CHOSEN_"n = "Model Chosen Criterion (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Row Type (C)";
MPRINT(EM_DIAGRAM):   label "_NAME_"n = "Row Name (C)";
MPRINT(EM_DIAGRAM):   label "Intercept_YES"n = "Intercept: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "Age_Zscore_YES"n = "Age_Zscore: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "CountrySpain_YES"n = "Country=Spain: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "EstimatedSal_Zscore_YES"n = "EstimatedSal_Zscore: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "GenderFemale_YES"n = "Gender=Female: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "HasCreditCardNo_YES"n = "HasCreditCard=No: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "IsActiveMemberNo_YES"n = "IsActiveMember=No: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "NumOfProducts_YES"n = "NumOfProducts: Churned=YES (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Sum of Squares (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Square Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMESTIMATE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Reg_ESTIMATEGRID OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_ESTIMATEGRID / view=WORK.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   label "_STEP_"n = "Model Selection Step Number (N)";
MPRINT(EM_DIAGRAM):   label "Effect"n = "Effect (C)";
MPRINT(EM_DIAGRAM):   label "EffectLabel"n = "Effect Label (C)";
MPRINT(EM_DIAGRAM):   label "Coefficient"n = "Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "TValue"n = "T-value (N)";
MPRINT(EM_DIAGRAM):   label "P"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_LABEL_"n = "LABEL OF FORMER VARIABLE (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = " (C)";
MPRINT(EM_DIAGRAM):   label "TargetLevel"n = " (C)";
MPRINT(EM_DIAGRAM):   label "CODE"n = " (C)";
MPRINT(EM_DIAGRAM):   label "Abscoefficient"n = "Absolute Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "abstvalue"n = "Absolute T-value (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_ESTIMATEGRID(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:43 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Reg_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where((ROLE="TARGET" and LEVEL ne "UNARY") or ROLE in("INPUT" "REJECTED" "FREQ"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base374NAR1 as select * from WORK.M1KK8THH order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp374NAR1 as select * from WORK.M1RX78_Q order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base374NAR1 compare=work._comp374NAR1 out=WORK._DIFF0FOIQ59 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "MDLCOMP" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Tree : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:43 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN05367";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Tree_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMTRAINVARIABLE / view=WORK.Tree_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMRANK / view=WORK.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "RESPC"n = "Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "CAP"n = "% Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "CAPC"n = "Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESP"n = "Baseline % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESPC"n = "Baseline Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAP"n = "Baseline % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAPC"n = "Baseline Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMNEVENT"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "BESTNUMBEROFEVENTS"n = "Best Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAPC"n = "Best Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASENUMBEROFEVENTS"n = "Baseline Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAP"n = "Best % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFT"n = "Best Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFTC"n = "Best Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESP"n = "Best % Response (N)";
MPRINT(EM_DIAGRAM):   label "RESP"n = "% Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESPC"n = "Best Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTGAIN"n = "Best Gain (N)";
MPRINT(EM_DIAGRAM):   label "GAIN"n = "Gain (N)";
MPRINT(EM_DIAGRAM):   label "BASEGAIN"n = "Baseline Gain (N)";
MPRINT(EM_DIAGRAM):   label "LIFT"n = "Lift (N)";
MPRINT(EM_DIAGRAM):   label "LIFTC"n = "Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFT"n = "Baseline Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFTC"n = "Baseline Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMSCOREDIST / view=WORK.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "dataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Posterior Probability Range (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "LOWPOSTERIOR"n = "Lower Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "UPPOSTERIOR"n = "Upper Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFEVENTS"n = "Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFEVENTS"n = "Cumulative Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFNONEVENTS"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFNONEVENTS"n = "Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFNONEVENTS"n = "Cumulative Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGE"n = "Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGE"n = "Cumulative Percentage (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMOUTFIT / view=WORK.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "target"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Weights Times Freqs (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "TargetLabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMOUTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMREPORTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMREPORTFIT / view=WORK.Tree_EMREPORTFIT;
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "TRAIN"n = "Train (N)";
MPRINT(EM_DIAGRAM):   label "VALIDATE"n = "Validation (N)";
MPRINT(EM_DIAGRAM):   label "TEST"n = "Test (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMREPORTFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMCLASSIFICATION OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMCLASSIFICATION / view=WORK.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Outcome Type (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "INTO"n = "Outcome (C)";
MPRINT(EM_DIAGRAM):   label "CORRECTTEXT"n = "Correct Text (C)";
MPRINT(EM_DIAGRAM):   label "PCT_ROW"n = "Target Percentage (N)";
MPRINT(EM_DIAGRAM):   label "PCT_COL"n = "Outcome Percentage (N)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Total Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CORRECT"n = "Correct (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMCLASSIFICATION(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_EMEVENTREPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_EMEVENTREPORT / view=WORK.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "FALSENEVENT"n = "False Negative (N)";
MPRINT(EM_DIAGRAM):   label "TRUENEVENT"n = "True Negative (N)";
MPRINT(EM_DIAGRAM):   label "FALSEEVENT"n = "False Positive (N)";
MPRINT(EM_DIAGRAM):   label "TRUEEVENT"n = "True Positive (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMEVENTREPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTIMPORT / view=WORK.Tree_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "VIMPORTANCE"n = "Validation Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "RATIO"n = "Ratio of Validation to Training Importance (N)(15.4)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_TREE_PLOT / view=WORK.Tree_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "textall"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "branch"n = "Branch from parent node (N)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node Id (N)";
MPRINT(EM_DIAGRAM):   label "LEAF"n = "Leaf (N)";
MPRINT(EM_DIAGRAM):   label "NBRANCHES"n = "Number of Branches (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Node depth (N)";
MPRINT(EM_DIAGRAM):   label "TRAVERSAL"n = "Order in node traversal (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Width of link to parent (N)";
MPRINT(EM_DIAGRAM):   label "LINKCOLOR"n = "Color of link to parent (N)";
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node statistics (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "N (N)";
MPRINT(EM_DIAGRAM):   label "NPRIORS"n = "N with priors (N)";
MPRINT(EM_DIAGRAM):   label "VN"n = "Valid: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "VNPRIORS"n = "Valid: N with priors (N)";
MPRINT(EM_DIAGRAM):   label "P_ChurnedYes"n = "Predicted: Churned=Yes (N)(6.2)";
MPRINT(EM_DIAGRAM):   label "P_ChurnedNo"n = "Predicted: Churned=No (N)(6.2)";
MPRINT(EM_DIAGRAM):   label "Q_ChurnedYes"n = "Unadjusted P: Churned=Yes (N)";
MPRINT(EM_DIAGRAM):   label "Q_ChurnedNo"n = "Unadjusted P: Churned=No (N)";
MPRINT(EM_DIAGRAM):   label "V_ChurnedYes"n = "Validated: Churned=Yes (N)(6.2)";
MPRINT(EM_DIAGRAM):   label "V_ChurnedNo"n = "Validated: Churned=No (N)(6.2)";
MPRINT(EM_DIAGRAM):   label "I_Churned"n = "Into: Churned (C)(6.2)";
MPRINT(EM_DIAGRAM):   label "U_Churned"n = "Unnormalized Into: Churned (C)(6.2)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "validtotal"n = "Valid Total (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "CHARACTER VALUE (C)";
MPRINT(EM_DIAGRAM):   label "percentCorrect"n = "Percent Correct (N)";
MPRINT(EM_DIAGRAM):   label "vpercentCorrect"n = "Valid Percent Correct (N)";
MPRINT(EM_DIAGRAM):   label "nodecolor"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent YES (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "vprob"n = "Validation Percent YES (N)";
MPRINT(EM_DIAGRAM):   label "percevent_valid"n = "Valid: Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "perc_valid"n = "Valid: Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_OUTSEQ OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTSEQ / view=WORK.Tree_OUTSEQ;
MPRINT(EM_DIAGRAM):   label "_ASSESS_"n = "Train: Subtree Assessment (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VASSESS_"n = "Valid: Subtree Assessment (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Number of Leaves (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)(15.4)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSEQ(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Tree_OUTSTATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_OUTSTATS / view=WORK.Tree_OUTSTATS;
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "LEAF"n = "Leaf (N)";
MPRINT(EM_DIAGRAM):   label "STATNAME"n = "Statistic Name (C)";
MPRINT(EM_DIAGRAM):   label "STATVALUE"n = "Statistic Value (N)";
MPRINT(EM_DIAGRAM):   label "CATEGORY"n = "Target Category or Decision (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_OUTSTATS(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:44 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Tree_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base172XI4V as select * from WORK.M1MNX8BA order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp172XI4V as select * from WORK.M0C7CX4T order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base172XI4V compare=work._comp172XI4V out=WORK._DIFF36WJGAN noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* MdlComp : Beginning creation of SPK report 
* datetime : 24OCT2020:18:52:45 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data work.MdlComp;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where (NODEID="Neural" and LABEL ne 'Neural Network') OR (NODEID="Tree" and LABEL ne 'Decision Tree') OR (NODEID="Reg" and LABEL ne 'Regression') ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\MdlComp_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMTRAINVARIABLE / view=WORK.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = " (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMRANK OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMRANK / view=WORK.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "RESPC"n = "Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "CAP"n = "% Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "CAPC"n = "Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESP"n = "Baseline % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASERESPC"n = "Baseline Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAP"n = "Baseline % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASECAPC"n = "Baseline Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "DECILE"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMNEVENT"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "BESTNUMBEROFEVENTS"n = "Best Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAPC"n = "Best Cumulative % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BASENUMBEROFEVENTS"n = "Baseline Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "BESTCAP"n = "Best % Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFT"n = "Best Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTLIFTC"n = "Best Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESP"n = "Best % Response (N)";
MPRINT(EM_DIAGRAM):   label "RESP"n = "% Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTRESPC"n = "Best Cumulative % Response (N)";
MPRINT(EM_DIAGRAM):   label "BESTGAIN"n = "Best Gain (N)";
MPRINT(EM_DIAGRAM):   label "GAIN"n = "Gain (N)";
MPRINT(EM_DIAGRAM):   label "BASEGAIN"n = "Baseline Gain (N)";
MPRINT(EM_DIAGRAM):   label "LIFT"n = "Lift (N)";
MPRINT(EM_DIAGRAM):   label "LIFTC"n = "Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFT"n = "Baseline Lift (N)";
MPRINT(EM_DIAGRAM):   label "BASELIFTC"n = "Baseline Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMSCOREDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMSCOREDIST / view=WORK.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "P_LABEL"n = "Posterior Probability Range (C)";
MPRINT(EM_DIAGRAM):   label "BIN"n = "Bin (N)";
MPRINT(EM_DIAGRAM):   label "LOWPOSTERIOR"n = "Lower Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "UPPOSTERIOR"n = "Upper Bound Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "SCORE"n = "Model Score (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFEVENTS"n = "Number of Events (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFEVENTS"n = "Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFEVENTS"n = "Cumulative Percentage of Events (N)";
MPRINT(EM_DIAGRAM):   label "NUMBEROFNONEVENTS"n = "Number of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "N"n = "Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "_MEANP_"n = "Mean Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MINP_"n = "Min Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "_MAXP_"n = "Max Posterior Probability (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGEOFNONEVENTS"n = "Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGEOFNONEVENTS"n = "Cumulative Percentage of Nonevents (N)";
MPRINT(EM_DIAGRAM):   label "PERCENTAGE"n = "Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CUMULATIVEPERCENTAGE"n = "Cumulative Percentage (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMOUTFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMOUTFIT / view=WORK.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   label "USE"n = "Selected Model (C)";
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "_CRITERION_"n = "Selection Criterion: Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_NOBS_"n = "Train: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_MISC_"n = "Train: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_MAX_"n = "Train: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_SSE_"n = "Train: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_ASE_"n = "Train: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_DIV_"n = "Train: Divisor for ASE (N)";
MPRINT(EM_DIAGRAM):   label "_DFT_"n = "Train: Total Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_VNOBS_"n = "Valid: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_VMISC_"n = "Valid: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_VMAX_"n = "Valid: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSSE_"n = "Valid: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_VASE_"n = "Valid: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRASE_"n = "Valid: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_VDIV_"n = "Valid: Divisor for VASE (N)";
MPRINT(EM_DIAGRAM):   label "_TNOBS_"n = "Test: Sum of Frequencies (N)";
MPRINT(EM_DIAGRAM):   label "_TSUMW_"n = "Test: Sum of Weights Times Freqs (N)";
MPRINT(EM_DIAGRAM):   label "_TMISC_"n = "Test: Misclassification Rate (N)";
MPRINT(EM_DIAGRAM):   label "_TMAX_"n = "Test: Maximum Absolute Error (N)";
MPRINT(EM_DIAGRAM):   label "_TSSE_"n = "Test: Sum of Squared Errors (N)";
MPRINT(EM_DIAGRAM):   label "_TASE_"n = "Test: Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRASE_"n = "Test: Root Average Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_TDIV_"n = "Test: Divisor for TASE (N)";
MPRINT(EM_DIAGRAM):   label "_AIC_"n = "Train: Akaike's Information Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_AVERR_"n = "Train: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_DFE_"n = "Train: Degrees of Freedom for Error (N)";
MPRINT(EM_DIAGRAM):   label "_DFM_"n = "Train: Model Degrees of Freedom (N)";
MPRINT(EM_DIAGRAM):   label "_ERR_"n = "Train: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_FPE_"n = "Train: Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_MSE_"n = "Train: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_NW_"n = "Train: Number of Estimate Weights (N)";
MPRINT(EM_DIAGRAM):   label "_RFPE_"n = "Train: Root Final Prediction Error (N)";
MPRINT(EM_DIAGRAM):   label "_RMSE_"n = "Train: Root Mean Squared Error (N)";
MPRINT(EM_DIAGRAM):   label "_SBC_"n = "Train: Schwarz's Bayesian Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SUMW_"n = "Train: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_VAVERR_"n = "Valid: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VERR_"n = "Valid: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_VMSE_"n = "Valid: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VRMSE_"n = "Valid: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_VSUMW_"n = "Valid: Sum of Case Weights Times Freq (N)";
MPRINT(EM_DIAGRAM):   label "_TAVERR_"n = "Test: Average Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TERR_"n = "Test: Error Function (N)";
MPRINT(EM_DIAGRAM):   label "_TMSE_"n = "Test: Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TRMSE_"n = "Test: Root Mean Square Error (N)";
MPRINT(EM_DIAGRAM):   label "_TMISL_"n = "Test: Lower 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_TMISU_"n = "Test: Upper 95% Conf. Limit for TMISC (N)";
MPRINT(EM_DIAGRAM):   label "_WRONG_"n = "Train: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_VWRONG_"n = "Valid: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_TWRONG_"n = "Test: Number of Wrong Classifications (N)";
MPRINT(EM_DIAGRAM):   label "_AUR_"n = "Train: Roc Index (N)";
MPRINT(EM_DIAGRAM):   label "_GINI_"n = "Train: Gini Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "KS"n = "Train: Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "_KS_PROB_CUTOFF"n = "Train: Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_KS_BIN_"n = "Train: Bin-Based Two-Way Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "BINNED_KS_PROB_CUTOFF"n = "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_VAUR_"n = "Valid: Roc Index (N)";
MPRINT(EM_DIAGRAM):   label "_VGINI_"n = "Valid: Gini Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "VKS"n = "Valid: Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "_VKS_PROB_CUTOFF_"n = "Valid: Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_VKS_BIN_"n = "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "_VBINNED_KS_PROB_CUTOFF_"n = "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_TAUR_"n = "Test:  Roc Index (N)";
MPRINT(EM_DIAGRAM):   label "_TGINI_"n = "Test:  Gini Coefficient (N)";
MPRINT(EM_DIAGRAM):   label "TKS"n = "Test:  Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "_TKS_PROB_CUTOFF_"n = "Test:  Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_TKS_BIN_"n = "Test:  Bin-Based Two-Way Kolmogorov-Smirnov Statistic (N)";
MPRINT(EM_DIAGRAM):   label "_TBINNED_KS_PROB_CUTOFF_"n = "Test:  Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "_GAIN_"n = "Train: Gain (N)";
MPRINT(EM_DIAGRAM):   label "_VGAIN_"n = "Valid: Gain (N)";
MPRINT(EM_DIAGRAM):   label "_LIFT_"n = "Train: Lift (N)";
MPRINT(EM_DIAGRAM):   label "_LIFTC_"n = "Train: Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "_VLIFT_"n = "Valid: Lift (N)";
MPRINT(EM_DIAGRAM):   label "_VLIFTC_"n = "Valid: Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "_RESP_"n = "Train: Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_RESPC_"n = "Train: Cumulative Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_VRESP_"n = "Valid: Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_VRESPC_"n = "Valid: Cumulative Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_CAP_"n = "Train: Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "_CAPC_"n = "Train: Cumulative Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "_VCAP_"n = "Valid: Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "_VCAPC_"n = "Valid: Cumulative Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "_TGAIN_"n = "Test: Gain (N)";
MPRINT(EM_DIAGRAM):   label "_TLIFT_"n = "Test: Lift (N)";
MPRINT(EM_DIAGRAM):   label "_TRESP_"n = "Test: Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_TCAP_"n = "Test: Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   label "_TLIFTC_"n = "Test: Cumulative Lift (N)";
MPRINT(EM_DIAGRAM):   label "_TRESPC_"n = "Test: Cumulative Percent Response (N)";
MPRINT(EM_DIAGRAM):   label "_TCAPC_"n = "Test: Cumulative Percent Captured Response (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMCLASSIFICATION OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMCLASSIFICATION / view=WORK.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Outcome Type (C)";
MPRINT(EM_DIAGRAM):   label "FROM"n = "Target (C)";
MPRINT(EM_DIAGRAM):   label "INTO"n = "Outcome (C)";
MPRINT(EM_DIAGRAM):   label "CORRECTTEXT"n = "Correct Text (C)";
MPRINT(EM_DIAGRAM):   label "PCT_ROW"n = "Target Percentage (N)";
MPRINT(EM_DIAGRAM):   label "PCT_COL"n = "Outcome Percentage (N)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Total Percentage (N)";
MPRINT(EM_DIAGRAM):   label "CORRECT"n = "Correct (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_EMROC OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_EMROC / view=WORK.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   label "PARENT"n = "Predecessor Node (C)";
MPRINT(EM_DIAGRAM):   label "MODEL"n = "Model Node (C)";
MPRINT(EM_DIAGRAM):   label "MODELDESCRIPTION"n = "Model Description (C)";
MPRINT(EM_DIAGRAM):   label "DATAROLE"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "TARGET"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "TARGETLABEL"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "EVENT"n = "Event (C)";
MPRINT(EM_DIAGRAM):   label "_POS_"n = "True Positive Count (N)";
MPRINT(EM_DIAGRAM):   label "SENSITIVITY"n = "Sensitivity (N)";
MPRINT(EM_DIAGRAM):   label "_NEG_"n = "True Negative Count (N)";
MPRINT(EM_DIAGRAM):   label "_FALPOS_"n = "False Positive Count (N)";
MPRINT(EM_DIAGRAM):   label "ONEMINUSSPECIFICITY"n = "1 - Specificity (N)";
MPRINT(EM_DIAGRAM):   label "SPECIFICITY"n = "Specificity (N)";
MPRINT(EM_DIAGRAM):   label "_FALNEG_"n = "False Negative Count (N)";
MPRINT(EM_DIAGRAM):   label "FIRSTINGROUP"n = "First in Group (N)";
MPRINT(EM_DIAGRAM):   label "CUTOFF"n = "Last in Group (N)";
MPRINT(EM_DIAGRAM):   label "LOWPOSTERIOR"n = "Lower Bound Probability (N)";
MPRINT(EM_DIAGRAM):   label "UPPOSTERIOR"n = "Upper Bound Probability (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.MdlComp_COMPAREFIT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_COMPAREFIT / view=WORK.MdlComp_COMPAREFIT;
MPRINT(EM_DIAGRAM):   label "DataRole"n = "Data Role (C)";
MPRINT(EM_DIAGRAM):   label "Target"n = "Target Variable (C)";
MPRINT(EM_DIAGRAM):   label "targetlabel"n = "Target Label (C)";
MPRINT(EM_DIAGRAM):   label "STAT"n = "Fit Statistics (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Statistics Label (C)";
MPRINT(EM_DIAGRAM):   label "Neural"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Tree"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Reg"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_COMPAREFIT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 24OCT2020:18:52:45 
* 
*------------------------------------------------------------* 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL numElements >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1 NAME $32 ROLE $32 LEVEL $10 EVENT $32 LABEL $200;
MPRINT(EM_DIAGRAM):   NAME = "Churned";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   EVENT = 'YES';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Churned";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   EVENT = 'YES';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "Churned";
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   EVENT = 'YES';
MPRINT(EM_DIAGRAM):   LABEL = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MdlComp_VARSETDEFAULT nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME LEVEL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   if _N_ = 1 then USE = "Y";
MPRINT(EM_DIAGRAM):   else USE = "N";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3HYV6_P as select * from WORK.M2C4LEP5 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3HYV6_P as select * from WORK.M1SC_779 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3HYV6_P compare=work._comp3HYV6_P out=WORK._DIFF0QRRP7O noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN05511;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack33L5 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack33L5, "ModelCompare", ' type="EM Result" version="14.1" Report="20161277_Assignment3_MdlComp_20ZQ0" nodeid="MdlComp" description="Task-2  Model Comparison" component="ModelCompare"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package ModelCompare began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1WFV = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1WFV, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack1WFV, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GU038J "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F2GU038J", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QNDC1K "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F1QNDC1K", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0S72ZS0 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F0S72ZS0", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F217HJGT "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\target.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F217HJGT", "BINARY", "text/xml", 'TARGETTABLE', 'NAME=TARGETTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\target.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1DMKMHU "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\statistic.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F1DMKMHU", "BINARY", "text/xml", 'STATTABLE', 'NAME=STATTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\statistic.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1SO7PGP "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WFV, "fileref:F1SO7PGP", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2_1T = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2_1T, "File Import", ' NAME="FIMPORT2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1R7OWU3 "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F1R7OWU3", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2149I2_ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F2149I2_", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2NOAQCU "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F2NOAQCU", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2_1T, "work", "FIMPORT2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3J4OAF2 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F3J4OAF2", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L2_F29 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F2L2_F29", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L_TSRG "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F2L_TSRG", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3QDIP8P "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2_1T, "fileref:F3QDIP8P", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack2_1T, rc, "NESTED_NAME", "FIMPORT2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1ZE5 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1ZE5, "StatExplore", ' NAME="Stat"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package StatExplore began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0LUQGDW "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Stat_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F0LUQGDW", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Stat_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0RR0_J5 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F0RR0_J5", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1NRMPXP "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F1NRMPXP", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2HJ1QWQ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F2HJ1QWQ", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0KODGV8 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F0KODGV8", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WDRUNE "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F0WDRUNE", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3F74JLT "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1ZE5, "fileref:F3F74JLT", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_CLASS", "Class", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_INTERVAL", "INTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_CHIMEASURE", "CHIMEASURE", "NAME=CHIMEASURE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CHIMEASURE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_CHI2", "CHI2", "NAME=CHI2 TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CHI2 inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1ZE5, "work", "Stat_WORTH", "WORTH", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WORTH inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack1ZE5, rc, "NESTED_NAME", "Stat");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack08P1 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack08P1, "Transform Variables", ' NAME="Trans"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Transform Variables began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0QMFOXP "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Trans_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F0QMFOXP", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Trans_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F09LBUHU "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F09LBUHU", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2B12JBO "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F2B12JBO", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack08P1, "work", "Trans_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1I3XE3U "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F1I3XE3U", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VZYZSM "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F2VZYZSM", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZVETKS "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F0ZVETKS", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0XFIVFJ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F0XFIVFJ", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17PVE_7 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F17PVE_7", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0IP5G10 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack08P1, "fileref:F0IP5G10", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack08P1, "work", "Trans_STATISTICS", "Statistics of original variables", "NAME=STATISTICS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TRANSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack08P1, "work", "Trans_FORMULA", "FORMULA", "NAME=FORMULA TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FORMULA inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack08P1, rc, "NESTED_NAME", "Trans");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0SH5 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0SH5, "Data Partition", ' NAME="Part"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Data Partition began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0P6XR9W "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Part_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F0P6XR9W", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Part_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F038UMGK "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F038UMGK", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3W0DHGN "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F3W0DHGN", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0SH5, "work", "Part_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3X25WC3 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F3X25WC3", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F28G57KU "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F28G57KU", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ZML19G "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F2ZML19G", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1_MW48Q "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F1_MW48Q", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0BI4VGA "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SH5, "fileref:F0BI4VGA", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0SH5, "work", "Part_CLASS", "Class Variables", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack0SH5, rc, "NESTED_NAME", "Part");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0_SL = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0_SL, "Variable Clustering", ' NAME="VarClus"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Variable Clustering began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F34EHU8J "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\VarClus_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F34EHU8J", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\VarClus_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3JZ8M6J "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F3JZ8M6J", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F03P7A5P "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F03P7A5P", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3T_I32Z "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F3T_I32Z", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZXVEEG "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F0ZXVEEG", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1T0TKW8 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F1T0TKW8", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F25GF6J5 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F25GF6J5", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KNP45W "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F1KNP45W", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CEPLVO "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F3CEPLVO", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08RM6QN "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_SL, "fileref:F08RM6QN", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTVARSEL", "selectedvariables", "NAME=OUTVARSEL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file selectedvariables inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_CLUSFREQ", "varfreqbycluster", "NAME=CLUSFREQ TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file varfreqbycluster inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTRSQUARE", "varseltable", "NAME=OUTRSQUARE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file varseltable inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTLINK", "clusterplot", "NAME=OUTLINK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file clusterplot inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTNODE", "clusterplot", "NAME=OUTNODE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file clusterplot inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTTREE", "dendrogram", "NAME=OUTTREE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file dendrogram inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTCORRPLOT", "varcorr", "NAME=OUTCORRPLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file varcorr inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTCLUSCORRPLOT", "cluscorr", "NAME=OUTCLUSCORRPLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file cluscorr inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0_SL, "work", "VarClus_OUTCLUSSTRUCT", "corrstruct", "NAME=OUTCLUSSTRUCT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file corrstruct inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack0_SL, rc, "NESTED_NAME", "VarClus");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0AO8 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0AO8, "Neural Network", ' NAME="Neural"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Neural Network began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2R_0P0_ "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Neural_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F2R_0P0_", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Neural_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F151S522 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F151S522", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1GASA11 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F1GASA11", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2T9V_QH "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F2T9V_QH", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HKL_5R "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F1HKL_5R", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ZYIXCP "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F1ZYIXCP", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KRISOQ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F1KRISOQ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2M9MBDS "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F2M9MBDS", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0L9F18R "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F0L9F18R", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NS_7PT "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0AO8, "fileref:F0NS_7PT", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMCLASSIFICATION", "Misclassification Table", "NAME=EMCLASSIFICATION TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file MISCTABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMEVENTREPORT", "EVENTRATE", "NAME=EMEVENTREPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EVENTRATE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_PLOTDS", "PLOTDS", "NAME=PLOTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PLOTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_WEIGHTDS", "WEIGHTDS", "NAME=WEIGHTDS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file WEIGHTDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0AO8, "work", "Neural_EMESTIMATE", "HISTWEIGHT", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file HISTWEIGHT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack0AO8, rc, "NESTED_NAME", "Neural");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0C49 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0C49, "Regression", ' NAME="Reg"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Regression began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2HFGVRM "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Reg_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F2HFGVRM", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Reg_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0G0CUYY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F0G0CUYY", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3P4J8O4 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F3P4J8O4", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2D9T2DV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F2D9T2DV", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1AN306W "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F1AN306W", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0HN3LHV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F0HN3LHV", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1B7EA2B "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F1B7EA2B", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01TNR5D "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F01TNR5D", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F15O8T_F "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F15O8T_F", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3MN9NVD "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0C49, "fileref:F3MN9NVD", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMCLASSIFICATION", "Misclassification Table", "NAME=EMCLASSIFICATION TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file MISCTABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMEVENTREPORT", "EVENTRATE", "NAME=EMEVENTREPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EVENTRATE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EFFECTS", "Effects", "NAME=EFFECTS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REGEFFECTS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_EMESTIMATE", "ESTIMATEDS", "NAME=EMESTIMATE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEDS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0C49, "work", "Reg_ESTIMATEGRID", "ESTIMATEGRID", "NAME=ESTIMATEGRID TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ESTIMATEGRID inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack0C49, rc, "NESTED_NAME", "Reg");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3PI3 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3PI3, "Decision Tree", ' NAME="Tree"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Decision Tree began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1G3N4HZ "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Tree_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1G3N4HZ", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Tree_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KQYC6X "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1KQYC6X", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1BX5KWZ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1BX5KWZ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VLKW07 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F2VLKW07", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Y6A_BV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F2Y6A_BV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_NI_BV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F0_NI_BV", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1OXN16C "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1OXN16C", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1EZK5WC "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1EZK5WC", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1X49RUF "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F1X49RUF", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F28LX1C8 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F28LX1C8", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMREPORTFIT", "Tabular fit statistics", "NAME=EMREPORTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file REPORTFITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMCLASSIFICATION", "Misclassification Table", "NAME=EMCLASSIFICATION TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file MISCTABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_EMEVENTREPORT", "EVENTRATE", "NAME=EMEVENTREPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EVENTRATE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3IUACKW "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3PI3, "fileref:F3IUACKW", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=ENGLISHRULES TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_TREE_PLOT", "TREE", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_OUTSEQ", "SUBTREE", "NAME=OUTSEQ TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SUBTREE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3PI3, "work", "Tree_OUTSTATS", "OUTSTATS", "NAME=OUTSTATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file OUTSTATS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack3PI3, rc, "NESTED_NAME", "Tree");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack19H0 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack19H0, "Task-2  Model Comparison", ' NAME="MdlComp"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Task-2  Model Comparison began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F27OUK_L "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\MdlComp_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F27OUK_L", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3O_IVO_ "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F3O_IVO_", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JK6FHT "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F1JK6FHT", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2KTXMPY "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F2KTXMPY", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3505793 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F3505793", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2SFFJIM "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F2SFFJIM", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1H7NW43 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F1H7NW43", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2U094EV "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F2U094EV", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F242ZCN4 "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F242ZCN4", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0F_Q__L "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack19H0, "fileref:F0F_Q__L", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMRANK", "Assessment decile statistics", "NAME=EMRANK TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSRANK inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMSCOREDIST", "Assessment score distribution statistics", "NAME=EMSCOREDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSSCOREDIST inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMOUTFIT", "Fit statistics", "NAME=EMOUTFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file FITSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMCLASSIFICATION", "CLASSIFICATION", "NAME=EMCLASSIFICATION TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLASSIFICATION inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_EMROC", "ASSESSROC", "NAME=EMROC TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file ASSESSROC inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack19H0, "work", "MdlComp_COMPAREFIT", "COMPAREFIT", "NAME=COMPAREFIT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file COMPAREFIT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack19H0, rc, "NESTED_NAME", "MdlComp");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0QTM = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0QTM, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack0QTM, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1V76H_S "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QTM, "fileref:F1V76H_S", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3G4IJGU "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QTM, "fileref:F3G4IJGU", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F38BBQLP "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QTM, "fileref:F38BBQLP", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0C39G5X "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33L5, "fileref:F0C39G5X", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3VU8 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3VU8, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack33L5, Pack3VU8, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3UZV = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3UZV, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3VU8, Pack3UZV, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2NFTMHG "C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3UZV, "fileref:F2NFTMHG", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1LJC = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1LJC, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3VU8, Pack1LJC, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack33L5, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack33L5 successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack33L5, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack33L5 ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package ModelCompare began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\output.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\target.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\statistic.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Reports\20161277_Assignment3_MdlComp_20ZQ0\miningResult.xml inserted successfully.
Package File Import began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package StatExplore began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Stat_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Stat\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLASS inserted successfully.
CSV file INTERVAL inserted successfully.
CSV file CHIMEASURE inserted successfully.
CSV file CHI2 inserted successfully.
CSV file WORTH inserted successfully.
spk_PACKAGEINSERT_note
Package Transform Variables began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Trans_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Trans\EMCUSTOMGRAPH.xml inserted successfully.
CSV file TRANSSTAT inserted successfully.
CSV file FORMULA inserted successfully.
spk_PACKAGEINSERT_note
Package Data Partition began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Part_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Part\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLASSSTAT inserted successfully.
spk_PACKAGEINSERT_note
Package Variable Clustering began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\VarClus_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMCUSTOMGRAPH.xml inserted successfully.
CSV file selectedvariables inserted successfully.
CSV file varfreqbycluster inserted successfully.
CSV file varseltable inserted successfully.
CSV file clusterplot inserted successfully.
CSV file clusterplot inserted successfully.
CSV file dendrogram inserted successfully.
CSV file varcorr inserted successfully.
CSV file cluscorr inserted successfully.
CSV file corrstruct inserted successfully.
spk_PACKAGEINSERT_note
Package Neural Network began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Neural_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Neural\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file MISCTABLE inserted successfully.
CSV file EVENTRATE inserted successfully.
CSV file PLOTDS inserted successfully.
CSV file WEIGHTDS inserted successfully.
CSV file HISTWEIGHT inserted successfully.
spk_PACKAGEINSERT_note
Package Regression began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Reg_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Reg\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file MISCTABLE inserted successfully.
CSV file EVENTRATE inserted successfully.
CSV file REGEFFECTS inserted successfully.
CSV file ESTIMATEDS inserted successfully.
CSV file ESTIMATEGRID inserted successfully.
spk_PACKAGEINSERT_note
Package Decision Tree began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\Tree_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file REPORTFITSTAT inserted successfully.
CSV file MISCTABLE inserted successfully.
CSV file EVENTRATE inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\Tree\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file TREE inserted successfully.
CSV file SUBTREE inserted successfully.
CSV file OUTSTATS inserted successfully.
spk_PACKAGEINSERT_note
Package Task-2  Model Comparison began successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\MdlComp_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\MdlComp\EMCUSTOMGRAPH.xml inserted successfully.
CSV file ASSESSRANK inserted successfully.
CSV file ASSESSSCOREDIST inserted successfully.
CSV file FITSTAT inserted successfully.
CSV file CLASSIFICATION inserted successfully.
CSV file ASSESSROC inserted successfully.
CSV file COMPAREFIT inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_3590PCA\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\27\SAS Temporary Files\_TD28332_BA-TEACHING_\Prc2\P_1YJPG0Cscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack33L5 successfully.
Package Pack33L5 ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F2GU038J;
MPRINT(EM_DIAGRAM):   filename F1QNDC1K;
MPRINT(EM_DIAGRAM):   filename F0S72ZS0;
MPRINT(EM_DIAGRAM):   filename F217HJGT;
MPRINT(EM_DIAGRAM):   filename F1DMKMHU;
MPRINT(EM_DIAGRAM):   filename F1SO7PGP;
MPRINT(EM_DIAGRAM):   filename F1R7OWU3;
MPRINT(EM_DIAGRAM):   filename F2149I2_;
MPRINT(EM_DIAGRAM):   filename F2NOAQCU;
MPRINT(EM_DIAGRAM):   filename F3J4OAF2;
MPRINT(EM_DIAGRAM):   filename F2L2_F29;
MPRINT(EM_DIAGRAM):   filename F2L_TSRG;
MPRINT(EM_DIAGRAM):   filename F3QDIP8P;
MPRINT(EM_DIAGRAM):   filename F0LUQGDW;
MPRINT(EM_DIAGRAM):   filename F0RR0_J5;
MPRINT(EM_DIAGRAM):   filename F1NRMPXP;
MPRINT(EM_DIAGRAM):   filename F2HJ1QWQ;
MPRINT(EM_DIAGRAM):   filename F0KODGV8;
MPRINT(EM_DIAGRAM):   filename F0WDRUNE;
MPRINT(EM_DIAGRAM):   filename F3F74JLT;
MPRINT(EM_DIAGRAM):   filename F0QMFOXP;
MPRINT(EM_DIAGRAM):   filename F09LBUHU;
MPRINT(EM_DIAGRAM):   filename F2B12JBO;
MPRINT(EM_DIAGRAM):   filename F1I3XE3U;
MPRINT(EM_DIAGRAM):   filename F2VZYZSM;
MPRINT(EM_DIAGRAM):   filename F0ZVETKS;
MPRINT(EM_DIAGRAM):   filename F0XFIVFJ;
MPRINT(EM_DIAGRAM):   filename F17PVE_7;
MPRINT(EM_DIAGRAM):   filename F0IP5G10;
MPRINT(EM_DIAGRAM):   filename F0P6XR9W;
MPRINT(EM_DIAGRAM):   filename F038UMGK;
MPRINT(EM_DIAGRAM):   filename F3W0DHGN;
MPRINT(EM_DIAGRAM):   filename F3X25WC3;
MPRINT(EM_DIAGRAM):   filename F28G57KU;
MPRINT(EM_DIAGRAM):   filename F2ZML19G;
MPRINT(EM_DIAGRAM):   filename F1_MW48Q;
MPRINT(EM_DIAGRAM):   filename F0BI4VGA;
MPRINT(EM_DIAGRAM):   filename F34EHU8J;
MPRINT(EM_DIAGRAM):   filename F3JZ8M6J;
MPRINT(EM_DIAGRAM):   filename F03P7A5P;
MPRINT(EM_DIAGRAM):   filename F3T_I32Z;
MPRINT(EM_DIAGRAM):   filename F0ZXVEEG;
MPRINT(EM_DIAGRAM):   filename F1T0TKW8;
MPRINT(EM_DIAGRAM):   filename F25GF6J5;
MPRINT(EM_DIAGRAM):   filename F1KNP45W;
MPRINT(EM_DIAGRAM):   filename F3CEPLVO;
MPRINT(EM_DIAGRAM):   filename F08RM6QN;
MPRINT(EM_DIAGRAM):   filename F2R_0P0_;
MPRINT(EM_DIAGRAM):   filename F151S522;
MPRINT(EM_DIAGRAM):   filename F1GASA11;
MPRINT(EM_DIAGRAM):   filename F2T9V_QH;
MPRINT(EM_DIAGRAM):   filename F1HKL_5R;
MPRINT(EM_DIAGRAM):   filename F1ZYIXCP;
MPRINT(EM_DIAGRAM):   filename F1KRISOQ;
MPRINT(EM_DIAGRAM):   filename F2M9MBDS;
MPRINT(EM_DIAGRAM):   filename F0L9F18R;
MPRINT(EM_DIAGRAM):   filename F0NS_7PT;
MPRINT(EM_DIAGRAM):   filename F2HFGVRM;
MPRINT(EM_DIAGRAM):   filename F0G0CUYY;
MPRINT(EM_DIAGRAM):   filename F3P4J8O4;
MPRINT(EM_DIAGRAM):   filename F2D9T2DV;
MPRINT(EM_DIAGRAM):   filename F1AN306W;
MPRINT(EM_DIAGRAM):   filename F0HN3LHV;
MPRINT(EM_DIAGRAM):   filename F1B7EA2B;
MPRINT(EM_DIAGRAM):   filename F01TNR5D;
MPRINT(EM_DIAGRAM):   filename F15O8T_F;
MPRINT(EM_DIAGRAM):   filename F3MN9NVD;
MPRINT(EM_DIAGRAM):   filename F1G3N4HZ;
MPRINT(EM_DIAGRAM):   filename F1KQYC6X;
MPRINT(EM_DIAGRAM):   filename F1BX5KWZ;
MPRINT(EM_DIAGRAM):   filename F2VLKW07;
MPRINT(EM_DIAGRAM):   filename F2Y6A_BV;
MPRINT(EM_DIAGRAM):   filename F0_NI_BV;
MPRINT(EM_DIAGRAM):   filename F1OXN16C;
MPRINT(EM_DIAGRAM):   filename F1EZK5WC;
MPRINT(EM_DIAGRAM):   filename F1X49RUF;
MPRINT(EM_DIAGRAM):   filename F28LX1C8;
MPRINT(EM_DIAGRAM):   filename F3IUACKW;
MPRINT(EM_DIAGRAM):   filename F27OUK_L;
MPRINT(EM_DIAGRAM):   filename F3O_IVO_;
MPRINT(EM_DIAGRAM):   filename F1JK6FHT;
MPRINT(EM_DIAGRAM):   filename F2KTXMPY;
MPRINT(EM_DIAGRAM):   filename F3505793;
MPRINT(EM_DIAGRAM):   filename F2SFFJIM;
MPRINT(EM_DIAGRAM):   filename F1H7NW43;
MPRINT(EM_DIAGRAM):   filename F2U094EV;
MPRINT(EM_DIAGRAM):   filename F242ZCN4;
MPRINT(EM_DIAGRAM):   filename F0F_Q__L;
MPRINT(EM_DIAGRAM):   filename F1V76H_S;
MPRINT(EM_DIAGRAM):   filename F3G4IJGU;
MPRINT(EM_DIAGRAM):   filename F38BBQLP;
MPRINT(EM_DIAGRAM):   filename F0C39G5X;
MPRINT(EM_DIAGRAM):   filename F2NFTMHG;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
1 
1 
1 
40253      proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
40254      run;
MPRINT(EM_DIAGRAM):   run;

