*****************************************;
*** Begin Scoring Code from PROC DMVQ ***;
*****************************************;


*** Begin Class Look-up, Standardization, Replacement ;
drop _dm_bad; _dm_bad = 0;

*** Standardize Age ;
drop T_Age ;
if missing( Age ) then T_Age = .;
else T_Age = (Age - 44.8379970544919) * 0.10244262604028;

*** Standardize Balance ;
drop T_Balance ;
if missing( Balance ) then T_Balance = .;
else T_Balance = (Balance - 91108.5393372606) * 0.00001713479062;

*** Standardize CreditScore ;
drop T_CreditScore ;
if missing( CreditScore ) then T_CreditScore = .;
else T_CreditScore = (CreditScore - 645.351497299951) * 0.00996795276773;

*** Standardize EstimatedSalary ;
drop T_EstimatedSalary ;
if missing( EstimatedSalary ) then T_EstimatedSalary = .;
else T_EstimatedSalary = (EstimatedSalary
         - 101465.677530682) * 0.00001726745373;

*** Standardize NumOfProducts ;
drop T_NumOfProducts ;
if missing( NumOfProducts ) then T_NumOfProducts = .;
else T_NumOfProducts = (NumOfProducts - 1.47520864015709) * 1.24762865485012;

*** Standardize Tenure ;
drop T_Tenure ;
if missing( Tenure ) then T_Tenure = .;
else T_Tenure = (Tenure - 4.9327442317133) * 0.34058712750009;

*** Generate dummy variables for Country ;
drop CountryFrance CountryGermany CountrySpain ;
if missing( Country ) then do;
   CountryFrance = .;
   CountryGermany = .;
   CountrySpain = .;
end;
else do;
   length _dm7 $ 7; drop _dm7 ;
   _dm7 = put( Country , $7. );
   %DMNORMIP( _dm7 )
   if _dm7 = 'GERMANY'  then do;
      CountryFrance = -0.4689785429911;
      CountryGermany = 0.70751193611726;
      CountrySpain = -0.29108160327617;
   end;
   else if _dm7 = 'FRANCE'  then do;
      CountryFrance = 0.71041564475319;
      CountryGermany = -0.47090328372808;
      CountrySpain = -0.29108160327617;
   end;
   else if _dm7 = 'SPAIN'  then do;
      CountryFrance = -0.4689785429911;
      CountryGermany = -0.47090328372808;
      CountrySpain = 1.14459206711986;
   end;
   else do;
      CountryFrance = .;
      CountryGermany = .;
      CountrySpain = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for Gender ;
drop GenderFemale GenderMale ;
if missing( Gender ) then do;
   GenderFemale = .;
   GenderMale = .;
end;
else do;
   length _dm6 $ 6; drop _dm6 ;
   _dm6 = put( Gender , $6. );
   %DMNORMIP( _dm6 )
   if _dm6 = 'FEMALE'  then do;
      GenderFemale = 0.62770368870745;
      GenderMale = -0.62770368870745;
   end;
   else if _dm6 = 'MALE'  then do;
      GenderFemale = -0.79616314191291;
      GenderMale = 0.79616314191291;
   end;
   else do;
      GenderFemale = .;
      GenderMale = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for HasCreditCard ;
drop HasCreditCardNo HasCreditCardYes ;
if missing( HasCreditCard ) then do;
   HasCreditCardNo = .;
   HasCreditCardYes = .;
end;
else do;
   length _dm3 $ 3; drop _dm3 ;
   _dm3 = put( HasCreditCard , $3. );
   %DMNORMIP( _dm3 )
   if _dm3 = 'YES'  then do;
      HasCreditCardNo = -0.46382442740522;
      HasCreditCardYes = 0.46382442740522;
   end;
   else if _dm3 = 'NO'  then do;
      HasCreditCardNo = 1.07746490150903;
      HasCreditCardYes = -1.07746490150903;
   end;
   else do;
      HasCreditCardNo = .;
      HasCreditCardYes = .;
      _DM_BAD = 1;
   end;
end;

*** Generate dummy variables for IsActiveMember ;
drop IsActiveMemberNo IsActiveMemberYes ;
if missing( IsActiveMember ) then do;
   IsActiveMemberNo = .;
   IsActiveMemberYes = .;
end;
else do;
   length _dm3 $ 3; drop _dm3 ;
   _dm3 = put( IsActiveMember , $3. );
   %DMNORMIP( _dm3 )
   if _dm3 = 'NO'  then do;
      IsActiveMemberNo = 0.5311492247447;
      IsActiveMemberYes = -0.5311492247447;
   end;
   else if _dm3 = 'YES'  then do;
      IsActiveMemberNo = -0.9408929124049;
      IsActiveMemberYes = 0.9408929124049;
   end;
   else do;
      IsActiveMemberNo = .;
      IsActiveMemberYes = .;
      _DM_BAD = 1;
   end;
end;

*** End Class Look-up, Standardization, Replacement ;


*** Omitted Cases;
if _dm_bad then do;
   _SEGMENT_ = .; Distance = .;
   goto CLUSvlex ;
end; *** omitted;

*** Compute Distances and Cluster Membership;
label _SEGMENT_ = 'Segment Id' ;
label Distance = 'Distance' ;
array CLUSvads [5] _temporary_;
drop _vqclus _vqmvar _vqnvar;
_vqmvar = 0;
do _vqclus = 1 to 5; CLUSvads [_vqclus] = 0; end;
if not missing( T_Age ) then do;
   CLUSvads [1] + ( T_Age - -0.01107527688125 )**2;
   CLUSvads [2] + ( T_Age - 0.02324304778504 )**2;
   CLUSvads [3] + ( T_Age - 0.15033311687726 )**2;
   CLUSvads [4] + ( T_Age - -0.1210803650093 )**2;
   CLUSvads [5] + ( T_Age - -0.01791871272042 )**2;
end;
else _vqmvar + 1;
if not missing( T_Balance ) then do;
   CLUSvads [1] + ( T_Balance - -1.41972160215268 )**2;
   CLUSvads [2] + ( T_Balance - 0.02821172079979 )**2;
   CLUSvads [3] + ( T_Balance - 0.5320326471595 )**2;
   CLUSvads [4] + ( T_Balance - 0.58508801882431 )**2;
   CLUSvads [5] + ( T_Balance - -0.06733907340743 )**2;
end;
else _vqmvar + 1;
if not missing( T_CreditScore ) then do;
   CLUSvads [1] + ( T_CreditScore - 0.04344305756875 )**2;
   CLUSvads [2] + ( T_CreditScore - 0.04249344760845 )**2;
   CLUSvads [3] + ( T_CreditScore - -0.57859992861114 )**2;
   CLUSvads [4] + ( T_CreditScore - 0.35669014739369 )**2;
   CLUSvads [5] + ( T_CreditScore - 0.01721820049563 )**2;
end;
else _vqmvar + 1;
if not missing( T_EstimatedSalary ) then do;
   CLUSvads [1] + ( T_EstimatedSalary - -0.08759463112551 )**2;
   CLUSvads [2] + ( T_EstimatedSalary - 0.02123693930344 )**2;
   CLUSvads [3] + ( T_EstimatedSalary - 0.52079719833856 )**2;
   CLUSvads [4] + ( T_EstimatedSalary - -0.40076668977918 )**2;
   CLUSvads [5] + ( T_EstimatedSalary - 0.07697166104635 )**2;
end;
else _vqmvar + 1;
if not missing( T_NumOfProducts ) then do;
   CLUSvads [1] + ( T_NumOfProducts - -0.35267954903557 )**2;
   CLUSvads [2] + ( T_NumOfProducts - -0.32621519637171 )**2;
   CLUSvads [3] + ( T_NumOfProducts - -0.30622250232313 )**2;
   CLUSvads [4] + ( T_NumOfProducts - -0.38453241150744 )**2;
   CLUSvads [5] + ( T_NumOfProducts - 2.16620884351669 )**2;
end;
else _vqmvar + 1;
if not missing( T_Tenure ) then do;
   CLUSvads [1] + ( T_Tenure - -0.09160129221369 )**2;
   CLUSvads [2] + ( T_Tenure - -0.0102422982136 )**2;
   CLUSvads [3] + ( T_Tenure - 0.59559080952925 )**2;
   CLUSvads [4] + ( T_Tenure - -0.40570518468486 )**2;
   CLUSvads [5] + ( T_Tenure - 0.04732129677804 )**2;
end;
else _vqmvar + 1;
if not missing( CountryFrance ) then do;
   CLUSvads [1] + ( CountryFrance - 0.31728424883842 )**2;
   CLUSvads [2] + ( CountryFrance - -0.00532357605346 )**2;
   CLUSvads [3] + ( CountryFrance - -0.12716978361873 )**2;
   CLUSvads [4] + ( CountryFrance - -0.11727053471745 )**2;
   CLUSvads [5] + ( CountryFrance - 0.00024280052006 )**2;
end;
else _vqmvar + 0.33333333333333;
if not missing( CountryGermany ) then do;
   CLUSvads [1] + ( CountryGermany - -0.47090328372809 )**2;
   CLUSvads [2] + ( CountryGermany - -0.00763317821636 )**2;
   CLUSvads [3] + ( CountryGermany - 0.17214836365488 )**2;
   CLUSvads [4] + ( CountryGermany - 0.20615834357868 )**2;
   CLUSvads [5] + ( CountryGermany - -0.00629513253458 )**2;
end;
else _vqmvar + 0.33333333333333;
if not missing( CountrySpain ) then do;
   CLUSvads [1] + ( CountrySpain - 0.18747628685583 )**2;
   CLUSvads [2] + ( CountrySpain - 0.01577994459473 )**2;
   CLUSvads [3] + ( CountrySpain - -0.0549264042293 )**2;
   CLUSvads [4] + ( CountrySpain - -0.10841139471683 )**2;
   CLUSvads [5] + ( CountrySpain - 0.00737385508572 )**2;
end;
else _vqmvar + 0.33333333333333;
if not missing( GenderFemale ) then do;
   CLUSvads [1] + ( GenderFemale - 0.02624269991092 )**2;
   CLUSvads [2] + ( GenderFemale - -0.02173175502969 )**2;
   CLUSvads [3] + ( GenderFemale - 0.15927752510911 )**2;
   CLUSvads [4] + ( GenderFemale - -0.14509083367695 )**2;
   CLUSvads [5] + ( GenderFemale - 0.05101210497949 )**2;
end;
else _vqmvar + 0.5;
if not missing( GenderMale ) then do;
   CLUSvads [1] + ( GenderMale - -0.02624269991092 )**2;
   CLUSvads [2] + ( GenderMale - 0.02173175502969 )**2;
   CLUSvads [3] + ( GenderMale - -0.15927752510911 )**2;
   CLUSvads [4] + ( GenderMale - 0.14509083367695 )**2;
   CLUSvads [5] + ( GenderMale - -0.05101210497949 )**2;
end;
else _vqmvar + 0.5;
if not missing( HasCreditCardNo ) then do;
   CLUSvads [1] + ( HasCreditCardNo - -0.46382442740522 )**2;
   CLUSvads [2] + ( HasCreditCardNo - 1.07746490150903 )**2;
   CLUSvads [3] + ( HasCreditCardNo - -0.43967890267027 )**2;
   CLUSvads [4] + ( HasCreditCardNo - -0.46382442740522 )**2;
   CLUSvads [5] + ( HasCreditCardNo - -0.00530466288951 )**2;
end;
else _vqmvar + 0.49999999999999;
if not missing( HasCreditCardYes ) then do;
   CLUSvads [1] + ( HasCreditCardYes - 0.46382442740522 )**2;
   CLUSvads [2] + ( HasCreditCardYes - -1.07746490150903 )**2;
   CLUSvads [3] + ( HasCreditCardYes - 0.43967890267027 )**2;
   CLUSvads [4] + ( HasCreditCardYes - 0.46382442740522 )**2;
   CLUSvads [5] + ( HasCreditCardYes - 0.00530466288951 )**2;
end;
else _vqmvar + 0.49999999999999;
if not missing( IsActiveMemberNo ) then do;
   CLUSvads [1] + ( IsActiveMemberNo - 0.07853856763261 )**2;
   CLUSvads [2] + ( IsActiveMemberNo - -0.07564677072154 )**2;
   CLUSvads [3] + ( IsActiveMemberNo - 0.22367306032703 )**2;
   CLUSvads [4] + ( IsActiveMemberNo - -0.10390672706735 )**2;
   CLUSvads [5] + ( IsActiveMemberNo - -0.07560649486893 )**2;
end;
else _vqmvar + 0.5;
if not missing( IsActiveMemberYes ) then do;
   CLUSvads [1] + ( IsActiveMemberYes - -0.07853856763261 )**2;
   CLUSvads [2] + ( IsActiveMemberYes - 0.07564677072154 )**2;
   CLUSvads [3] + ( IsActiveMemberYes - -0.22367306032703 )**2;
   CLUSvads [4] + ( IsActiveMemberYes - 0.10390672706735 )**2;
   CLUSvads [5] + ( IsActiveMemberYes - 0.07560649486893 )**2;
end;
else _vqmvar + 0.5;
_vqnvar = 10 - _vqmvar;
if _vqnvar <= 1.7053025658242E-11 then do;
   _SEGMENT_ = .; Distance = .;
end;
else do;
   _SEGMENT_ = 1; Distance = CLUSvads [1];
   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
   do _vqclus = 2 to 5;
      if CLUSvads [_vqclus] < _vqfzdst then do;
         _SEGMENT_ = _vqclus; Distance = CLUSvads [_vqclus];
         _vqfzdst = Distance * 0.99999999999988;
      end;
   end;
   Distance = sqrt(Distance * (10 / _vqnvar));
end;
CLUSvlex :;

***************************************;
*** End Scoring Code from PROC DMVQ ***;
***************************************;
*------------------------------------------------------------*;
* Clus: Creating Segment Label;
*------------------------------------------------------------*;
length _SEGMENT_LABEL_ $80;
label _SEGMENT_LABEL_='Segment Description';
if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
else
if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
else
if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
else
if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
else
if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
