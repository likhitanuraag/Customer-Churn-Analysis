*------------------------------------------------------------*
User:                20161277
Date:                October 23, 2020
Time:                19:46:54
Site:                10008783
Platform:            X64_DS08R2
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                October 23, 2020
Time:                19:46:46
*------------------------------------------------------------*
14714  proc freq data=EMWS1.VarClus_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.VarClusMETA;
14716  run;
 
NOTE: There were 13 observations read from the data set EMWS1.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14717  proc print data=WORK.VarClusMETA label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;
 
NOTE: There were 4 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14723  title10;
 
14724  %let EMEXCEPTIONSTRING=;
15075  *------------------------------------------------------------*;
15076  * VarClus: Generation of macros and macro variables;
15077  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15078  *------------------------------------------------------------*;
 
15079  %let EMEXCEPTIONSTRING=;
15080  *------------------------------------------------------------*;
15081  * TRAIN: VarClus;
15082  *------------------------------------------------------------*;
15083  %let EM_ACTION = TRAIN;
15084  %let syscc = 0;
15085
15086  %macro main;
15087
15088     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
15089     %include temp;
15090     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
15091     %include temp;
15092     filename temp;
15093
15094    %SetProperties;
15095
15096     %if %upcase(&EM_ACTION) = CREATE %then %do;
15097         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
15098         %include temp;
15099         filename temp;
15100         %create;
15101     %end;
15102     %else
15103     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15104          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
15105             %include temp;
15106             filename temp;
15107             %train;
15108     %end;
15109     %else
15110     %if %upcase(&EM_ACTION) = SCORE %then %do;
15111             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
15112             %include temp;
15113             filename temp;
15114             %score;
15115     %end;
15116     %else
15117     %if %upcase(&EM_ACTION) = REPORT %then %do;
15118             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
15119             %include temp;
15120             filename temp;
15121             %report;
15122     %end;
15123     /*
15124     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
15125         %put 'OPENING TABLE';
15126     %end;
15127     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
15128         %put 'CLOSE TABLE';
15129     %end;
15130     */
15131  %mend main;
15132  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
15133 +
15134 +/* Initialize property macro variables */
15135 +%macro SetProperties;
15136 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
15137 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
15138 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
15139 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
15140 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
15141 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
15142 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
15143 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
15144 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
15145 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
15146 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
15147 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
15148 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
15149 +
15150 +%mend SetProperties;
15151 +
15152 +%Macro MakeDummyVariables(indata=,
15153 +                          outvar=,
15154 +                          outdata=,
15155 +                          fileref=,
15156 +                          recreatecmeta=N, /* optional */
15157 +                          incmeta=,     /* optional */
15158 +                          outcmeta=,    /* optional */
15159 +                          ndummyvars=_ndummyvars
15160 +                          );
15161 +    %global &ndummyvars;
15162 +
15163 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
15164 +       class
15165 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15166 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15167 +    ;
15168 +    run;
15169 +    %let &ndummyvars = 0;
15170 +    data _null_;
15171 +    %let dsid = %sysfunc(open(work._classout));
15172 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
15173 +    %let dsid = %sysfunc(close(&dsid));
15174 +    run;
15175 +
15176 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
15177 +       input
15178 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15179 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15180 +        / level=nominal stdize=no;
15181 +       make outvar = &outvar;
15182 +       score data = &indata out =&outdata;
15183 +       code  file=  "&fileref";
15184 +    run;
15185 +    %if &recreatecmeta eq Y %then %do;
15186 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
15187 +    data _tmpds;
15188 +        set _tmpds;
15189 +           ROLE = 'INPUT';
15190 +           LEVEL = 'INTERVAL';
15191 +           CREATOR='DMZIP';
15192 +           if NAME = '_TYPE_' then delete;
15193 +    run;
15194 +    data &outcmeta;
15195 +         set &incmeta _tmpds;
15196 +    run;
15197 +    %end;
15198 +    proc datasets lib=work nolist;
15199 +      delete  _dmdbdat _dmdbcat _classout
15200 +    %if &recreatecmeta eq Y %then %do;
15201 +    _tmpds
15202 +    %end;
15203 +    ;
15204 +    quit;
15205 +%Mend MakeDummyVariables;
15206 +
15207 +/*--- Determine Optimal Number of Cluster ----
15208 +%macro FindClusNum(statds=, groupds=, minvariation=);
15209 +   %global optnclus;
15210 +   data varclus_tmp(drop=_NAME_);
15211 +      set &statDs;
15212 +      where _type_ ='PROPOR';
15213 +   run;
15214 +   proc sort data=varclus_tmp;
15215 +      by _NCL_;
15216 +   run;
15217 +   proc transpose data=varclus_tmp out=varclus_tmp;
15218 +      by _NCL_;
15219 +      var %EM_INTERVAL_INPUT
15220 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15221 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
15222 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
15223 +          %do i = 2 %to &nvar;
15224 +          %let varname = %sysfunc(varname(&dsid, &i));
15225 +          &varname
15226 +          %end;
15227 +      %end;
15228 +   ;
15229 +   run;
15230 +
15231 +   %if &minVariation eq %then %do;
15232 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
15233 +   %end;
15234 +   %if ^(0<&minVariation<100) %then %do;
15235 +       %let minVariation = 90;
15236 +   %end;
15237 +
15238 +   data _null_;
15239 +      set varclus_tmp end=eof;
15240 +      by _NCL_;
15241 +      retain flag 0;
15242 +      if first._ncl_ then flag=0;
15243 +      if .<col1 < &minVariation then flag=1;
15244 +      if last._ncl_ and ^flag then do;
15245 +         call symput('OPTNCL', _ncl_);
15246 +         stop;
15247 +      end;
15248 +     if eof then call symput('OPTNCL', _ncl_);
15249 +   run;
15250 +
15251 +   %let optnclus = &OPTNCL;
15252 +
15253 +   data varclus_tmp(drop=_NCL_ _NAME_);
15254 +      set &statDs;
15255 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
15256 +   run;
15257 +   proc sort data=varclus_tmp;
15258 +      by _TYPE_;
15259 +   run;
15260 +   proc transpose data=varclus_tmp out=varclus_tmp;
15261 +      by _TYPE_;
15262 +   run;
15263 +   proc sort data=varclus_tmp;
15264 +      by _name_ _type_;
15265 +   run;
15266 +
15267 +  proc transpose data=varclus_tmp out=&groupds;
15268 +      by _NAME_;
15269 +   run;
15270 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
15271 +      by Cluster descending Rsquare;
15272 +      where Cluster ne 0;
15273 +   run;
15274 +   proc datasets lib=work nolist mt=(DATA VIEW);
15275 +      delete varclus_tmp;
15276 +   run;
15277 +   quit;
15278 +%mend findClusNum;
15279 +*/
15280 +
15281 +%macro getNclusfromTrain(inoutstat=, nc=);
15282 +%global &nc;
15283 +data _null_;
15284 +    set &inoutstat end=eof;
15285 +    if eof then do;
15286 +    call symput("&nc", _ncl_);
15287 +    end;
15288 +run;
15289 +%mend  getNclusfromTrain;
15290 +
15291 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
15292 +
15293 +     *--- Build Code to Modify Metadata ---*;
15294 +     filename X "&deltacodefile";
15295 +     data _null_;
15296 +        FILE X;
15297 +        set &groupds end=eof;
15298 +        /*by Cluster;*/
15299 +         if _N_=1 then do;
15300 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
15301 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
15302 +           %end;
15303 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
15304 +           put "if upcase(strip(NAME)) in (";
15305 +        end;
15306 +        if Strip(upcase(Selected)) eq 'YES' then do;
15307 +           string = '"'!!trim(left(VARIABLE))!!'"';
15308 +           put string;
15309 +        end;
15310 +        if eof then do;
15311 +           put ') then ROLE="INPUT";';
15312 +           put 'else ROLE="REJECTED";';
15313 +           put 'end;';
15314 +
15315 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
15316 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
15317 +           %end;
15318 +        end;
15319 +     run;
15320 +     quit;
15321 +
15322 +     filename X;
15323 +
15324 +     quit;
15325 +%mend MakeDeltaCode;
15326 +
15327 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
15328 +    %if ^%sysfunc(exist(&statds)) %then %do;
15329 +         %goto doendc;
15330 +    %end;
15331 +
15332 +    data &corrds(drop=_TYPE_ _NCL_) ;
15333 +       set &statds;
15334 +       where _type_ eq 'CORR' ;
15335 +    run ;
15336 +    proc sort data=&corrds;
15337 +       by _NAME_ ;
15338 +    run ;
15339 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
15340 +      BY _NAME_ ;
15341 +    run ;
15342 +    data &corrplotds;
15343 +       length _Y_ $100;
15344 +       set &corrplotDs;
15345 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
15346 +    run ;
15347 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
15348 +       set &corrplotds;
15349 +       where _LABEL_ ne '' ;
15350 +       keep _TMP_ _LABEL_ ;
15351 +    run ;
15352 +    data _null_;
15353 +       nobs=0;
15354 +       dsid = open('varclus_match');
15355 +       if dsid then do;
15356 +          nobs = attrn(dsid, 'NOBS');
15357 +          dsid = close(dsid);
15358 +       end;
15359 +       call symput ('CORR_NOBS', nobs);
15360 +    run;
15361 +    %if &corr_nobs %then %do;
15362 +        proc sort data=varclus_match;
15363 +           by _name_;
15364 +        run ;
15365 +        proc sort data=&corrplotds;
15366 +           by _name_;
15367 +        run ;
15368 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
15369 +           merge varclus_match &corrplotds;
15370 +           by _NAME_ ;
15371 +           if _X_ eq '' then _X_=_NAME_ ;
15372 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15373 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
15374 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15375 +
15376 +       run ;
15377 +    %end;
15378 +    %else %do;
15379 +        proc sort data=&corrplotds;
15380 +           by _name_;
15381 +        run ;
15382 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
15383 +           set &corrplotds;
15384 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15385 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15386 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15387 +
15388 +        run ;
15389 +    %end;
15390 +    proc sort data=&corrplotds;
15391 +       by _X_ _Y_;
15392 +    run ;
15393 +    proc datasets lib=work nolist mt=(DATA VIEW);
15394 +       delete varclus_match;
15395 +    run;
15396 +    quit;
15397 +
15398 +%doendc:
15399 +
15400 +%mend MakeVarClusCorrData;
15401 +
15402 +%macro MakeStatPlotData(statds= , outstatplotds=);
15403 +   %if %sysfunc(exist(&statds)) %then %do;
15404 +
15405 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
15406 +          set &statDs;
15407 +          where _type_ in('MEAN', 'STD', 'N');
15408 +       run ;
15409 +       proc transpose data=varclus_tmp out=&outstatplotds;
15410 +          id _TYPE_ ;
15411 +       run ;
15412 +       data &outstatplotds;
15413 +          set &outstatplotds(obs=1000);
15414 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
15415 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
15416 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
15417 +          else SCALEDSTD= STD ;
15418 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
15419 +       run ;
15420 +       proc sort data=&outstatplotds;
15421 +          by descending SCALEDSTD ;
15422 +       run ;
15423 +       proc datasets lib=work nolist mt=(DATA VIEW);
15424 +          delete varclus_tmp;
15425 +       run;
15426 +       quit;
15427 +    %end;
15428 +
15429 +%mend MakeStatPlotData;
15430 +
15431 +
15432 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
15433 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
15434 +    data &EM_USER_OUTSTATSCORE;
15435 +          set &indata;
15436 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
15437 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
15438 +          if _TYPE_ = 'STD' then _NAME_='STD';
15439 +          DROP _TYPE_ _NCL_;
15440 +     run;
15441 +
15442 +     filename _file_  "&fileRef";
15443 +
15444 +     data _null_;
15445 +        FILE _file_ MOD;
15446 +        put ' ';
15447 +        put '/*-------------------------------------------------*/';
15448 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
15449 +        put '/*-------------------------------------------------*/';
15450 +        put ' ';
15451 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
15452 +
15453 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
15454 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
15455 +
15456 +        %let k = 1;
15457 +        %do %while(^%sysfunc(fetch(&dsid)));
15458 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15459 +                %if &k > 2 %then %do;
15460 +                 %let cn = %eval(&k-2);
15461 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
15462 +                %end;
15463 +                %let k = %eval(&k+1);
15464 +        %end;
15465 +
15466 +        %let rc = %sysfunc(rewind(&dsid));
15467 +
15468 +        %do i= 2 %to &nvar;
15469 +            %let _varname =  %sysfunc(varname(&dsid, &i));
15470 +            %do %while(^%sysfunc(fetch(&dsid)));
15471 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
15472 +                %if &_name = MEAN %then
15473 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
15474 +                %else %if &_name = STD %then
15475 +                %let _std = %sysfunc(getvarn(&dsid, &i));
15476 +                %else %do;
15477 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
15478 +                      %let abscoeff = %sysfunc(abs(&coeff));
15479 +                          %if &abscoeff >  0 %then %do;
15480 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
15481 +                           %end;
15482 +                 %end;
15483 +             %end;
15484 +             %let rc = %sysfunc(rewind(&dsid));
15485 +         %end;
15486 +
15487 +        %let dsid= %sysfunc(close(&dsid));
15488 +       run;
15489 +%mend CreateScoreCode;
15490 +
15491 +
15492 +
15493 +/*----------------------------------------------------------
15494 +    Instead of using %MakeRSquareData,
15495 +    %MakeVarClusResultTable at macro2.source is used
15496 + +----------------------------------------------------------*/
15497 +
15498 +
15499 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
15500 +
15501 +/* modifying  from ods rsquare = data */
15502 +
15503 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
15504 +    Length Cluster $16;
15505 +    length Variable $32;
15506 +    Length VariableLabel $64;
15507 +    set &indata; retain CurrentCluster;
15508 +    if NumberOfClusters ^= &ncluster then delete;
15509 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
15510 +    CurrentCluster = Cluster;
15511 +   run;
15512 +proc sort data =&outdata ;
15513 +     by Cluster RsquareRatio;
15514 +run;
15515 +data _tmprsq(drop=index);
15516 +     set &outdata; by Cluster;
15517 +     if first.Cluster then do;
15518 +     index = strip(scan(Cluster,2 ));
15519 +     Variable = "Clus"||index;
15520 +     VariableLabel = "Cluster Component "||index;
15521 +     OwnCluster = 1;
15522 +     NextClosest = .;
15523 +     RsquareRatio = 0;
15524 +     output;
15525 +     end;
15526 +run;
15527 +
15528 +proc sort data = _tmprsq ;
15529 +     by Cluster RsquareRatio;
15530 +run;
15531 +data &outdata;
15532 +     set &outdata _tmprsq;
15533 +by Cluster;
15534 +run;
15535 +
15536 +
15537 +/* Just create the Selected variable with all YES */
15538 +
15539 +data &outdata;
15540 +    set &outdata; by cluster;
15541 +    length Selected $8;
15542 +    Selected = 'YES';
15543 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15544 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15545 +    rename OwnCluster = RSqWithClusterComp;
15546 +    rename NextClosest = RSqWithNextClusComp;
15547 +run;
15548 +
15549 +
15550 +/* Selected = Y/N will be done %score section -----
15551 +
15552 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
15553 +data &outdata;
15554 +    set &outdata; by cluster;
15555 +    length Selected $8;
15556 +    if first.Cluster then Selected = 'YES';
15557 +    else Selected = 'NO';
15558 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15559 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15560 +    rename OwnCluster = RSqWithClusterComp;
15561 +    rename NextClosest = RSqWithNextClusComp;
15562 +run;
15563 +%end;
15564 +%else %do;
15565 +data &outdata;
15566 +    set &outdata; by cluster;
15567 +    if last.Cluster then Selected = 'YES';
15568 +    else Selected = 'NO';
15569 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
15570 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
15571 +    rename OwnCluster = RSqWithClusterComp;
15572 +    rename NextClosest = RSqWithNextClusComp;
15573 +run;
15574 +%end;
15575 +---------------------------------------------------------------*/
15576 +
15577 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
15578 +/* to calculate NextClosestClusRsq */
15579 +proc transpose data = &inClusRSquare  out=_clusRsq;
15580 +      by cluster;
15581 +      run;
15582 +data _clusRsq;
15583 +     set _clusRsq;
15584 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
15585 +run;
15586 +
15587 +proc sort data=_clusRsq;
15588 +    by cluster col1;
15589 +    run;
15590 +data _clusRsq(drop=_NAME_ _LABEL_);
15591 +     set _clusRsq; by cluster;
15592 +     if last.Cluster then output;
15593 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
15594 +     rename COL1 = RSqWithNextClusComp;
15595 +     rename Cluster = Variable;
15596 +     label  Cluster = "Variable";
15597 +run;
15598 +
15599 +proc sort data =&outdata;
15600 +     by Variable;
15601 +run;
15602 +data &outdata;
15603 +    merge &outdata _clusRsq;
15604 +    by Variable;
15605 +run;
15606 +proc sort data =&outdata;
15607 +by Cluster  RsquareRatio;
15608 +run;
15609 +quit;
15610 +%end;
15611 +
15612 +proc datasets lib = work nolist;
15613 +     delete _tmprsq _clusRsq;
15614 +     run;
15615 +quit;
15616 +
15617 +%mend MakeRSquareData;
15618 +
15619 +
15620 +/*-------------------------------------------------------------------------*/
15621 +
15622 +
15623 +
15624 +%macro ModifyCorr(indata=,
15625 +                  outdata=,
15626 +                  rsquare = Y
15627 +                  );
15628 +    data corr_tmp;
15629 +        set &indata;
15630 +    run;
15631 +     proc sql;
15632 +           update &indata
15633 +           set
15634 +     %let dsid = %sysfunc(open(work.corr_tmp));
15635 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
15636 +          %do i = 4 %to &nvar;
15637 +          %let _name = %sysfunc(varname(&dsid, &i));
15638 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
15639 +            %else  %let _name_md = &_name;
15640 +            %if &i < &nvar %then %do;
15641 +               &_name = 1- &_name_md ,
15642 +            %end;
15643 +            %else %do;
15644 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
15645 +            %end;
15646 +          %end;
15647 +      %let dsid= %sysfunc(close(&dsid));
15648 +
15649 +      select * from &indata;
15650 +      run;
15651 +      proc datasets lib = work nolist;
15652 +           delete corr_tmp;
15653 +      run;
15654 +      quit;
15655 +
15656 + %mend ModifyCorr;
15657 +
15658 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
15659 +    data &outdata(drop= _NCL_  _TYPE_);
15660 +       set &indata;
15661 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
15662 +       rename _NAME_ = Cluster;
15663 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15664 +    run;
15665 +    %if &RSquare eq Y %then %do;
15666 +     data corr_tmp;
15667 +        set &outdata;
15668 +     run;
15669 +
15670 +     data &outdata(drop=i);
15671 +          set &outdata;
15672 +          %let dsid = %sysfunc(open(work.corr_tmp));
15673 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15674 +          %do i = 2 %to &nvar;
15675 +            %let _name = %sysfunc(varname(&dsid, &i));
15676 +            %let _name_md = &_name.**2;
15677 +                &_name = &_name_md;
15678 +          %end;
15679 +      %let dsid= %sysfunc(close(&dsid));
15680 +      run;
15681 +      proc datasets lib = work nolist;
15682 +           delete corr_tmp;
15683 +      run;
15684 +
15685 +    %end;
15686 +     quit;
15687 +%mend MakeClusStructCorrData;
15688 +
15689 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
15690 +    data &outdata(drop= _NCL_  _TYPE_);
15691 +       set &indata;
15692 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15693 +       rename _NAME_ = Cluster;
15694 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15695 +    run;
15696 +    data corr_tmp;
15697 +        set &outdata;
15698 +    run;
15699 +
15700 +    %let dsid = %sysfunc(open(work.corr_tmp));
15701 +    %let nclus2= %eval(&ncluster+1);
15702 +    data &outdata;
15703 +         set &outdata;
15704 +          %do i = 2 %to &nclus2;
15705 +          %let i_1 = %eval(&i-1);
15706 +            %let _name = %sysfunc(varname(&dsid, &i));
15707 +            %let _newName = Clus&i_1;
15708 +                rename &_name = &_newName; ;
15709 +                *label &_name ="Cluster &i_1";
15710 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15711 +          %end;
15712 +          keep Cluster
15713 +          %do i = 2 %to &nclus2;
15714 +                %let _name = %sysfunc(varname(&dsid, &i));
15715 +                &_name
15716 +          %end;
15717 +          ;
15718 +    %let dsid= %sysfunc(close(&dsid));
15719 +     run;
15720 +     quit;
15721 +
15722 +    %if &RSquare eq Y %then %do;
15723 +
15724 +       data corr_tmp;
15725 +        set &outdata;
15726 +     run;
15727 +
15728 +     data &outdata(drop=i);
15729 +          set &outdata;
15730 +          %let dsid = %sysfunc(open(work.corr_tmp));
15731 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15732 +          %do i = 2 %to &nvar;
15733 +            %let _name = %sysfunc(varname(&dsid, &i));
15734 +            %let _name_md = &_name.**2;
15735 +                &_name = &_name_md;
15736 +          %end;
15737 +      %let dsid= %sysfunc(close(&dsid));
15738 +      run;
15739 +    %end;
15740 +
15741 +    %if &makeplotds eq Y %then %do;
15742 +     proc transpose data = &outdata
15743 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15744 +          by cluster;
15745 +     run;
15746 +     data &plotds;
15747 +          set  &plotds;
15748 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15749 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15750 +     run;
15751 +     %end;
15752 +     proc datasets lib = work nolist;
15753 +           delete corr_tmp;
15754 +     run;
15755 +     quit;
15756 +%mend MakeInterClusCorrData;
15757 +
15758 +
15759 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15760 +
15761 +data &outlink(drop = Selected);
15762 +     set &indata;
15763 +     LINKID = _N_;
15764 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15765 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15766 +run;
15767 +data &outnode(keep=NODEID TYPE LABEL);
15768 +    set &indata;
15769 +    length TYPE $16;
15770 +    rename Variable = NODEID;
15771 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15772 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15773 +    then  TYPE = "CLUSTER";
15774 +    else  TYPE="VARIABLE";
15775 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15776 +run;
15777 +quit;
15778 +%mend MakeClusConstellData;
15779 +
15780 +
15781 +
15782 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
15783 +
15784 +data &outlink(drop = Selected);
15785 +     set &indata;
15786 +     LINKID = _N_;
15787 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
15788 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
15789 +run;
15790 +data &outnode(keep=NODEID TYPE LABEL);
15791 +    set &indata;
15792 +    length TYPE $16;
15793 +    rename Variable = NODEID;
15794 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
15795 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
15796 +    then  TYPE = "CLUSTER";
15797 +    else  TYPE="VARIABLE";
15798 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
15799 +run;
15800 +quit;
15801 +%mend MakeClusConstellData;
15802 +
15803 +
15804 +/*--- This will work only when inds is not a view data -------
15805 +
15806 +%macro getNVarNObs(inds=, nvar=, nobs=);
15807 +
15808 +    %global &nvar;
15809 +    %global &nobs;
15810 +    data _null_;
15811 +         dsid = open("&inds");
15812 +         nv = attrn(dsid, 'NVAR');
15813 +         no = attrn(dsid, 'NOBS');
15814 +         dsid = close(dsid);
15815 +         call symput("&nvar", nv);
15816 +         call symput("&nobs", no);
15817 +    run;
15818 +    quit;
15819 +%mend  getNVarNObs;
15820 +
15821 ++---------------------------------------------------------------*/
15822 +
15823 +
15824 +%macro getNVar(inds=, nvar=);
15825 +    %global &nvar;
15826 +    data _null_;
15827 +         dsid = open("&inds");
15828 +         nv = attrn(dsid, 'NVAR');
15829 +         dsid = close(dsid);
15830 +         call symput("&nvar", nv);
15831 +    run;
15832 +    quit;
15833 +%mend  getNVar;
15834 +
15835 +
15836 +
15837 +%macro getNObs(inds=, nobs=);
15838 +    %global &nobs;
15839 +    data _null_;
15840 +        set &inds end=eof;
15841 +        if eof then call symput("&nobs", _N_);
15842 +    run;
15843 +    quit;
15844 +%mend  getNObs;
15845 +
15846 +%Macro CreateVarclusMeta(trainnum=);
15847 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
15848 +    data &EM_USER_VARCLUSMETA;
15849 +         length TrainNum 8.;
15850 +         length NewTrain $8;
15851 +         length NGCluster 8.;
15852 +         length ExportedComp $16;
15853 +         length HideVariable $8;
15854 +         TrainNum = &trainnum;
15855 +         NewTrain = "Y";
15856 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
15857 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
15858 +         NGCluster = 0; /* zero means no twostage */
15859 +   run;
15860 +   quit;
15861 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
15862 +
15863 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
15864 +    data &outdata(drop= _NCL_  _TYPE_);
15865 +       set &indata;
15866 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
15867 +       %if &globalclusid ne %then %do;
15868 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
15869 +       rename _NAME_ = Cluster;
15870 +       %end;
15871 +       %else %do;
15872 +        _NAME_ = upcase(_NAME_);
15873 +       rename _NAME_ = Cluster;
15874 +       %end;
15875 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15876 +    run;
15877 +    data corr_tmp;
15878 +        set &outdata;
15879 +    run;
15880 +
15881 +    %let dsid = %sysfunc(open(work.corr_tmp));
15882 +    %let nclus2= %eval(&ncluster+1);
15883 +    data &outdata;
15884 +         set &outdata;
15885 +          %do i = 2 %to &nclus2;
15886 +          %let i_1 = %eval(&i-1);
15887 +            %let _name = %sysfunc(varname(&dsid, &i));
15888 +            %if &globalclusid ne %then
15889 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
15890 +                     rename &_name = &_newName;
15891 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
15892 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
15893 +                %end;
15894 +            %else
15895 +                %do; %let _newName = CLUS&i_1;
15896 +                     rename &_name = &_newName;
15897 +                     *label &_name ="Cluster &i_1";
15898 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
15899 +                %end;
15900 +          %end;
15901 +          keep Cluster
15902 +          %do i = 2 %to &nclus2;
15903 +                %let _name = %sysfunc(varname(&dsid, &i));
15904 +                &_name
15905 +          %end;
15906 +          ;
15907 +    %let dsid= %sysfunc(close(&dsid));
15908 +     run;
15909 +     quit;
15910 +
15911 +    %if &RSquare eq Y %then %do;
15912 +
15913 +       data corr_tmp;
15914 +        set &outdata;
15915 +     run;
15916 +
15917 +     data &outdata;
15918 +          set &outdata;
15919 +          %let dsid = %sysfunc(open(work.corr_tmp));
15920 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
15921 +          %do i = 2 %to &nvar;
15922 +            %let _name = %sysfunc(varname(&dsid, &i));
15923 +            %let _name_md = &_name.**2;
15924 +                &_name = &_name_md;
15925 +          %end;
15926 +      %let dsid= %sysfunc(close(&dsid));
15927 +      run;
15928 +    %end;
15929 +
15930 +    %if &makeplotds eq Y %then %do;
15931 +     proc transpose data = &outdata
15932 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
15933 +          by cluster;
15934 +     run;
15935 +     data &plotds;
15936 +          set  &plotds;
15937 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15938 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
15939 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
15940 +     run;
15941 +     %end;
15942 +     proc datasets lib = work nolist;
15943 +           delete corr_tmp;
15944 +     run;
15945 +     quit;
15946 +%mend MakeInterClusCorrData;
15947 +
15948 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
15949 +    data _tmpds(drop= _NCL_);
15950 +       set &indata;
15951 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
15952 +       %if &globalclusid ne %then %do;
15953 +           _NAME_ = "GC&globalclusid.";
15954 +       rename _NAME_ = Cluster;
15955 +       %end;
15956 +       %else %do;
15957 +        _NAME_ = "CLUS";
15958 +        rename _NAME_ = Cluster;
15959 +       %end;
15960 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
15961 +    run;
15962 +    proc transpose data =_tmpds out =&outdata;
15963 +    run;
15964 +
15965 +    data &outdata(drop=COL1);
15966 +        %if &globalclusid ne %then %do;
15967 +        length GCluster $16;
15968 +        %end;
15969 +        length Cluster $32;
15970 +        length _NAME_ $32;
15971 +         set &outdata;
15972 +         _NAME_ = upcase(_NAME_);
15973 +         rename _NAME_=Variable;
15974 +         *label _NAME_="Variable";
15975 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
15976 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
15977 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
15978 +
15979 +         %if &globalclusid ne %then %do;
15980 +          GCluster = "GC&globalclusid";
15981 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
15982 +         %end;
15983 +         %else %do;
15984 +         Cluster = "CLUS"||strip(COL1);
15985 +        %end;
15986 +         rename COL2 = RSqWithOwnClusComp;
15987 +         *label COL2 = "R-Square With Own Cluster Component";
15988 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
15989 +
15990 +   run;
15991 +   proc sort data =&outdata;
15992 +        by Cluster RSqWithOwnClusComp;
15993 +   run;
15994 +   proc datasets lib = work nolist;
15995 +           delete _tmpds;
15996 +   run;
15997 +   quit;
15998 +%mend MakeOwnRSquare;
15999 +
16000 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
16001 +    data &outdata(drop= _NCL_  _TYPE_);
16002 +       %if &globalclusid ne %then %do;
16003 +        length GCluster $16;
16004 +        %end;
16005 +       set &indata;
16006 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
16007 +       %if &globalclusid ne %then %do;
16008 +         GCluster = "GC&globalclusid";
16009 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
16010 +         rename _NAME_ = Cluster;
16011 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16012 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16013 +
16014 +       %end;
16015 +       %else %do;
16016 +         _NAME_ = upcase(_NAME_);
16017 +         rename _NAME_ = Cluster;
16018 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16019 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16020 +
16021 +       %end;
16022 +     run;
16023 +    %if &RSquare eq Y %then %do;
16024 +     data corr_tmp;
16025 +          set &outdata;
16026 +     run;
16027 +     %let istart = 2;
16028 +     %if &globalclusid ne %then %let istart = 3;
16029 +     data &outdata;
16030 +          set &outdata;
16031 +          %let dsid = %sysfunc(open(work.corr_tmp));
16032 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16033 +          %do i =&istart %to &nvar;
16034 +            %let _name = %sysfunc(varname(&dsid, &i));
16035 +            %let _name_md = &_name.**2;
16036 +                &_name = &_name_md;
16037 +          %end;
16038 +      %let dsid= %sysfunc(close(&dsid));
16039 +      run;
16040 +      proc datasets lib = work nolist;
16041 +           delete corr_tmp;
16042 +      run;
16043 +    %end;
16044 +     quit;
16045 +%mend MakeClusStructCorrData;
16046 +
16047 +/*
16048 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
16049 +*/
16050 +
16051 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
16052 +
16053 +     /* The indata should be the outdata
16054 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
16055 +
16056 +     proc sort data =&indata out=_tmpclusRsq;
16057 +     by cluster;
16058 +     run;
16059 +
16060 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16061 +      by cluster;
16062 +     run;
16063 +
16064 +     proc sort data=_tmpclusRsq;
16065 +        by _NAME_ COL1;
16066 +     run;
16067 +
16068 +     data _tmpclusRsq;
16069 +         length _NAME_ $32;
16070 +         set _tmpclusRsq; by _NAME_;
16071 +          _NAME_ = upcase(_NAME_);
16072 +          %if &ncluster ne 1 %then %do;
16073 +             if last._NAME_ then delete;
16074 +          %end;
16075 +          %else %do;
16076 +             COL1 = 0;
16077 +          %end;
16078 +     run;
16079 +     /* need to sort again */
16080 +     proc sort data=_tmpclusRsq;
16081 +        by _NAME_ COL1;
16082 +     run;
16083 +
16084 +     data &outdata;
16085 +         set _tmpclusRsq; by _NAME_;
16086 +         Cluster = upcase(Cluster);
16087 +         if last._NAME_ then output;
16088 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16089 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16090 +         rename COL1 = RSqWithNextClusComp;
16091 +         Cluster = upcase(Cluster);
16092 +         rename Cluster = ClosestCluster;
16093 +         *label  Cluster = "Next Closest Cluster";
16094 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16095 +         rename _NAME_ = Variable;
16096 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16097 +    run;
16098 +
16099 +
16100 +    %if &globalclusid ne %then %do;
16101 +    data &outdata;
16102 +       length GCluster $16;
16103 +       set &outdata;
16104 +       GCluster = "GC&globalclusid";
16105 +       run;
16106 +    %end;
16107 +    proc datasets lib = work nolist;
16108 +           delete _tmpclusRsq;
16109 +    run;
16110 +    quit;
16111 +%mend FindNextClosestClusByVar;
16112 +
16113 +
16114 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
16115 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
16116 +     proc sort data =&indata out=_tmpclusRsq;
16117 +     by cluster;
16118 +     run;
16119 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
16120 +     by cluster;
16121 +     run;
16122 +     proc sort data=_tmpclusRsq;
16123 +        by _NAME_ col1;
16124 +     run;
16125 +     data _tmpclusRsq;
16126 +         length _NAME_ $32;
16127 +         set _tmpclusRsq; by _NAME_;
16128 +          _NAME_ = upcase(_NAME_);
16129 +          %if &ncluster ne 1 %then %do;
16130 +             if last._NAME_ then delete;
16131 +          %end;
16132 +          %else %do;
16133 +             COL1 = 0;
16134 +          %end;
16135 +     run;
16136 +     data &outdata;
16137 +         set _tmpclusRsq; by _NAME_;
16138 +         Cluster = upcase(Cluster);
16139 +         if last._NAME_ then output;
16140 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
16141 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
16142 +         rename COL1 = RSqWithNextClusComp;
16143 +         Cluster = upcase(Cluster);
16144 +         rename Cluster = ClosestCluster;
16145 +         *label  Cluster = "Next Closest Cluster";
16146 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
16147 +         rename _NAME_ = Variable;
16148 +         *label  _NAME_ = "Variable";
16149 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16150 +
16151 +    run;
16152 +    %if &globalclusid ne %then %do;
16153 +    data &outdata;
16154 +       length GCluster $16;
16155 +       set &outdata;
16156 +       GCluster = "GC&globalclusid";
16157 +       run;
16158 +    %end;
16159 +
16160 +    proc datasets lib = work nolist;
16161 +           delete _tmpclusRsq;
16162 +    run;
16163 +
16164 +    quit;
16165 +%mend FindNextClosestClusByCluster;
16166 +
16167 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
16168 +/*----
16169 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
16170 +-----------*/
16171 +
16172 +proc sort data =&indata1;
16173 +    by Variable;
16174 +run;
16175 +proc sort data =&indata2;
16176 +    by Variable;
16177 +run;
16178 +data &outdata;
16179 +    merge &indata1 &indata2;
16180 +    by Variable;
16181 +    length Type $16;
16182 +    Type = 'Variable';
16183 +    *label Type ='Type';
16184 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16185 +run;
16186 +
16187 +
16188 +data &indata3;
16189 +    set  &indata3 ;
16190 +    length RSqWithOwnClusComp 8.;
16191 +    Cluster = Variable;
16192 +    RSqWithOwnClusComp = 1;
16193 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
16194 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
16195 +    length Type $16;
16196 +    Type = 'ClusterComp';
16197 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
16198 +
16199 +;
16200 +run;
16201 +
16202 +proc sort data=&outdata;
16203 +    by Cluster;
16204 +run;
16205 +proc sort data =&indata3;
16206 +    by Cluster;
16207 +run;
16208 +
16209 +data &outdata;
16210 +     set &outdata &indata3;
16211 +     by Cluster;
16212 +run;
16213 +
16214 +
16215 +/* Create the Selected variable with all YES */
16216 +
16217 +data &outdata;
16218 +     set &outdata;
16219 +     length RsqRatio 8.;
16220 +     length Selected $8;
16221 +     *label RSqRatio = "1-R**2 Ratio";
16222 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
16223 +     *label Selected = "Variable Selected";
16224 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
16225 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
16226 +     Selected ='YES';
16227 +     rename _LABEL_ = Label;
16228 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16229 +run;
16230 +
16231 +
16232 +/*----  Selected = Y/N will be assigened at the %score                   -------+
16233 +        Just create the Selected variable with all YES at the step above
16234 + +------------------------------------------------------------------------------+
16235 +
16236 +proc sort data=&outdata;
16237 +    by Cluster RsqRatio;
16238 +run;
16239 +
16240 +%if &selectedcomp eq CLUSTERCOMP %then %do;
16241 +data &outdata;
16242 +     set &outdata; by Cluster;
16243 +     length Selected $8;
16244 +     label Selected = "Variable Selected";
16245 +     if  first.Cluster then Selected ='Yes';
16246 +     else Selected = 'No';
16247 +    run;
16248 +%end;
16249 +%else %do;
16250 +data &outdata(drop = _var _varchange);
16251 +     set &outdata; retain _var 0; by Cluster;
16252 +     length Selected $8;
16253 +     label Selected = "Variable Selected";
16254 +     if first.Cluster then  _varchange = 0;
16255 +     else _varchange =1;
16256 +     if _var ne _varchange then  Selected  = 'Yes';
16257 +     else Selected = 'No';
16258 +     if last.cluster then  _var = 0;
16259 +     else _var = _varchange;
16260 +run;
16261 +%end;
16262 +
16263 +--------------------------------------------------------------*/
16264 +
16265 +quit;
16266 +%mend MakeVarClusResultTable;
16267 +
16268 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
16269 +     proc sort data =&indata;
16270 +        by cluster;
16271 +     run;
16272 +     proc transpose data =&indata
16273 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
16274 +          by cluster;
16275 +     run;
16276 +     data &outdata;
16277 +          set  &outdata;
16278 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16279 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16280 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
16281 +     run;
16282 +     %if &globalclusid ne %then %do;
16283 +     data &outdata;
16284 +          Length GCluster $16;
16285 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16286 +          set  &outdata;
16287 +          GCluster ="GC&globalclusid.";
16288 +          run;
16289 +     %end;
16290 +
16291 +%Mend MakePlotDataFromCorrTable;
16292 +
16293 +
16294 +%macro MakeCorrelation(indata=,
16295 +                       outstat=_tmpoutstat,
16296 +                       corrmatrix=N,
16297 +                       outcorr=_tmpoutcorr,
16298 +                       includeclassvar=N,
16299 +                       target=,
16300 +                       freq=,
16301 +                       weight=);
16302 +   %if &target eq  %then %do;
16303 +
16304 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
16305 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
16306 +       %if &includeclassvar eq Y %then %do;
16307 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
16308 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
16309 +          %do i = 2 %to &nvar;
16310 +          %let varname = %sysfunc(varname(&dsid, &i));
16311 +          &varname
16312 +          %end;
16313 +       %end;
16314 +       ;
16315 +      %if &freq ne  %then %do;
16316 +          freq &freq;
16317 +      %end;
16318 +      %if &weight ne  %then %do;
16319 +          weight &weight;
16320 +      %end;
16321 +
16322 +      run;
16323 +      %if &corrmatrix eq Y %then %do;
16324 +      data  &outcorr (drop = _NCL_ _TYPE_);
16325 +           set  &outstat ;
16326 +           if _TYPE_ ='CORR' then output;
16327 +      run;
16328 +      %end;
16329 +    %end;
16330 +    %else %do;
16331 +       proc corr data=&indata outp=&outstat noprint;
16332 +            var
16333 +       %let dsid = %sysfunc(open(&indata));
16334 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
16335 +          %do i = 1 %to &nvar;
16336 +              %let _name = %sysfunc(varname(&dsid, &i));
16337 +              %if &_name ne &target %then;
16338 +              &_name
16339 +           %end;
16340 +        %let dsid= %sysfunc(close(&dsid));
16341 +        ;
16342 +        with &target;
16343 +        run;
16344 +    %end;
16345 +    quit;
16346 +%mend MakeCorrelation;
16347 +
16348 +
16349 +%macro MakeCorrelationDistance(indata=,
16350 +                               outdata=,
16351 +                               rsquare = N
16352 +                               );
16353 +    data corr_tmp;
16354 +        set &indata;
16355 +        if _N_ = 1 then do;
16356 +           output;
16357 +           stop;
16358 +         end;
16359 +    run;
16360 +    %if &outdata ne  %then %let  _outdata = &outdata;
16361 +    %else %let _outdata = &indata;
16362 +
16363 +    data &_outdata;
16364 +         set &indata;
16365 +
16366 +         %let dsid = %sysfunc(open(work.corr_tmp));
16367 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
16368 +          %do i = 2 %to &nvar;
16369 +              %let _name = %sysfunc(varname(&dsid, &i));
16370 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
16371 +              %else  %let _name_md = &_name;
16372 +              &_name = 1- &_name_md;
16373 +          %end;
16374 +      %let dsid= %sysfunc(close(&dsid));
16375 +      run;
16376 +      proc datasets lib = work nolist;
16377 +           delete corr_tmp;
16378 +      run;
16379 +      quit;
16380 +  %mend MakeCorrelationDistance;
16381 +
16382 +
16383 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
16384 +                                   rsquare = N
16385 +                                   );
16386 +    data corr_tmp;
16387 +        set &indata;
16388 +    run;
16389 +    proc sql noprint;
16390 +           update &indata
16391 +           set
16392 +     %let dsid = %sysfunc(open(work.corr_tmp));
16393 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
16394 +          %do i = 4 %to &nvar;
16395 +          %let _name = %sysfunc(varname(&dsid, &i));
16396 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
16397 +            %else  %let _name_md = &_name;
16398 +            %if &i < &nvar %then %do;
16399 +               &_name = 1- &_name_md ,
16400 +            %end;
16401 +            %else %do;
16402 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
16403 +            %end;
16404 +          %end;
16405 +      %let dsid= %sysfunc(close(&dsid));
16406 +
16407 +      select * from &indata;
16408 +      run;
16409 +     data &indata( drop = _NCL_);
16410 +           set &indata;
16411 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
16412 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
16413 +     run;
16414 +     data &indata(DROP = _NCL_);
16415 +           set &indata;
16416 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
16417 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
16418 +           rename _NAME_ = _VAR_;
16419 +     run;
16420 +     proc datasets lib = work nolist;
16421 +           delete corr_tmp;
16422 +     run;
16423 +     quit;
16424 + %mend UpdateOutStatCorrToDistance;
16425 +
16426 +
16427 +%macro HierClusWithCorr(indata= ,
16428 +                        ncluster=,
16429 +                        method = Ward,
16430 +                        outtree = _outtree,
16431 +                        idvar =_VAR_,
16432 +                        outdata=,
16433 +                        rescore = N,
16434 +                        newncluster=
16435 +                        );
16436 +      %global &newncluster;
16437 +      %if &rescore ne Y %then %do;
16438 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
16439 +                   method=&method outtree=&outtree noprint;
16440 +           id &idvar;
16441 +      run;
16442 +      %end;
16443 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
16444 +      run;
16445 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
16446 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
16447 +      run;
16448 +      data _outcontent;
16449 +          set _outcontent;
16450 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
16451 +          index = 1;
16452 +          rename NAME = _NAME_;
16453 +      run;
16454 +      proc sort data=_outcontent;
16455 +          by _NAME_;
16456 +      run;
16457 +      proc sort data =&outdata;
16458 +           by _NAME_;
16459 +      run;
16460 +      data &outdata(drop=index);
16461 +          merge &outdata _outcontent;
16462 +          by _NAME_;
16463 +          if index = . then delete;
16464 +      run;
16465 +      /*-----------------------------------------------------------*/
16466 +      data &outdata;
16467 +           length CLUSNAME $16;
16468 +           set &outdata;
16469 +           if CLUSTER > &ncluster then delete;
16470 +           CLUSNAME='GC'||strip(CLUSTER);
16471 +           *label CLUSNAME = "Cluster Name";
16472 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
16473 +           rename _NAME_ = VARIABLE ;
16474 +           *label _NAME_ = "Variable";
16475 +           *label CLUSTER = "Cluster";
16476 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
16477 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
16478 +      run;
16479 +      proc sort data=&outdata out=&outdata;
16480 +           by CLUSTER;
16481 +      run;
16482 +      proc means data =&outdata noprint;
16483 +           output out=_meanout;
16484 +      run;
16485 +      data _null_;
16486 +            set _meanout;
16487 +            if strip(_STAT_) eq 'MAX' then do;
16488 +            call symput("&newncluster", CLUSTER);
16489 +            stop;
16490 +            end;
16491 +      run;
16492 +
16493 +      proc datasets lib = work nolist;
16494 +           delete _outcontent _meanout;
16495 +      run;
16496 +      quit;
16497 +%mend  HierClusWithCorr;
16498 +
16499 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
16500 +
16501 +     data _tmpindata;
16502 +          set &indata;
16503 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
16504 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16505 +          if _TYPE_ = 'STD' then _NAME_='STD';
16506 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
16507 +          DROP _TYPE_ _NCL_;
16508 +     run;
16509 +
16510 +     filename _file_  "&fileRef";
16511 +
16512 +     data _null_;
16513 +        FILE _file_ MOD;
16514 +        put ' ';
16515 +        put "/*-------------------------------------------------*/";
16516 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
16517 +        put "/*-------------------------------------------------*/";
16518 +        put ' ';
16519 +        %let dsid = %sysfunc(open(work._tmpindata));
16520 +
16521 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16522 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16523 +        %let k = 1;
16524 +        %do %while(^%sysfunc(fetch(&dsid)));
16525 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16526 +               %if &k > 2 %then %do;
16527 +                %let cn = %eval(&k-2);
16528 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
16529 +                %end;
16530 +                %let k = %eval(&k+1);
16531 +
16532 +        %end;
16533 +        %let rc = %sysfunc(rewind(&dsid));
16534 +
16535 +        %do j= 2 %to &nvar;
16536 +            %let _varname = %sysfunc(varname(&dsid, &j));
16537 +            %do %while(^%sysfunc(fetch(&dsid)));
16538 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16539 +                %if &_name = MEAN %then
16540 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
16541 +                %else %if &_name = STD %then
16542 +                %let _std = %sysfunc(getvarn(&dsid, &j));
16543 +                %else %do;
16544 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
16545 +                      %let abscoeff = %sysfunc(abs(&coeff));
16546 +                          %if &abscoeff >  0 %then %do;
16547 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16548 +                           %end;
16549 +                 %end;
16550 +             %end;
16551 +             %let rc = %sysfunc(rewind(&dsid));
16552 +         %end;
16553 +
16554 +        %let dsid= %sysfunc(close(&dsid));
16555 +
16556 +     run;
16557 +
16558 +     filename _file_;
16559 +     proc datasets lib = work nolist;
16560 +           delete _tmpindata;
16561 +     run;
16562 +     quit;
16563 +%mend CreateScoreCode2;
16564 +
16565 +
16566 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
16567 +
16568 +     /*--- Build Code to Modify Metadata ---*/
16569 +     filename X "&deltacodefile";
16570 +     data _null_;
16571 +        FILE X;
16572 +        set &groupds end=eof;
16573 +        if _N_=1 then do;
16574 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
16575 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
16576 +           %end;
16577 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
16578 +           put "if upcase(strip(NAME)) in (";
16579 +        end;
16580 +        if Strip(upcase(Selected)) eq 'YES' then do;
16581 +           string = '"'!!trim(left(VARIABLE))!!'"';
16582 +           put string;
16583 +        end;
16584 +        if eof then do;
16585 +           put ') then ROLE="INPUT";';
16586 +           put 'else ROLE="REJECTED";';
16587 +           put 'end;';
16588 +
16589 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
16590 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
16591 +           %end;
16592 +        end;
16593 +     run;
16594 +     quit;
16595 +
16596 +     filename X;
16597 +     quit;
16598 +%mend MakeDeltaCode2;
16599 +
16600 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
16601 +  %global &ngc;
16602 +  data _null_;
16603 +  %if &indata ne %then %do;
16604 +      %let dsid = %sysfunc(open(&indata));
16605 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
16606 +      %let dsid = %sysfunc(close(&dsid));
16607 +  %end;
16608 +  %else %do;
16609 +       %let nvar = %eval(&ninput+&ndummy); ;
16610 +  %end;
16611 +  %let numgc = %eval(&nvar/&div+2);
16612 +  %let &ngc = &numgc;
16613 +   run;
16614 +  quit;
16615 +%mend getInitialGClusterNumber;
16616 +
16617 +
16618 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
16619 +data &outlink(drop = Selected);
16620 +     set &indata;
16621 +     LINKID = _N_;
16622 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
16623 +run;
16624 +data &outnode(keep=NODEID TYPE LABEL);
16625 +    set &indata;
16626 +    length TYPE $16;
16627 +    rename VARIABLE = NODEID;
16628 +    *label  CLUSNAME="Node ID";
16629 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16630 +    TYPE = "VARIABLE";
16631 +    *label TYPE = "Node Type";
16632 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16633 +    run;
16634 +data _tmp(keep=NODEID TYPE LABEL);
16635 +    set &indata;
16636 +    length TYPE $16;
16637 +    rename CLUSNAME = NODEID;
16638 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16639 +    TYPE = "GCLUSTER";
16640 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16641 +    run;
16642 +proc sort data=_tmp;
16643 +    by NODEID;
16644 +run;
16645 +data _tmp;
16646 +    set _tmp; by NODEID;
16647 +    if first.NODEID then output;
16648 +run;
16649 +proc sort data=&outnode;
16650 +    by NODEID;
16651 +run;
16652 +data  &outnode;
16653 +    set _tmp &outnode;
16654 +run;
16655 +proc datasets lib = work nolist;
16656 +     delete _tmp;
16657 +run;
16658 +quit;
16659 +%mend MakeGobalConstellData;
16660 +
16661 +/* Make contellation plot data among GCLUSTERS */
16662 +
16663 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
16664 +
16665 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
16666 +     set &indata;
16667 +     LINKID = _N_;
16668 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
16669 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
16670 +     end;
16671 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
16672 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
16673 +     end;
16674 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
16675 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
16676 +    end;
16677 +run;
16678 +
16679 +data _tmp_outrsquare;
16680 +        set &inoutrsq;
16681 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
16682 +run;
16683 +
16684 +proc freq data =_tmp_outrsquare noprint;
16685 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
16686 +run;
16687 +
16688 +data &outnode(keep=_NAME_ TYPE LABEL);
16689 +    set &outlink;
16690 +    length TYPE $16;
16691 +    length LABEL $100;
16692 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
16693 +
16694 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16695 +    TYPE = "GCLUSTER";
16696 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16697 +    end;
16698 +    else do;
16699 +    TYPE= "ROOT";
16700 +    LABEL= _NAME_;
16701 +    end;
16702 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
16703 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
16704 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
16705 +    run;
16706 +
16707 +proc sort data=&outnode;
16708 +     by _NAME_;
16709 +proc sort data=_tmp_GCLUSFREQ;
16710 +     by _NAME_;
16711 +run;
16712 +
16713 +data  &outnode;
16714 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
16715 +     if COUNT=. then COUNT=1;
16716 +run;
16717 +
16718 +proc datasets lib = work nolist;
16719 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
16720 +run;
16721 +
16722 +quit;
16723 +%Mend MakeGClusterConstData;
16724 +
16725 +
16726 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
16727 +
16728 +    data _gscoretmpds;
16729 +          set &indata;
16730 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
16731 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
16732 +          if _TYPE_ = 'STD' then _NAME_='STD';
16733 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
16734 +          DROP _TYPE_ _NCL_;
16735 +     run;
16736 +
16737 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
16738 +        GCluster Component &globalclusid ------ */
16739 +
16740 +    filename _file_  "&fileref";
16741 +
16742 +    data _null_;
16743 +        %if &globalclusid eq 1 %then %do;
16744 +          FILE _file_;
16745 +        %end;
16746 +        %else %do;
16747 +          FILE _file_ MOD;
16748 +        %end;
16749 +
16750 +        %let dsid = %sysfunc(open(work._gscoretmpds));
16751 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
16752 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
16753 +
16754 +        %let k = 1;
16755 +        %do %while(^%sysfunc(fetch(&dsid)));
16756 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16757 +                %if &k > 2 %then %do;
16758 +                put "&_name = 0 ; ";
16759 +                %end;
16760 +                %let k = %eval(&k+1);
16761 +        %end;
16762 +
16763 +        %let rc = %sysfunc(rewind(&dsid));
16764 +        %do i= 2 %to &nvar;
16765 +            %let _varname =  %sysfunc(varname(&dsid, &i));
16766 +            %do %while(^%sysfunc(fetch(&dsid)));
16767 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
16768 +                %if &_name = MEAN %then
16769 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
16770 +                %else %if &_name = STD %then
16771 +                %let _std = %sysfunc(getvarn(&dsid, &i));
16772 +                %else %do;
16773 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
16774 +                      %let abscoeff = %sysfunc(abs(&coeff));
16775 +                          %if &abscoeff >  0 %then %do;
16776 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
16777 +                           %end;
16778 +                 %end;
16779 +             %end;
16780 +             %let rc = %sysfunc(rewind(&dsid));
16781 +
16782 +         %end;
16783 +
16784 +        %let dsid= %sysfunc(close(&dsid));
16785 +       run;
16786 +
16787 +
16788 +       proc datasets lib=work nolist;
16789 +            delete _gscoretmpds;
16790 +       run;
16791 +      quit;
16792 +
16793 +%mend CreateGClusterScoreCode;
16794 +
16795 +
16796 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
16797 +
16798 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
16799 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
16800 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
16801 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
16802 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
16803 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
16804 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
16805 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
16806 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
16807 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
16808 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
16809 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
16810 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
16811 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
16812 +
16813 +   filename gsfile "&gscorecode";
16814 +
16815 +   data &EM_USER_GSCORE;
16816 +             set &indata;
16817 +             %include  gsfile;
16818 +        keep
16819 +        %do i=1 %to &ngcluster;
16820 +         %let gcvarname = GC&i;
16821 +         &gcvarname
16822 +        %end;
16823 +     ;
16824 +   run;
16825 +
16826 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
16827 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
16828 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
16829 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
16830 +    noprint  ;
16831 +     var
16832 +       %do i=1 %to &ngcluster;
16833 +         %let gcvarname = GC&i;
16834 +         &gcvarname
16835 +        %end;
16836 +   ;
16837 +   run;
16838 +
16839 +
16840 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
16841 +   data &EM_USER_GSCORECORRPLOT ;
16842 +        set &EM_USER_GSCORECORRPLOT;
16843 +        rename _X_ = X;
16844 +        rename _Y_ = Y;
16845 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16846 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
16847 +   run;
16848 +
16849 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
16850 +
16851 +   data &EM_USER_GSCORETREE;
16852 +        length _NAME_ $32;
16853 +        length _LABEL_ $100;
16854 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
16855 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
16856 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
16857 +        end;else do;
16858 +         _LABEL_ = _NAME_;
16859 +        end;
16860 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
16861 +
16862 +   run;
16863 +
16864 +   quit;
16865 +
16866 +%mend MakeGClusterCorrelation;
16867 +
16868 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
16869 +
16870 +
16871 +%macro train;
16872 +
16873 +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
16874 +   %include temp;
16875 +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
16876 +   %include temp;
16877 +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
16878 +   %include temp;
16879 +   filename temp;
16880 +
16881 +   %let VARCLUS_MAXNUMOBS = 100000;
16882 +   %let VARCLUS_MAXNUMVAR = 200;
16883 +   %let trainnum = 0;
16884 +   %let error = 0;
16885 +
16886 +   %if &EM_IMPORT_DATA eq %then %do;
16887 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16888 +       %let  error = 1;
16889 +       %goto endtrain;
16890 +   %end;
16891 +
16892 +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
16893 +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
16894 +        %let  error = 1;
16895 +        %goto endline;
16896 +    %end;
16897 +
16898 +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
16899 +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
16900 +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
16901 +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
16902 +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
16903 +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
16904 +
16905 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
16906 +        %if  &_num_input_total < 2 %then %do;
16907 +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16908 +            %let error = 2;
16909 +            %goto endtrain;
16910 +        %end;
16911 +   %end;
16912 +   %else %do;
16913 +         %if  &_num_input_interval < 2 %then %do;
16914 +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
16915 +         %let error = 2;
16916 +         %goto endtrain;
16917 +         %end;
16918 +   %end;
16919 +
16920 +   %em_checkerror();
16921 +
16922 +   %if &EMEXCEPTIONSTRING ne %then %do;
16923 +       %goto endtrain;
16924 +   %end;
16925 +
16926 +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
16927 +
16928 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
16929 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
16930 +                             outvar=&EM_USER_OUTDUMMY,
16931 +                             outdata=_newtrainds,
16932 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
16933 +
16934 +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16935 +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
16936 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16937 +                proc datasets lib=work nolist;
16938 +                delete  _newtrainds;
16939 +                run;
16940 +                quit;
16941 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16942 +                %let error = 3;
16943 +               %goto endtrain;
16944 +            %end;
16945 +        %end;
16946 +
16947 +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16948 +             %getNVar(inds=_newtrainds, nvar=_nvar);
16949 +
16950 +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
16951 +                %let trainnum = 2;
16952 +            %end;
16953 +            %else %do;
16954 +                %let trainnum = 1;
16955 +            %end;
16956 +        %end;
16957 +    %end;
16958 +    %else %do;
16959 +
16960 +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
16961 +
16962 +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
16963 +
16964 +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
16965 +
16966 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
16967 +                  %let error = 3;
16968 +                 %goto endtrain;
16969 +            %end;
16970 +        %end;
16971 +
16972 +
16973 +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
16974 +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
16975 +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
16976 +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
16977 +                %let trainnum = 2;
16978 +            %end;
16979 +            %else %do;
16980 +                %let trainnum = 1;
16981 +            %end;
16982 +        %end;
16983 +
16984 +   %end;
16985 +
16986 +    %em_checkerror();
16987 +
16988 +    %if &EMEXCEPTIONSTRING ne %then %do;
16989 +       %let error = 4;
16990 +       %goto endtrain;
16991 +    %end;
16992 +
16993 +    %CreateVarclusMeta(trainnum=&trainnum);
16994 +
16995 +    %if &error > 0 %then  %goto endtrain;
16996 +
16997 +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
16998 +
16999 +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
17000 +           %train1;
17001 +       %end;
17002 +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
17003 +           %train2;
17004 +       %end;
17005 +
17006 +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
17007 +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
17008 +      %em_copyfile(infref=_in, outfref=_out);
17009 +      filename _in;
17010 +      filename _out;
17011 +
17012 +
17013 +   %endtrain:
17014 +
17015 +
17016 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
17018 +%macro VarClus(indata=,
17019 +               outstat=,
17020 +               outtree=,
17021 +               vars=,
17022 +               freq=,
17023 +               weight=,
17024 +               includeclassvar=
17025 +               );
17027 +   %if &vars eq %then
17028 +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
17030 +        /*Add by ruzhan, May 28, 2013*/
17031 +        ods graphics on;
17032 +        %let odspath =;
17033 +        data _null_;
17034 +            path = pathname('WORK');
17035 +            call symput('odspath', path);
17036 +        run;
17037 +        ods listing gpath="&odspath";
17038 +        ods output DENDROGRAM=&outtree;
17039 +       proc varclus data = &indata outstat= &outstat
17040 +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17041 +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17042 +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17043 +        /*-----------------------
17044 +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
17045 +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
17046 +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
17047 +       %end;
17048 +       -------------------------*/
17049 +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17050 +            maxc = &EM_PROPERTY_MAXCLUS
17051 +       %end;
17053 +       /*------------------------------------------------------------------------------------------------------
17054 +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
17055 +        ------------------------------------------------------------------------------------------------------*/
17057 +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17058 +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
17059 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17060 +       %end;
17062 +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17063 +            proportion = &EM_PROPERTY_PROPORTION
17064 +       %end;
17065 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17066 +               summary
17067 +       %end;
17069 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17070 +           short
17071 +       %end;
17072 +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17073 +           corr trace simple
17074 +       %end;
17075 +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17076 +          noprint
17077 +       %end;
17078 +        /*Comment out by ruzhan, May 28, 2013*/
17079 +       /*       outtree=&outtree*/
17080 +       ;
17081 +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
17083 +      %if &includeclassvar eq Y %then %do;
17084 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17085 +          %if &dsid > 0 %then %do;
17086 +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
17087 +              %do i = 2 %to &nvar;
17088 +                  %let varname = %sysfunc(varname(&dsid, &i));
17089 +                   &varname
17090 +              %end;
17092 +          %end;
17093 +      %end;
17095 +      ;
17096 +      /*------------------------
17097 +      %if &freq ne  %then %do;
17098 +          freq &freq;
17099 +      %end;
17100 +      %if &weight ne  %then %do;
17101 +          weight &weight;
17102 +      %end;
17103 +      ----------------------------*/
17104 +      %if %EM_FREQ ne %then %do;
17105 +           Freq %EM_FREQ;
17106 +      %end;
17107 +      ;
17108 +    run;
17109 +    ods graphics off;
17110 +    %endline:
17111 +    quit;
17112 +%mend VarClus;
17114 +%macro Train1;
17116 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17117 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17118 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17119 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17120 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17121 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17122 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17123 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17124 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17125 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17126 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17127 +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
17128 +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
17130 +   /*
17131 +     %let VARCLUS_MAXNUMOBS = 100;
17132 +     %let VARCLUS_MAXNUMVAR = 200;
17133 +   */
17135 +   /* Train
17137 +   %if &EM_IMPORT_DATA eq %then %do;
17138 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17139 +       %goto endtrain1;
17140 +   %end;
17142 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17143 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17144 +        %goto endtrain1;
17145 +   %end;
17146 +   */
17147 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17148 +       /* moved this to pretrain ------------
17150 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17151 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17152 +                             outvar=&EM_USER_OUTDUMMY,
17153 +                             outdata=_newtrainds,
17154 +                             fileref=&EM_FILE_EMFLOWSCORECODE);
17156 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17157 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17158 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17159 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17160 +                %goto endtrain;
17161 +            %end;
17162 +        %end;
17164 +        +-------------------------------------*/
17166 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17167 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17168 +          There is no _newtrainds */
17169 +         %VarClus( indata=&EM_IMPORT_DATA,
17170 +                  outstat=&EM_USER_OUTSTAT,
17171 +                  outtree = &EM_USER_OUTTREE,
17172 +                  includeclassvar=N
17173 +                 );
17174 +        %end;
17175 +        %else %do;
17176 +        %VarClus( indata=_newtrainds,
17177 +                  outstat=&EM_USER_OUTSTAT,
17178 +                  outtree = &EM_USER_OUTTREE,
17179 +                  includeclassvar=Y
17180 +                 );
17181 +         proc datasets lib=work nolist;
17182 +              delete  _newtrainds;
17183 +         run;
17184 +         %end;
17185 +    %end;
17186 +    %else %do;
17188 +        /*----- moved this to pretrain ------------
17189 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17190 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17191 +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
17192 +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
17193 +                 %goto endtrain;
17194 +            %end;
17195 +        %end;
17196 +        +-------------------------------------*/
17198 +        %VarClus(indata=&EM_IMPORT_DATA,
17199 +                  outstat=&EM_USER_OUTSTAT,
17200 +                  outtree =&EM_USER_OUTTREE,
17201 +                  includeclassvar=N
17202 +               );
17204 +   %end;
17206 +   %em_checkerror();
17208 +   %if &EMEXCEPTIONSTRING ne %then %do;
17209 +       %goto endtrain1;
17210 +   %end;
17211 +    /*
17212 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17213 +    */
17215 +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
17217 +    %let gid=;
17219 +    /*--- To make the main result table ----------------------*/
17221 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
17222 +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17223 +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17224 +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
17225 +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17226 +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17228 +   /* Inter Cluster Correlation Plot ------------------------*/
17230 +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
17231 +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
17233 +   /* Create some other data sets for results ----*/
17235 +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
17236 +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
17237 +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
17239 +  /*---- move this to Score action ------------
17240 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17241 +   */
17243 +   /* create score code at training time */
17244 +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
17245 +   %endtrain1:
17246 +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
17249 +%macro VarClus2( indata=,
17250 +                 outdata=,
17251 +                 outstat =outstat,
17252 +                 outrsquare=outrsquare,
17253 +                 outtree = outtree,
17254 +                 outclusstruct = outclusstruct,
17255 +                 outcluscorr =outcluscorr,
17256 +                 outcluscorrplot =outcluscorrplot,
17257 +                 outclusrsquare =outclusrsquare,
17258 +                 outstatplot = outstatplot,
17259 +                 outcorr = outcorr,
17260 +                 outcorrplot = outcorrplot,
17261 +                 clusdata=,
17262 +                 outnode=outnode,
17263 +                 outlink=outlink,
17264 +                 ngroup =1  );
17265 +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
17266 +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17267 +              %goto endline;
17268 +         %end;
17270 +        %global numglobalcluster;
17271 +        %let  numglobalcluster = &ngroup;
17272 +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
17273 +        %do vci =1 %to &ngroup;
17274 +           data tmp_clusdata;
17275 +                set &clusdata;
17276 +                if CLUSTER ne &vci then delete;
17277 +           run;
17278 +           %let outstatds = &outstat.&vci;
17279 +           %let outrsquareds = &outrsquare.&vci;
17280 +           %let outtreeds = &outtree.&vci;
17281 +           %let outclusstuctds = &outclusstruct.&vci;
17282 +           %let outcluscorrds = &outcluscorr.&vci;
17283 +           %let outcluscorrplotds = &outcluscorrplot.&vci;
17284 +           %let outclusrsquareds = &outclussquare.&vci;
17285 +           %let outstatplotds = &outstatplot.&vci;
17286 +           %let outcorrds = &outcorr.&vci;
17287 +           %let outcorrplotds = &outcorrplot.&vci;
17288 +           %let outnodeds = &outnode.&vci;
17289 +           %let outlinkds = &outlink.&vci;
17291 +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
17292 +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
17293 +           %let emuseroutstat = &EM_USER_&outstatds;
17295 +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
17296 +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
17297 +           %let emuserouttree = &EM_USER_&outtreeds;
17299 +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
17300 +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
17301 +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
17303 +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
17304 +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
17305 +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
17307 +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
17308 +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
17309 +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
17311 +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
17312 +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
17313 +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
17315 +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
17316 +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
17317 +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
17319 +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
17320 +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
17321 +           %let emuseroutcorr = &EM_USER_&outcorrds;
17323 +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
17324 +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
17325 +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
17327 +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
17328 +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
17329 +           %let emuseroutnode = &EM_USER_&outnodeds;
17331 +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
17332 +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
17333 +           %let emuseroutlink = &EM_USER_&outlinkds;
17335 +           /*Add by ruzhan, May 28, 2013*/
17336 +           ods graphics on;
17337 +            %let odspath =;
17338 +            data _null_;
17339 +                path = pathname('WORK');
17340 +                call symput('odspath', path);
17341 +            run;
17342 +            ods listing gpath="&odspath";
17344 +           ods output DENDROGRAM=&emuserouttree;
17346 +           proc varclus data=&indata outstat=&emuseroutstat
17347 +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
17348 +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
17349 +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
17350 +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
17351 +                  maxc=&EM_PROPERTY_MAXCLUS
17352 +           %end;
17354 +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
17355 +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
17356 +            maxeigen = &EM_PROPERTY_MAXEIGEN
17357 +            %end;
17359 +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
17360 +                proportion = &EM_PROPERTY_PROPORTION
17361 +           %end;
17362 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
17363 +               summary
17364 +           %end;
17365 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
17366 +               short
17367 +           %end;
17368 +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
17369 +               corr trace simple
17370 +           %end;
17371 +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
17372 +               noprint
17373 +           %end;
17374 +            /*Comment out by ruzhan, May 28, 2013*/
17375 +              /*outtree=&emuserouttree*/
17376 +           ;
17377 +           var
17378 +           %let dsid=%sysfunc(open(work.tmp_clusdata));
17379 +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
17380 +                %do %while(^%sysfunc(fetch(&dsid)));
17381 +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
17382 +                    &_varname
17383 +                %end;
17384 +            %let dsid = %sysfunc(close(&dsid));
17385 +           ;
17386 +           %if %EM_FREQ ne %then %do;
17387 +           Freq %EM_FREQ;
17388 +           %end;
17389 +           run;
17390 +            ods graphics off;
17391 +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
17393 +            %let gid=&vci;
17394 +            /*--- To make the main result table ----------------------*/
17395 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
17396 +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
17397 +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
17398 +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
17399 +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
17400 +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
17402 +            /* Inter Cluster Correlation Plot ------------------------*/
17404 +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
17405 +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
17407 +           /* Create some other data sets for results ---------------*/
17409 +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
17410 +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
17411 +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
17413 +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
17415 +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
17417 +           %if &vci = 1 %then %do;
17418 +           data &EM_USER_OUTRSQUARE;
17419 +                set &emuseroutrsquare;
17420 +           run;
17421 +           %end;
17422 +           %else %do;
17423 +           data &EM_USER_OUTRSQUARE;
17424 +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
17425 +           run;
17426 +           %end;
17427 +           quit;
17428 +       %end;
17430 +       /*---- move this to Score action ------------
17431 +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
17432 +       */
17434 +       /* Make Score Gcluster component & correlation  */
17435 +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
17437 +       quit;
17438 +       %endline:
17439 +%mend VarClus2;
17442 +%macro Train2;
17444 +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
17445 +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
17446 +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
17447 +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
17448 +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
17449 +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
17450 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
17451 +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
17452 +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
17453 +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
17454 +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
17455 +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
17456 +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
17457 +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
17458 +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
17459 +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
17460 +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
17461 +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
17465 +    /* Train */
17467 +   /* moved to pretrain ------------
17469 +   %if &EM_IMPORT_DATA eq %then %do;
17470 +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
17471 +       %goto endtrain2;
17472 +   %end;
17474 +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
17475 +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
17476 +        %goto endtrain2;
17477 +   %end;
17478 +   +-------------------------------------------*/
17480 +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
17483 +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17485 +        /*----- moved to pretrain ------------
17487 +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
17488 +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
17489 +                             outvar=&EM_USER_OUTDUMMY,
17490 +                             outdata=_newtrainds,
17491 +                             fileref=&EM_FILE_EMFLOWSCORECODE,
17492 +                              ndummyvars=_ndummyvars
17493 +                            );
17495 +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17496 +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
17497 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17498 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17499 +                %goto endtrain;
17500 +            %end;
17501 +        %end;
17503 +        +---------------------------------------*/
17504 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17505 +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
17506 +          There is no _newtrainds */
17507 +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
17508 +                             outstat=&EM_USER_GOUTSTAT,
17509 +                             corrmatrix=Y,
17510 +                             outcorr=&EM_USER_GOUTCORR,
17511 +                             includeclassvar=N,
17512 +                             freq =%EM_FREQ
17513 +                          );
17514 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17516 +        %end;
17517 +        %else %do;
17518 +         %MakeCorrelation(   indata=_newtrainds,
17519 +                             outstat=&EM_USER_GOUTSTAT,
17520 +                             corrmatrix=Y,
17521 +                             outcorr=&EM_USER_GOUTCORR,
17522 +                             includeclassvar=Y,
17523 +                             freq =%EM_FREQ
17524 +                          );
17525 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
17527 +        %end;
17529 +    %end;
17530 +    %else %do;
17532 +        /* moved to pretrain -------------------
17534 +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
17535 +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
17536 +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
17537 +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
17538 +                %goto endtrain;
17539 +            %end;
17540 +        %end;
17541 +         +------------------------------------------*/
17543 +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
17544 +                          outstat=&EM_USER_GOUTSTAT,
17545 +                          corrmatrix=Y,
17546 +                          outcorr=&EM_USER_GOUTCORR,
17547 +                          includeclassvar=N,
17548 +                          freq =%EM_FREQ
17549 +                          );
17550 +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
17551 +    %end;
17553 +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
17554 +                                rsquare = N
17555 +                                );
17556 +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
17557 +                      ncluster=&_ngc,
17558 +                      method = Ward,
17559 +                      outtree =&EM_USER_GOUTTREE,
17560 +                      idvar = _VAR_,
17561 +                      outdata=&EM_USER_GOUTGROUP,
17562 +                      rescore = N,
17563 +                      newncluster=_newnclus
17564 +                        );
17566 +   /* store the number of global cluster */
17568 +   data &EM_USER_VARCLUSMETA;
17569 +        set &EM_USER_VARCLUSMETA;
17570 +        NGCluster = &_newnclus;
17571 +   run;
17573 +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
17575 +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17576 +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
17577 +            %VarClus2(indata=&EM_IMPORT_DATA,
17578 +                 clusdata=&EM_USER_GOUTGROUP,
17579 +                 ngroup=&_newnclus);
17580 +         %end;
17581 +         %else %do;
17582 +             %VarClus2(indata=_newtrainds,
17583 +                 clusdata=&EM_USER_GOUTGROUP,
17584 +                 ngroup=&_newnclus);
17586 +         %end;
17588 +   %end;
17589 +   %else %do;
17590 +       %VarClus2(indata=&EM_IMPORT_DATA,
17591 +                 clusdata=&EM_USER_GOUTGROUP,
17592 +                 ngroup=&_newnclus);
17593 +   %end;
17595 +   %em_checkerror();
17596 +   %if &EMEXCEPTIONSTRING ne %then %do;
17597 +       %put &em_codebar;
17598 +       %put Error: Variable clustering failed.;
17599 +       %put &em_codebar;
17600 +       %goto endtrain2;
17601 +   %end;
17602 +   /*
17603 +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
17604 +   */
17605 +   %endtrain2:
17606 +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
17608 +%macro em_copyfile(infref=, outfref=, append=N);
17609 +
17610 +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
17611 +
17612 +       %let omode =;
17613 +       %if &append=Y %then
17614 +           %let omode = MOD;
17615 +       data _null_;
17616 +          length line $20000;
17617 +          file &outfref &omode lrecl=20000;
17618 +          fid=fopen("&infref",'i',20000,'v');
17619 +          if fid > 0  then do;
17620 +             do while(^fread(fid));
17621 +                rlen = frlen(fid);
17622 +                rc= fget(fid,line,20000);
17623 +                start = length(line)-length(left(line))+1;
17624 +                line=strip(line);
17625 +                put @start line;
17626 +             end;
17627 +             if fid > 0  then rc=fclose(fid);
17628 +          end;
17629 +       run;
17630 +
17631 +   %end;
17632 +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
17633  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 5383   Memory used = 511K.
NOTE: There were 5383 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK._DMDBDAT has 5383 observations and 4 variables.
NOTE: The data set WORK._CLASSOUT has 9 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This is the PROC statement.
NOTE: The training set WORK._DMDBDAT.DATA has 4 variable(s).
NOTE: The PROC statement has finished with return code 0.
NOTE: This is the INPUT statement.
NOTE: 4 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code 0.
NOTE: This is the MAKE statement.
 
NOTE: 4 input variable(s).
NOTE: Number of cases=5383
NOTE: Sum of frequencies=5383
NOTE: Sum of weights=5383
NOTE: VARDEF=DF
NOTE: Maximum number of categories=3
NOTE: The total number of variables is 4 with dimensionality 9.
NOTE: The data set EMWS1.VARCLUS_OUTDUMMY has 3 observations and 10 variables.
NOTE: The MAKE statement has finished with return code 0.
NOTE: This is the SCORE statement.
NOTE: The data set WORK._NEWTRAINDS has 5383 observations and 26 variables.
NOTE: The SCORE statement has finished with return code 0.
NOTE: This is the CODE statement.
NOTE: External file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas opened.
NOTE: The CODE statement has finished with return code 0.
 
 
NOTE: PROCEDURE DMZIP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK._DMDBCAT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK._DMDBDAT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:94
NOTE: There were 5383 observations read from the data set WORK._NEWTRAINDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:153
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
17634  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: The data set EMWS1.VARCLUS_OUTTREE has 28 observations and 3 variables.
NOTE: The data set EMWS1.VARCLUS_OUTSTAT has 137 observations and 18 variables.
NOTE: The PROCEDURE VARCLUS printed page 2.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           4.56 seconds
      cpu time            0.17 seconds
 
 
 
NOTE: Deleting WORK._NEWTRAINDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
17635  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORR has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 49 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 49 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 15 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 15 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 15 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 15 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSSTRUCT has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 105 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 105 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 105 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 90 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 90 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 90 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 15 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 15 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 15 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._OWNRSQ.
NOTE: There were 15 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 7 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 15 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: There were 7 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      47314:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      47314:84
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 7 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 7 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 7 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 49 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 49 observations read from the data set EMWS1.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCLUSCORRPLOT has 49 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 15 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATPLOT has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 15 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORR has 15 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.VARCLUS_OUTCORR.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 225 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 225 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 225 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 135 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 135 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 135 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 135 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 225 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 225 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 135 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 225 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 225 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 225 observations read from the data set EMWS1.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS1.VARCLUS_OUTCORRPLOT has 225 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTLINK has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTNODE has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 137 observations read from the data set EMWS1.VARCLUS_OUTSTAT.
NOTE: The data set EMWS1.VARCLUS_OUTSTATSCORE has 9 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file _FILE_ is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2559,
      Last Modified=23Oct2020:19:46:46,
      Create Time=22Oct2020:12:37:18
 
NOTE: 27 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 90.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file _OUT is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=23Oct2020:19:46:52,
      Create Time=22Oct2020:12:37:18
 
NOTE: 134 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 90.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref _IN has been deassigned.
NOTE: Fileref _OUT has been deassigned.
17636  *------------------------------------------------------------*;
17637  * End TRAIN: VarClus;
17638  *------------------------------------------------------------*;
17639
 
17640  *------------------------------------------------------------*;
17641  * Close any missing semi colons;
17642  *------------------------------------------------------------*;
17643  ;
17644  ;
17645  ;
17646  ;
17647  quit;
17648  *------------------------------------------------------------*;
17649  * Close any unbalanced quotes;
17650  *------------------------------------------------------------*;
17651  /*; *"; *'; */
17652  ;
17653  run;
17654  quit;
17655  /* Reset EM Options */
17656  options formchar="|----|+|---+=|-/\<>*";
17657  options nocenter ls=256 ps=10000;
17658  goptions reset=all device=GIF NODISPLAY;
 
*------------------------------------------------------------*
* Score Log
Date:                October 23, 2020
Time:                19:46:53
*------------------------------------------------------------*
17760  %let EMEXCEPTIONSTRING=;
17761  *------------------------------------------------------------*;
17762  * SCORE: VarClus;
17763  *------------------------------------------------------------*;
17764  %let EM_ACTION = SCORE;
17765  %let syscc = 0;
17766
17767  %macro main;
17768
17769     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17770     %include temp;
17771     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17772     %include temp;
17773     filename temp;
17774
17775    %SetProperties;
17776
17777     %if %upcase(&EM_ACTION) = CREATE %then %do;
17778         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17779         %include temp;
17780         filename temp;
17781         %create;
17782     %end;
17783     %else
17784     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17785          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17786             %include temp;
17787             filename temp;
17788             %train;
17789     %end;
17790     %else
17791     %if %upcase(&EM_ACTION) = SCORE %then %do;
17792             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17793             %include temp;
17794             filename temp;
17795             %score;
17796     %end;
17797     %else
17798     %if %upcase(&EM_ACTION) = REPORT %then %do;
17799             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17800             %include temp;
17801             filename temp;
17802             %report;
17803     %end;
17804     /*
17805     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17806         %put 'OPENING TABLE';
17807     %end;
17808     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17809         %put 'CLOSE TABLE';
17810     %end;
17811     */
17812  %mend main;
17813  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17814 +
17815 +/* Initialize property macro variables */
17816 +%macro SetProperties;
17817 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17818 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17819 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17820 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17821 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17822 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17823 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17824 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17825 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17826 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17827 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17828 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17829 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17830 +
17831 +%mend SetProperties;
17832 +
17833 +%Macro MakeDummyVariables(indata=,
17834 +                          outvar=,
17835 +                          outdata=,
17836 +                          fileref=,
17837 +                          recreatecmeta=N, /* optional */
17838 +                          incmeta=,     /* optional */
17839 +                          outcmeta=,    /* optional */
17840 +                          ndummyvars=_ndummyvars
17841 +                          );
17842 +    %global &ndummyvars;
17843 +
17844 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17845 +       class
17846 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17847 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17848 +    ;
17849 +    run;
17850 +    %let &ndummyvars = 0;
17851 +    data _null_;
17852 +    %let dsid = %sysfunc(open(work._classout));
17853 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17854 +    %let dsid = %sysfunc(close(&dsid));
17855 +    run;
17856 +
17857 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17858 +       input
17859 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17860 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17861 +        / level=nominal stdize=no;
17862 +       make outvar = &outvar;
17863 +       score data = &indata out =&outdata;
17864 +       code  file=  "&fileref";
17865 +    run;
17866 +    %if &recreatecmeta eq Y %then %do;
17867 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17868 +    data _tmpds;
17869 +        set _tmpds;
17870 +           ROLE = 'INPUT';
17871 +           LEVEL = 'INTERVAL';
17872 +           CREATOR='DMZIP';
17873 +           if NAME = '_TYPE_' then delete;
17874 +    run;
17875 +    data &outcmeta;
17876 +         set &incmeta _tmpds;
17877 +    run;
17878 +    %end;
17879 +    proc datasets lib=work nolist;
17880 +      delete  _dmdbdat _dmdbcat _classout
17881 +    %if &recreatecmeta eq Y %then %do;
17882 +    _tmpds
17883 +    %end;
17884 +    ;
17885 +    quit;
17886 +%Mend MakeDummyVariables;
17887 +
17888 +/*--- Determine Optimal Number of Cluster ----
17889 +%macro FindClusNum(statds=, groupds=, minvariation=);
17890 +   %global optnclus;
17891 +   data varclus_tmp(drop=_NAME_);
17892 +      set &statDs;
17893 +      where _type_ ='PROPOR';
17894 +   run;
17895 +   proc sort data=varclus_tmp;
17896 +      by _NCL_;
17897 +   run;
17898 +   proc transpose data=varclus_tmp out=varclus_tmp;
17899 +      by _NCL_;
17900 +      var %EM_INTERVAL_INPUT
17901 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17902 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17903 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17904 +          %do i = 2 %to &nvar;
17905 +          %let varname = %sysfunc(varname(&dsid, &i));
17906 +          &varname
17907 +          %end;
17908 +      %end;
17909 +   ;
17910 +   run;
17911 +
17912 +   %if &minVariation eq %then %do;
17913 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17914 +   %end;
17915 +   %if ^(0<&minVariation<100) %then %do;
17916 +       %let minVariation = 90;
17917 +   %end;
17918 +
17919 +   data _null_;
17920 +      set varclus_tmp end=eof;
17921 +      by _NCL_;
17922 +      retain flag 0;
17923 +      if first._ncl_ then flag=0;
17924 +      if .<col1 < &minVariation then flag=1;
17925 +      if last._ncl_ and ^flag then do;
17926 +         call symput('OPTNCL', _ncl_);
17927 +         stop;
17928 +      end;
17929 +     if eof then call symput('OPTNCL', _ncl_);
17930 +   run;
17931 +
17932 +   %let optnclus = &OPTNCL;
17933 +
17934 +   data varclus_tmp(drop=_NCL_ _NAME_);
17935 +      set &statDs;
17936 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17937 +   run;
17938 +   proc sort data=varclus_tmp;
17939 +      by _TYPE_;
17940 +   run;
17941 +   proc transpose data=varclus_tmp out=varclus_tmp;
17942 +      by _TYPE_;
17943 +   run;
17944 +   proc sort data=varclus_tmp;
17945 +      by _name_ _type_;
17946 +   run;
17947 +
17948 +  proc transpose data=varclus_tmp out=&groupds;
17949 +      by _NAME_;
17950 +   run;
17951 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17952 +      by Cluster descending Rsquare;
17953 +      where Cluster ne 0;
17954 +   run;
17955 +   proc datasets lib=work nolist mt=(DATA VIEW);
17956 +      delete varclus_tmp;
17957 +   run;
17958 +   quit;
17959 +%mend findClusNum;
17960 +*/
17961 +
17962 +%macro getNclusfromTrain(inoutstat=, nc=);
17963 +%global &nc;
17964 +data _null_;
17965 +    set &inoutstat end=eof;
17966 +    if eof then do;
17967 +    call symput("&nc", _ncl_);
17968 +    end;
17969 +run;
17970 +%mend  getNclusfromTrain;
17971 +
17972 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
17973 +
17974 +     *--- Build Code to Modify Metadata ---*;
17975 +     filename X "&deltacodefile";
17976 +     data _null_;
17977 +        FILE X;
17978 +        set &groupds end=eof;
17979 +        /*by Cluster;*/
17980 +         if _N_=1 then do;
17981 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17982 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17983 +           %end;
17984 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17985 +           put "if upcase(strip(NAME)) in (";
17986 +        end;
17987 +        if Strip(upcase(Selected)) eq 'YES' then do;
17988 +           string = '"'!!trim(left(VARIABLE))!!'"';
17989 +           put string;
17990 +        end;
17991 +        if eof then do;
17992 +           put ') then ROLE="INPUT";';
17993 +           put 'else ROLE="REJECTED";';
17994 +           put 'end;';
17995 +
17996 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17997 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17998 +           %end;
17999 +        end;
18000 +     run;
18001 +     quit;
18002 +
18003 +     filename X;
18004 +
18005 +     quit;
18006 +%mend MakeDeltaCode;
18007 +
18008 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18009 +    %if ^%sysfunc(exist(&statds)) %then %do;
18010 +         %goto doendc;
18011 +    %end;
18012 +
18013 +    data &corrds(drop=_TYPE_ _NCL_) ;
18014 +       set &statds;
18015 +       where _type_ eq 'CORR' ;
18016 +    run ;
18017 +    proc sort data=&corrds;
18018 +       by _NAME_ ;
18019 +    run ;
18020 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18021 +      BY _NAME_ ;
18022 +    run ;
18023 +    data &corrplotds;
18024 +       length _Y_ $100;
18025 +       set &corrplotDs;
18026 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18027 +    run ;
18028 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18029 +       set &corrplotds;
18030 +       where _LABEL_ ne '' ;
18031 +       keep _TMP_ _LABEL_ ;
18032 +    run ;
18033 +    data _null_;
18034 +       nobs=0;
18035 +       dsid = open('varclus_match');
18036 +       if dsid then do;
18037 +          nobs = attrn(dsid, 'NOBS');
18038 +          dsid = close(dsid);
18039 +       end;
18040 +       call symput ('CORR_NOBS', nobs);
18041 +    run;
18042 +    %if &corr_nobs %then %do;
18043 +        proc sort data=varclus_match;
18044 +           by _name_;
18045 +        run ;
18046 +        proc sort data=&corrplotds;
18047 +           by _name_;
18048 +        run ;
18049 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18050 +           merge varclus_match &corrplotds;
18051 +           by _NAME_ ;
18052 +           if _X_ eq '' then _X_=_NAME_ ;
18053 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18054 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18055 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18056 +
18057 +       run ;
18058 +    %end;
18059 +    %else %do;
18060 +        proc sort data=&corrplotds;
18061 +           by _name_;
18062 +        run ;
18063 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18064 +           set &corrplotds;
18065 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18066 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18067 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18068 +
18069 +        run ;
18070 +    %end;
18071 +    proc sort data=&corrplotds;
18072 +       by _X_ _Y_;
18073 +    run ;
18074 +    proc datasets lib=work nolist mt=(DATA VIEW);
18075 +       delete varclus_match;
18076 +    run;
18077 +    quit;
18078 +
18079 +%doendc:
18080 +
18081 +%mend MakeVarClusCorrData;
18082 +
18083 +%macro MakeStatPlotData(statds= , outstatplotds=);
18084 +   %if %sysfunc(exist(&statds)) %then %do;
18085 +
18086 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18087 +          set &statDs;
18088 +          where _type_ in('MEAN', 'STD', 'N');
18089 +       run ;
18090 +       proc transpose data=varclus_tmp out=&outstatplotds;
18091 +          id _TYPE_ ;
18092 +       run ;
18093 +       data &outstatplotds;
18094 +          set &outstatplotds(obs=1000);
18095 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18096 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18097 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18098 +          else SCALEDSTD= STD ;
18099 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18100 +       run ;
18101 +       proc sort data=&outstatplotds;
18102 +          by descending SCALEDSTD ;
18103 +       run ;
18104 +       proc datasets lib=work nolist mt=(DATA VIEW);
18105 +          delete varclus_tmp;
18106 +       run;
18107 +       quit;
18108 +    %end;
18109 +
18110 +%mend MakeStatPlotData;
18111 +
18112 +
18113 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18114 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18115 +    data &EM_USER_OUTSTATSCORE;
18116 +          set &indata;
18117 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18118 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18119 +          if _TYPE_ = 'STD' then _NAME_='STD';
18120 +          DROP _TYPE_ _NCL_;
18121 +     run;
18122 +
18123 +     filename _file_  "&fileRef";
18124 +
18125 +     data _null_;
18126 +        FILE _file_ MOD;
18127 +        put ' ';
18128 +        put '/*-------------------------------------------------*/';
18129 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18130 +        put '/*-------------------------------------------------*/';
18131 +        put ' ';
18132 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18133 +
18134 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18135 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18136 +
18137 +        %let k = 1;
18138 +        %do %while(^%sysfunc(fetch(&dsid)));
18139 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18140 +                %if &k > 2 %then %do;
18141 +                 %let cn = %eval(&k-2);
18142 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18143 +                %end;
18144 +                %let k = %eval(&k+1);
18145 +        %end;
18146 +
18147 +        %let rc = %sysfunc(rewind(&dsid));
18148 +
18149 +        %do i= 2 %to &nvar;
18150 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18151 +            %do %while(^%sysfunc(fetch(&dsid)));
18152 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18153 +                %if &_name = MEAN %then
18154 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18155 +                %else %if &_name = STD %then
18156 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18157 +                %else %do;
18158 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18159 +                      %let abscoeff = %sysfunc(abs(&coeff));
18160 +                          %if &abscoeff >  0 %then %do;
18161 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18162 +                           %end;
18163 +                 %end;
18164 +             %end;
18165 +             %let rc = %sysfunc(rewind(&dsid));
18166 +         %end;
18167 +
18168 +        %let dsid= %sysfunc(close(&dsid));
18169 +       run;
18170 +%mend CreateScoreCode;
18171 +
18172 +
18173 +
18174 +/*----------------------------------------------------------
18175 +    Instead of using %MakeRSquareData,
18176 +    %MakeVarClusResultTable at macro2.source is used
18177 + +----------------------------------------------------------*/
18178 +
18179 +
18180 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18181 +
18182 +/* modifying  from ods rsquare = data */
18183 +
18184 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18185 +    Length Cluster $16;
18186 +    length Variable $32;
18187 +    Length VariableLabel $64;
18188 +    set &indata; retain CurrentCluster;
18189 +    if NumberOfClusters ^= &ncluster then delete;
18190 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18191 +    CurrentCluster = Cluster;
18192 +   run;
18193 +proc sort data =&outdata ;
18194 +     by Cluster RsquareRatio;
18195 +run;
18196 +data _tmprsq(drop=index);
18197 +     set &outdata; by Cluster;
18198 +     if first.Cluster then do;
18199 +     index = strip(scan(Cluster,2 ));
18200 +     Variable = "Clus"||index;
18201 +     VariableLabel = "Cluster Component "||index;
18202 +     OwnCluster = 1;
18203 +     NextClosest = .;
18204 +     RsquareRatio = 0;
18205 +     output;
18206 +     end;
18207 +run;
18208 +
18209 +proc sort data = _tmprsq ;
18210 +     by Cluster RsquareRatio;
18211 +run;
18212 +data &outdata;
18213 +     set &outdata _tmprsq;
18214 +by Cluster;
18215 +run;
18216 +
18217 +
18218 +/* Just create the Selected variable with all YES */
18219 +
18220 +data &outdata;
18221 +    set &outdata; by cluster;
18222 +    length Selected $8;
18223 +    Selected = 'YES';
18224 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18225 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18226 +    rename OwnCluster = RSqWithClusterComp;
18227 +    rename NextClosest = RSqWithNextClusComp;
18228 +run;
18229 +
18230 +
18231 +/* Selected = Y/N will be done %score section -----
18232 +
18233 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18234 +data &outdata;
18235 +    set &outdata; by cluster;
18236 +    length Selected $8;
18237 +    if first.Cluster then Selected = 'YES';
18238 +    else Selected = 'NO';
18239 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18240 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18241 +    rename OwnCluster = RSqWithClusterComp;
18242 +    rename NextClosest = RSqWithNextClusComp;
18243 +run;
18244 +%end;
18245 +%else %do;
18246 +data &outdata;
18247 +    set &outdata; by cluster;
18248 +    if last.Cluster then Selected = 'YES';
18249 +    else Selected = 'NO';
18250 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18251 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18252 +    rename OwnCluster = RSqWithClusterComp;
18253 +    rename NextClosest = RSqWithNextClusComp;
18254 +run;
18255 +%end;
18256 +---------------------------------------------------------------*/
18257 +
18258 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18259 +/* to calculate NextClosestClusRsq */
18260 +proc transpose data = &inClusRSquare  out=_clusRsq;
18261 +      by cluster;
18262 +      run;
18263 +data _clusRsq;
18264 +     set _clusRsq;
18265 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18266 +run;
18267 +
18268 +proc sort data=_clusRsq;
18269 +    by cluster col1;
18270 +    run;
18271 +data _clusRsq(drop=_NAME_ _LABEL_);
18272 +     set _clusRsq; by cluster;
18273 +     if last.Cluster then output;
18274 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18275 +     rename COL1 = RSqWithNextClusComp;
18276 +     rename Cluster = Variable;
18277 +     label  Cluster = "Variable";
18278 +run;
18279 +
18280 +proc sort data =&outdata;
18281 +     by Variable;
18282 +run;
18283 +data &outdata;
18284 +    merge &outdata _clusRsq;
18285 +    by Variable;
18286 +run;
18287 +proc sort data =&outdata;
18288 +by Cluster  RsquareRatio;
18289 +run;
18290 +quit;
18291 +%end;
18292 +
18293 +proc datasets lib = work nolist;
18294 +     delete _tmprsq _clusRsq;
18295 +     run;
18296 +quit;
18297 +
18298 +%mend MakeRSquareData;
18299 +
18300 +
18301 +/*-------------------------------------------------------------------------*/
18302 +
18303 +
18304 +
18305 +%macro ModifyCorr(indata=,
18306 +                  outdata=,
18307 +                  rsquare = Y
18308 +                  );
18309 +    data corr_tmp;
18310 +        set &indata;
18311 +    run;
18312 +     proc sql;
18313 +           update &indata
18314 +           set
18315 +     %let dsid = %sysfunc(open(work.corr_tmp));
18316 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18317 +          %do i = 4 %to &nvar;
18318 +          %let _name = %sysfunc(varname(&dsid, &i));
18319 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18320 +            %else  %let _name_md = &_name;
18321 +            %if &i < &nvar %then %do;
18322 +               &_name = 1- &_name_md ,
18323 +            %end;
18324 +            %else %do;
18325 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18326 +            %end;
18327 +          %end;
18328 +      %let dsid= %sysfunc(close(&dsid));
18329 +
18330 +      select * from &indata;
18331 +      run;
18332 +      proc datasets lib = work nolist;
18333 +           delete corr_tmp;
18334 +      run;
18335 +      quit;
18336 +
18337 + %mend ModifyCorr;
18338 +
18339 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18340 +    data &outdata(drop= _NCL_  _TYPE_);
18341 +       set &indata;
18342 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18343 +       rename _NAME_ = Cluster;
18344 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18345 +    run;
18346 +    %if &RSquare eq Y %then %do;
18347 +     data corr_tmp;
18348 +        set &outdata;
18349 +     run;
18350 +
18351 +     data &outdata(drop=i);
18352 +          set &outdata;
18353 +          %let dsid = %sysfunc(open(work.corr_tmp));
18354 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18355 +          %do i = 2 %to &nvar;
18356 +            %let _name = %sysfunc(varname(&dsid, &i));
18357 +            %let _name_md = &_name.**2;
18358 +                &_name = &_name_md;
18359 +          %end;
18360 +      %let dsid= %sysfunc(close(&dsid));
18361 +      run;
18362 +      proc datasets lib = work nolist;
18363 +           delete corr_tmp;
18364 +      run;
18365 +
18366 +    %end;
18367 +     quit;
18368 +%mend MakeClusStructCorrData;
18369 +
18370 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18371 +    data &outdata(drop= _NCL_  _TYPE_);
18372 +       set &indata;
18373 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18374 +       rename _NAME_ = Cluster;
18375 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18376 +    run;
18377 +    data corr_tmp;
18378 +        set &outdata;
18379 +    run;
18380 +
18381 +    %let dsid = %sysfunc(open(work.corr_tmp));
18382 +    %let nclus2= %eval(&ncluster+1);
18383 +    data &outdata;
18384 +         set &outdata;
18385 +          %do i = 2 %to &nclus2;
18386 +          %let i_1 = %eval(&i-1);
18387 +            %let _name = %sysfunc(varname(&dsid, &i));
18388 +            %let _newName = Clus&i_1;
18389 +                rename &_name = &_newName; ;
18390 +                *label &_name ="Cluster &i_1";
18391 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18392 +          %end;
18393 +          keep Cluster
18394 +          %do i = 2 %to &nclus2;
18395 +                %let _name = %sysfunc(varname(&dsid, &i));
18396 +                &_name
18397 +          %end;
18398 +          ;
18399 +    %let dsid= %sysfunc(close(&dsid));
18400 +     run;
18401 +     quit;
18402 +
18403 +    %if &RSquare eq Y %then %do;
18404 +
18405 +       data corr_tmp;
18406 +        set &outdata;
18407 +     run;
18408 +
18409 +     data &outdata(drop=i);
18410 +          set &outdata;
18411 +          %let dsid = %sysfunc(open(work.corr_tmp));
18412 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18413 +          %do i = 2 %to &nvar;
18414 +            %let _name = %sysfunc(varname(&dsid, &i));
18415 +            %let _name_md = &_name.**2;
18416 +                &_name = &_name_md;
18417 +          %end;
18418 +      %let dsid= %sysfunc(close(&dsid));
18419 +      run;
18420 +    %end;
18421 +
18422 +    %if &makeplotds eq Y %then %do;
18423 +     proc transpose data = &outdata
18424 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18425 +          by cluster;
18426 +     run;
18427 +     data &plotds;
18428 +          set  &plotds;
18429 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18430 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18431 +     run;
18432 +     %end;
18433 +     proc datasets lib = work nolist;
18434 +           delete corr_tmp;
18435 +     run;
18436 +     quit;
18437 +%mend MakeInterClusCorrData;
18438 +
18439 +
18440 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18441 +
18442 +data &outlink(drop = Selected);
18443 +     set &indata;
18444 +     LINKID = _N_;
18445 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18446 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18447 +run;
18448 +data &outnode(keep=NODEID TYPE LABEL);
18449 +    set &indata;
18450 +    length TYPE $16;
18451 +    rename Variable = NODEID;
18452 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18453 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18454 +    then  TYPE = "CLUSTER";
18455 +    else  TYPE="VARIABLE";
18456 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18457 +run;
18458 +quit;
18459 +%mend MakeClusConstellData;
18460 +
18461 +
18462 +
18463 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18464 +
18465 +data &outlink(drop = Selected);
18466 +     set &indata;
18467 +     LINKID = _N_;
18468 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18469 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18470 +run;
18471 +data &outnode(keep=NODEID TYPE LABEL);
18472 +    set &indata;
18473 +    length TYPE $16;
18474 +    rename Variable = NODEID;
18475 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18476 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18477 +    then  TYPE = "CLUSTER";
18478 +    else  TYPE="VARIABLE";
18479 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18480 +run;
18481 +quit;
18482 +%mend MakeClusConstellData;
18483 +
18484 +
18485 +/*--- This will work only when inds is not a view data -------
18486 +
18487 +%macro getNVarNObs(inds=, nvar=, nobs=);
18488 +
18489 +    %global &nvar;
18490 +    %global &nobs;
18491 +    data _null_;
18492 +         dsid = open("&inds");
18493 +         nv = attrn(dsid, 'NVAR');
18494 +         no = attrn(dsid, 'NOBS');
18495 +         dsid = close(dsid);
18496 +         call symput("&nvar", nv);
18497 +         call symput("&nobs", no);
18498 +    run;
18499 +    quit;
18500 +%mend  getNVarNObs;
18501 +
18502 ++---------------------------------------------------------------*/
18503 +
18504 +
18505 +%macro getNVar(inds=, nvar=);
18506 +    %global &nvar;
18507 +    data _null_;
18508 +         dsid = open("&inds");
18509 +         nv = attrn(dsid, 'NVAR');
18510 +         dsid = close(dsid);
18511 +         call symput("&nvar", nv);
18512 +    run;
18513 +    quit;
18514 +%mend  getNVar;
18515 +
18516 +
18517 +
18518 +%macro getNObs(inds=, nobs=);
18519 +    %global &nobs;
18520 +    data _null_;
18521 +        set &inds end=eof;
18522 +        if eof then call symput("&nobs", _N_);
18523 +    run;
18524 +    quit;
18525 +%mend  getNObs;
18526 +
18527 +%Macro CreateVarclusMeta(trainnum=);
18528 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18529 +    data &EM_USER_VARCLUSMETA;
18530 +         length TrainNum 8.;
18531 +         length NewTrain $8;
18532 +         length NGCluster 8.;
18533 +         length ExportedComp $16;
18534 +         length HideVariable $8;
18535 +         TrainNum = &trainnum;
18536 +         NewTrain = "Y";
18537 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18538 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18539 +         NGCluster = 0; /* zero means no twostage */
18540 +   run;
18541 +   quit;
18542 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18543 +
18544 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18545 +    data &outdata(drop= _NCL_  _TYPE_);
18546 +       set &indata;
18547 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18548 +       %if &globalclusid ne %then %do;
18549 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18550 +       rename _NAME_ = Cluster;
18551 +       %end;
18552 +       %else %do;
18553 +        _NAME_ = upcase(_NAME_);
18554 +       rename _NAME_ = Cluster;
18555 +       %end;
18556 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18557 +    run;
18558 +    data corr_tmp;
18559 +        set &outdata;
18560 +    run;
18561 +
18562 +    %let dsid = %sysfunc(open(work.corr_tmp));
18563 +    %let nclus2= %eval(&ncluster+1);
18564 +    data &outdata;
18565 +         set &outdata;
18566 +          %do i = 2 %to &nclus2;
18567 +          %let i_1 = %eval(&i-1);
18568 +            %let _name = %sysfunc(varname(&dsid, &i));
18569 +            %if &globalclusid ne %then
18570 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18571 +                     rename &_name = &_newName;
18572 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18573 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18574 +                %end;
18575 +            %else
18576 +                %do; %let _newName = CLUS&i_1;
18577 +                     rename &_name = &_newName;
18578 +                     *label &_name ="Cluster &i_1";
18579 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18580 +                %end;
18581 +          %end;
18582 +          keep Cluster
18583 +          %do i = 2 %to &nclus2;
18584 +                %let _name = %sysfunc(varname(&dsid, &i));
18585 +                &_name
18586 +          %end;
18587 +          ;
18588 +    %let dsid= %sysfunc(close(&dsid));
18589 +     run;
18590 +     quit;
18591 +
18592 +    %if &RSquare eq Y %then %do;
18593 +
18594 +       data corr_tmp;
18595 +        set &outdata;
18596 +     run;
18597 +
18598 +     data &outdata;
18599 +          set &outdata;
18600 +          %let dsid = %sysfunc(open(work.corr_tmp));
18601 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18602 +          %do i = 2 %to &nvar;
18603 +            %let _name = %sysfunc(varname(&dsid, &i));
18604 +            %let _name_md = &_name.**2;
18605 +                &_name = &_name_md;
18606 +          %end;
18607 +      %let dsid= %sysfunc(close(&dsid));
18608 +      run;
18609 +    %end;
18610 +
18611 +    %if &makeplotds eq Y %then %do;
18612 +     proc transpose data = &outdata
18613 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18614 +          by cluster;
18615 +     run;
18616 +     data &plotds;
18617 +          set  &plotds;
18618 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18619 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18620 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18621 +     run;
18622 +     %end;
18623 +     proc datasets lib = work nolist;
18624 +           delete corr_tmp;
18625 +     run;
18626 +     quit;
18627 +%mend MakeInterClusCorrData;
18628 +
18629 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18630 +    data _tmpds(drop= _NCL_);
18631 +       set &indata;
18632 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18633 +       %if &globalclusid ne %then %do;
18634 +           _NAME_ = "GC&globalclusid.";
18635 +       rename _NAME_ = Cluster;
18636 +       %end;
18637 +       %else %do;
18638 +        _NAME_ = "CLUS";
18639 +        rename _NAME_ = Cluster;
18640 +       %end;
18641 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18642 +    run;
18643 +    proc transpose data =_tmpds out =&outdata;
18644 +    run;
18645 +
18646 +    data &outdata(drop=COL1);
18647 +        %if &globalclusid ne %then %do;
18648 +        length GCluster $16;
18649 +        %end;
18650 +        length Cluster $32;
18651 +        length _NAME_ $32;
18652 +         set &outdata;
18653 +         _NAME_ = upcase(_NAME_);
18654 +         rename _NAME_=Variable;
18655 +         *label _NAME_="Variable";
18656 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18657 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18658 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18659 +
18660 +         %if &globalclusid ne %then %do;
18661 +          GCluster = "GC&globalclusid";
18662 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18663 +         %end;
18664 +         %else %do;
18665 +         Cluster = "CLUS"||strip(COL1);
18666 +        %end;
18667 +         rename COL2 = RSqWithOwnClusComp;
18668 +         *label COL2 = "R-Square With Own Cluster Component";
18669 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18670 +
18671 +   run;
18672 +   proc sort data =&outdata;
18673 +        by Cluster RSqWithOwnClusComp;
18674 +   run;
18675 +   proc datasets lib = work nolist;
18676 +           delete _tmpds;
18677 +   run;
18678 +   quit;
18679 +%mend MakeOwnRSquare;
18680 +
18681 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18682 +    data &outdata(drop= _NCL_  _TYPE_);
18683 +       %if &globalclusid ne %then %do;
18684 +        length GCluster $16;
18685 +        %end;
18686 +       set &indata;
18687 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18688 +       %if &globalclusid ne %then %do;
18689 +         GCluster = "GC&globalclusid";
18690 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18691 +         rename _NAME_ = Cluster;
18692 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18693 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18694 +
18695 +       %end;
18696 +       %else %do;
18697 +         _NAME_ = upcase(_NAME_);
18698 +         rename _NAME_ = Cluster;
18699 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18700 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18701 +
18702 +       %end;
18703 +     run;
18704 +    %if &RSquare eq Y %then %do;
18705 +     data corr_tmp;
18706 +          set &outdata;
18707 +     run;
18708 +     %let istart = 2;
18709 +     %if &globalclusid ne %then %let istart = 3;
18710 +     data &outdata;
18711 +          set &outdata;
18712 +          %let dsid = %sysfunc(open(work.corr_tmp));
18713 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18714 +          %do i =&istart %to &nvar;
18715 +            %let _name = %sysfunc(varname(&dsid, &i));
18716 +            %let _name_md = &_name.**2;
18717 +                &_name = &_name_md;
18718 +          %end;
18719 +      %let dsid= %sysfunc(close(&dsid));
18720 +      run;
18721 +      proc datasets lib = work nolist;
18722 +           delete corr_tmp;
18723 +      run;
18724 +    %end;
18725 +     quit;
18726 +%mend MakeClusStructCorrData;
18727 +
18728 +/*
18729 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18730 +*/
18731 +
18732 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18733 +
18734 +     /* The indata should be the outdata
18735 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18736 +
18737 +     proc sort data =&indata out=_tmpclusRsq;
18738 +     by cluster;
18739 +     run;
18740 +
18741 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18742 +      by cluster;
18743 +     run;
18744 +
18745 +     proc sort data=_tmpclusRsq;
18746 +        by _NAME_ COL1;
18747 +     run;
18748 +
18749 +     data _tmpclusRsq;
18750 +         length _NAME_ $32;
18751 +         set _tmpclusRsq; by _NAME_;
18752 +          _NAME_ = upcase(_NAME_);
18753 +          %if &ncluster ne 1 %then %do;
18754 +             if last._NAME_ then delete;
18755 +          %end;
18756 +          %else %do;
18757 +             COL1 = 0;
18758 +          %end;
18759 +     run;
18760 +     /* need to sort again */
18761 +     proc sort data=_tmpclusRsq;
18762 +        by _NAME_ COL1;
18763 +     run;
18764 +
18765 +     data &outdata;
18766 +         set _tmpclusRsq; by _NAME_;
18767 +         Cluster = upcase(Cluster);
18768 +         if last._NAME_ then output;
18769 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18770 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18771 +         rename COL1 = RSqWithNextClusComp;
18772 +         Cluster = upcase(Cluster);
18773 +         rename Cluster = ClosestCluster;
18774 +         *label  Cluster = "Next Closest Cluster";
18775 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18776 +         rename _NAME_ = Variable;
18777 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18778 +    run;
18779 +
18780 +
18781 +    %if &globalclusid ne %then %do;
18782 +    data &outdata;
18783 +       length GCluster $16;
18784 +       set &outdata;
18785 +       GCluster = "GC&globalclusid";
18786 +       run;
18787 +    %end;
18788 +    proc datasets lib = work nolist;
18789 +           delete _tmpclusRsq;
18790 +    run;
18791 +    quit;
18792 +%mend FindNextClosestClusByVar;
18793 +
18794 +
18795 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18796 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18797 +     proc sort data =&indata out=_tmpclusRsq;
18798 +     by cluster;
18799 +     run;
18800 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18801 +     by cluster;
18802 +     run;
18803 +     proc sort data=_tmpclusRsq;
18804 +        by _NAME_ col1;
18805 +     run;
18806 +     data _tmpclusRsq;
18807 +         length _NAME_ $32;
18808 +         set _tmpclusRsq; by _NAME_;
18809 +          _NAME_ = upcase(_NAME_);
18810 +          %if &ncluster ne 1 %then %do;
18811 +             if last._NAME_ then delete;
18812 +          %end;
18813 +          %else %do;
18814 +             COL1 = 0;
18815 +          %end;
18816 +     run;
18817 +     data &outdata;
18818 +         set _tmpclusRsq; by _NAME_;
18819 +         Cluster = upcase(Cluster);
18820 +         if last._NAME_ then output;
18821 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18822 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18823 +         rename COL1 = RSqWithNextClusComp;
18824 +         Cluster = upcase(Cluster);
18825 +         rename Cluster = ClosestCluster;
18826 +         *label  Cluster = "Next Closest Cluster";
18827 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18828 +         rename _NAME_ = Variable;
18829 +         *label  _NAME_ = "Variable";
18830 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18831 +
18832 +    run;
18833 +    %if &globalclusid ne %then %do;
18834 +    data &outdata;
18835 +       length GCluster $16;
18836 +       set &outdata;
18837 +       GCluster = "GC&globalclusid";
18838 +       run;
18839 +    %end;
18840 +
18841 +    proc datasets lib = work nolist;
18842 +           delete _tmpclusRsq;
18843 +    run;
18844 +
18845 +    quit;
18846 +%mend FindNextClosestClusByCluster;
18847 +
18848 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18849 +/*----
18850 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18851 +-----------*/
18852 +
18853 +proc sort data =&indata1;
18854 +    by Variable;
18855 +run;
18856 +proc sort data =&indata2;
18857 +    by Variable;
18858 +run;
18859 +data &outdata;
18860 +    merge &indata1 &indata2;
18861 +    by Variable;
18862 +    length Type $16;
18863 +    Type = 'Variable';
18864 +    *label Type ='Type';
18865 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18866 +run;
18867 +
18868 +
18869 +data &indata3;
18870 +    set  &indata3 ;
18871 +    length RSqWithOwnClusComp 8.;
18872 +    Cluster = Variable;
18873 +    RSqWithOwnClusComp = 1;
18874 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18875 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18876 +    length Type $16;
18877 +    Type = 'ClusterComp';
18878 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18879 +
18880 +;
18881 +run;
18882 +
18883 +proc sort data=&outdata;
18884 +    by Cluster;
18885 +run;
18886 +proc sort data =&indata3;
18887 +    by Cluster;
18888 +run;
18889 +
18890 +data &outdata;
18891 +     set &outdata &indata3;
18892 +     by Cluster;
18893 +run;
18894 +
18895 +
18896 +/* Create the Selected variable with all YES */
18897 +
18898 +data &outdata;
18899 +     set &outdata;
18900 +     length RsqRatio 8.;
18901 +     length Selected $8;
18902 +     *label RSqRatio = "1-R**2 Ratio";
18903 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18904 +     *label Selected = "Variable Selected";
18905 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18906 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18907 +     Selected ='YES';
18908 +     rename _LABEL_ = Label;
18909 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18910 +run;
18911 +
18912 +
18913 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18914 +        Just create the Selected variable with all YES at the step above
18915 + +------------------------------------------------------------------------------+
18916 +
18917 +proc sort data=&outdata;
18918 +    by Cluster RsqRatio;
18919 +run;
18920 +
18921 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18922 +data &outdata;
18923 +     set &outdata; by Cluster;
18924 +     length Selected $8;
18925 +     label Selected = "Variable Selected";
18926 +     if  first.Cluster then Selected ='Yes';
18927 +     else Selected = 'No';
18928 +    run;
18929 +%end;
18930 +%else %do;
18931 +data &outdata(drop = _var _varchange);
18932 +     set &outdata; retain _var 0; by Cluster;
18933 +     length Selected $8;
18934 +     label Selected = "Variable Selected";
18935 +     if first.Cluster then  _varchange = 0;
18936 +     else _varchange =1;
18937 +     if _var ne _varchange then  Selected  = 'Yes';
18938 +     else Selected = 'No';
18939 +     if last.cluster then  _var = 0;
18940 +     else _var = _varchange;
18941 +run;
18942 +%end;
18943 +
18944 +--------------------------------------------------------------*/
18945 +
18946 +quit;
18947 +%mend MakeVarClusResultTable;
18948 +
18949 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18950 +     proc sort data =&indata;
18951 +        by cluster;
18952 +     run;
18953 +     proc transpose data =&indata
18954 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18955 +          by cluster;
18956 +     run;
18957 +     data &outdata;
18958 +          set  &outdata;
18959 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18960 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18961 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18962 +     run;
18963 +     %if &globalclusid ne %then %do;
18964 +     data &outdata;
18965 +          Length GCluster $16;
18966 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18967 +          set  &outdata;
18968 +          GCluster ="GC&globalclusid.";
18969 +          run;
18970 +     %end;
18971 +
18972 +%Mend MakePlotDataFromCorrTable;
18973 +
18974 +
18975 +%macro MakeCorrelation(indata=,
18976 +                       outstat=_tmpoutstat,
18977 +                       corrmatrix=N,
18978 +                       outcorr=_tmpoutcorr,
18979 +                       includeclassvar=N,
18980 +                       target=,
18981 +                       freq=,
18982 +                       weight=);
18983 +   %if &target eq  %then %do;
18984 +
18985 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
18986 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
18987 +       %if &includeclassvar eq Y %then %do;
18988 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18989 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18990 +          %do i = 2 %to &nvar;
18991 +          %let varname = %sysfunc(varname(&dsid, &i));
18992 +          &varname
18993 +          %end;
18994 +       %end;
18995 +       ;
18996 +      %if &freq ne  %then %do;
18997 +          freq &freq;
18998 +      %end;
18999 +      %if &weight ne  %then %do;
19000 +          weight &weight;
19001 +      %end;
19002 +
19003 +      run;
19004 +      %if &corrmatrix eq Y %then %do;
19005 +      data  &outcorr (drop = _NCL_ _TYPE_);
19006 +           set  &outstat ;
19007 +           if _TYPE_ ='CORR' then output;
19008 +      run;
19009 +      %end;
19010 +    %end;
19011 +    %else %do;
19012 +       proc corr data=&indata outp=&outstat noprint;
19013 +            var
19014 +       %let dsid = %sysfunc(open(&indata));
19015 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19016 +          %do i = 1 %to &nvar;
19017 +              %let _name = %sysfunc(varname(&dsid, &i));
19018 +              %if &_name ne &target %then;
19019 +              &_name
19020 +           %end;
19021 +        %let dsid= %sysfunc(close(&dsid));
19022 +        ;
19023 +        with &target;
19024 +        run;
19025 +    %end;
19026 +    quit;
19027 +%mend MakeCorrelation;
19028 +
19029 +
19030 +%macro MakeCorrelationDistance(indata=,
19031 +                               outdata=,
19032 +                               rsquare = N
19033 +                               );
19034 +    data corr_tmp;
19035 +        set &indata;
19036 +        if _N_ = 1 then do;
19037 +           output;
19038 +           stop;
19039 +         end;
19040 +    run;
19041 +    %if &outdata ne  %then %let  _outdata = &outdata;
19042 +    %else %let _outdata = &indata;
19043 +
19044 +    data &_outdata;
19045 +         set &indata;
19046 +
19047 +         %let dsid = %sysfunc(open(work.corr_tmp));
19048 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19049 +          %do i = 2 %to &nvar;
19050 +              %let _name = %sysfunc(varname(&dsid, &i));
19051 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19052 +              %else  %let _name_md = &_name;
19053 +              &_name = 1- &_name_md;
19054 +          %end;
19055 +      %let dsid= %sysfunc(close(&dsid));
19056 +      run;
19057 +      proc datasets lib = work nolist;
19058 +           delete corr_tmp;
19059 +      run;
19060 +      quit;
19061 +  %mend MakeCorrelationDistance;
19062 +
19063 +
19064 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19065 +                                   rsquare = N
19066 +                                   );
19067 +    data corr_tmp;
19068 +        set &indata;
19069 +    run;
19070 +    proc sql noprint;
19071 +           update &indata
19072 +           set
19073 +     %let dsid = %sysfunc(open(work.corr_tmp));
19074 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19075 +          %do i = 4 %to &nvar;
19076 +          %let _name = %sysfunc(varname(&dsid, &i));
19077 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19078 +            %else  %let _name_md = &_name;
19079 +            %if &i < &nvar %then %do;
19080 +               &_name = 1- &_name_md ,
19081 +            %end;
19082 +            %else %do;
19083 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19084 +            %end;
19085 +          %end;
19086 +      %let dsid= %sysfunc(close(&dsid));
19087 +
19088 +      select * from &indata;
19089 +      run;
19090 +     data &indata( drop = _NCL_);
19091 +           set &indata;
19092 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19093 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19094 +     run;
19095 +     data &indata(DROP = _NCL_);
19096 +           set &indata;
19097 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19098 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19099 +           rename _NAME_ = _VAR_;
19100 +     run;
19101 +     proc datasets lib = work nolist;
19102 +           delete corr_tmp;
19103 +     run;
19104 +     quit;
19105 + %mend UpdateOutStatCorrToDistance;
19106 +
19107 +
19108 +%macro HierClusWithCorr(indata= ,
19109 +                        ncluster=,
19110 +                        method = Ward,
19111 +                        outtree = _outtree,
19112 +                        idvar =_VAR_,
19113 +                        outdata=,
19114 +                        rescore = N,
19115 +                        newncluster=
19116 +                        );
19117 +      %global &newncluster;
19118 +      %if &rescore ne Y %then %do;
19119 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19120 +                   method=&method outtree=&outtree noprint;
19121 +           id &idvar;
19122 +      run;
19123 +      %end;
19124 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19125 +      run;
19126 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19127 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19128 +      run;
19129 +      data _outcontent;
19130 +          set _outcontent;
19131 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19132 +          index = 1;
19133 +          rename NAME = _NAME_;
19134 +      run;
19135 +      proc sort data=_outcontent;
19136 +          by _NAME_;
19137 +      run;
19138 +      proc sort data =&outdata;
19139 +           by _NAME_;
19140 +      run;
19141 +      data &outdata(drop=index);
19142 +          merge &outdata _outcontent;
19143 +          by _NAME_;
19144 +          if index = . then delete;
19145 +      run;
19146 +      /*-----------------------------------------------------------*/
19147 +      data &outdata;
19148 +           length CLUSNAME $16;
19149 +           set &outdata;
19150 +           if CLUSTER > &ncluster then delete;
19151 +           CLUSNAME='GC'||strip(CLUSTER);
19152 +           *label CLUSNAME = "Cluster Name";
19153 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19154 +           rename _NAME_ = VARIABLE ;
19155 +           *label _NAME_ = "Variable";
19156 +           *label CLUSTER = "Cluster";
19157 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19158 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19159 +      run;
19160 +      proc sort data=&outdata out=&outdata;
19161 +           by CLUSTER;
19162 +      run;
19163 +      proc means data =&outdata noprint;
19164 +           output out=_meanout;
19165 +      run;
19166 +      data _null_;
19167 +            set _meanout;
19168 +            if strip(_STAT_) eq 'MAX' then do;
19169 +            call symput("&newncluster", CLUSTER);
19170 +            stop;
19171 +            end;
19172 +      run;
19173 +
19174 +      proc datasets lib = work nolist;
19175 +           delete _outcontent _meanout;
19176 +      run;
19177 +      quit;
19178 +%mend  HierClusWithCorr;
19179 +
19180 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19181 +
19182 +     data _tmpindata;
19183 +          set &indata;
19184 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19185 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19186 +          if _TYPE_ = 'STD' then _NAME_='STD';
19187 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19188 +          DROP _TYPE_ _NCL_;
19189 +     run;
19190 +
19191 +     filename _file_  "&fileRef";
19192 +
19193 +     data _null_;
19194 +        FILE _file_ MOD;
19195 +        put ' ';
19196 +        put "/*-------------------------------------------------*/";
19197 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19198 +        put "/*-------------------------------------------------*/";
19199 +        put ' ';
19200 +        %let dsid = %sysfunc(open(work._tmpindata));
19201 +
19202 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19203 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19204 +        %let k = 1;
19205 +        %do %while(^%sysfunc(fetch(&dsid)));
19206 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19207 +               %if &k > 2 %then %do;
19208 +                %let cn = %eval(&k-2);
19209 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19210 +                %end;
19211 +                %let k = %eval(&k+1);
19212 +
19213 +        %end;
19214 +        %let rc = %sysfunc(rewind(&dsid));
19215 +
19216 +        %do j= 2 %to &nvar;
19217 +            %let _varname = %sysfunc(varname(&dsid, &j));
19218 +            %do %while(^%sysfunc(fetch(&dsid)));
19219 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19220 +                %if &_name = MEAN %then
19221 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19222 +                %else %if &_name = STD %then
19223 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19224 +                %else %do;
19225 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19226 +                      %let abscoeff = %sysfunc(abs(&coeff));
19227 +                          %if &abscoeff >  0 %then %do;
19228 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19229 +                           %end;
19230 +                 %end;
19231 +             %end;
19232 +             %let rc = %sysfunc(rewind(&dsid));
19233 +         %end;
19234 +
19235 +        %let dsid= %sysfunc(close(&dsid));
19236 +
19237 +     run;
19238 +
19239 +     filename _file_;
19240 +     proc datasets lib = work nolist;
19241 +           delete _tmpindata;
19242 +     run;
19243 +     quit;
19244 +%mend CreateScoreCode2;
19245 +
19246 +
19247 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19248 +
19249 +     /*--- Build Code to Modify Metadata ---*/
19250 +     filename X "&deltacodefile";
19251 +     data _null_;
19252 +        FILE X;
19253 +        set &groupds end=eof;
19254 +        if _N_=1 then do;
19255 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19256 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19257 +           %end;
19258 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19259 +           put "if upcase(strip(NAME)) in (";
19260 +        end;
19261 +        if Strip(upcase(Selected)) eq 'YES' then do;
19262 +           string = '"'!!trim(left(VARIABLE))!!'"';
19263 +           put string;
19264 +        end;
19265 +        if eof then do;
19266 +           put ') then ROLE="INPUT";';
19267 +           put 'else ROLE="REJECTED";';
19268 +           put 'end;';
19269 +
19270 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19271 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19272 +           %end;
19273 +        end;
19274 +     run;
19275 +     quit;
19276 +
19277 +     filename X;
19278 +     quit;
19279 +%mend MakeDeltaCode2;
19280 +
19281 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19282 +  %global &ngc;
19283 +  data _null_;
19284 +  %if &indata ne %then %do;
19285 +      %let dsid = %sysfunc(open(&indata));
19286 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19287 +      %let dsid = %sysfunc(close(&dsid));
19288 +  %end;
19289 +  %else %do;
19290 +       %let nvar = %eval(&ninput+&ndummy); ;
19291 +  %end;
19292 +  %let numgc = %eval(&nvar/&div+2);
19293 +  %let &ngc = &numgc;
19294 +   run;
19295 +  quit;
19296 +%mend getInitialGClusterNumber;
19297 +
19298 +
19299 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19300 +data &outlink(drop = Selected);
19301 +     set &indata;
19302 +     LINKID = _N_;
19303 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19304 +run;
19305 +data &outnode(keep=NODEID TYPE LABEL);
19306 +    set &indata;
19307 +    length TYPE $16;
19308 +    rename VARIABLE = NODEID;
19309 +    *label  CLUSNAME="Node ID";
19310 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19311 +    TYPE = "VARIABLE";
19312 +    *label TYPE = "Node Type";
19313 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19314 +    run;
19315 +data _tmp(keep=NODEID TYPE LABEL);
19316 +    set &indata;
19317 +    length TYPE $16;
19318 +    rename CLUSNAME = NODEID;
19319 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19320 +    TYPE = "GCLUSTER";
19321 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19322 +    run;
19323 +proc sort data=_tmp;
19324 +    by NODEID;
19325 +run;
19326 +data _tmp;
19327 +    set _tmp; by NODEID;
19328 +    if first.NODEID then output;
19329 +run;
19330 +proc sort data=&outnode;
19331 +    by NODEID;
19332 +run;
19333 +data  &outnode;
19334 +    set _tmp &outnode;
19335 +run;
19336 +proc datasets lib = work nolist;
19337 +     delete _tmp;
19338 +run;
19339 +quit;
19340 +%mend MakeGobalConstellData;
19341 +
19342 +/* Make contellation plot data among GCLUSTERS */
19343 +
19344 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19345 +
19346 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19347 +     set &indata;
19348 +     LINKID = _N_;
19349 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19350 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19351 +     end;
19352 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19353 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19354 +     end;
19355 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19356 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19357 +    end;
19358 +run;
19359 +
19360 +data _tmp_outrsquare;
19361 +        set &inoutrsq;
19362 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19363 +run;
19364 +
19365 +proc freq data =_tmp_outrsquare noprint;
19366 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19367 +run;
19368 +
19369 +data &outnode(keep=_NAME_ TYPE LABEL);
19370 +    set &outlink;
19371 +    length TYPE $16;
19372 +    length LABEL $100;
19373 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19374 +
19375 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19376 +    TYPE = "GCLUSTER";
19377 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19378 +    end;
19379 +    else do;
19380 +    TYPE= "ROOT";
19381 +    LABEL= _NAME_;
19382 +    end;
19383 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19384 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19385 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19386 +    run;
19387 +
19388 +proc sort data=&outnode;
19389 +     by _NAME_;
19390 +proc sort data=_tmp_GCLUSFREQ;
19391 +     by _NAME_;
19392 +run;
19393 +
19394 +data  &outnode;
19395 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19396 +     if COUNT=. then COUNT=1;
19397 +run;
19398 +
19399 +proc datasets lib = work nolist;
19400 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19401 +run;
19402 +
19403 +quit;
19404 +%Mend MakeGClusterConstData;
19405 +
19406 +
19407 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19408 +
19409 +    data _gscoretmpds;
19410 +          set &indata;
19411 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19412 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19413 +          if _TYPE_ = 'STD' then _NAME_='STD';
19414 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19415 +          DROP _TYPE_ _NCL_;
19416 +     run;
19417 +
19418 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19419 +        GCluster Component &globalclusid ------ */
19420 +
19421 +    filename _file_  "&fileref";
19422 +
19423 +    data _null_;
19424 +        %if &globalclusid eq 1 %then %do;
19425 +          FILE _file_;
19426 +        %end;
19427 +        %else %do;
19428 +          FILE _file_ MOD;
19429 +        %end;
19430 +
19431 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19432 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19433 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19434 +
19435 +        %let k = 1;
19436 +        %do %while(^%sysfunc(fetch(&dsid)));
19437 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19438 +                %if &k > 2 %then %do;
19439 +                put "&_name = 0 ; ";
19440 +                %end;
19441 +                %let k = %eval(&k+1);
19442 +        %end;
19443 +
19444 +        %let rc = %sysfunc(rewind(&dsid));
19445 +        %do i= 2 %to &nvar;
19446 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19447 +            %do %while(^%sysfunc(fetch(&dsid)));
19448 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19449 +                %if &_name = MEAN %then
19450 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19451 +                %else %if &_name = STD %then
19452 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19453 +                %else %do;
19454 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19455 +                      %let abscoeff = %sysfunc(abs(&coeff));
19456 +                          %if &abscoeff >  0 %then %do;
19457 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19458 +                           %end;
19459 +                 %end;
19460 +             %end;
19461 +             %let rc = %sysfunc(rewind(&dsid));
19462 +
19463 +         %end;
19464 +
19465 +        %let dsid= %sysfunc(close(&dsid));
19466 +       run;
19467 +
19468 +
19469 +       proc datasets lib=work nolist;
19470 +            delete _gscoretmpds;
19471 +       run;
19472 +      quit;
19473 +
19474 +%mend CreateGClusterScoreCode;
19475 +
19476 +
19477 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19478 +
19479 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19480 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19481 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19482 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19483 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19484 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19485 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19486 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19487 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19488 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19489 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19490 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19491 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19492 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19493 +
19494 +   filename gsfile "&gscorecode";
19495 +
19496 +   data &EM_USER_GSCORE;
19497 +             set &indata;
19498 +             %include  gsfile;
19499 +        keep
19500 +        %do i=1 %to &ngcluster;
19501 +         %let gcvarname = GC&i;
19502 +         &gcvarname
19503 +        %end;
19504 +     ;
19505 +   run;
19506 +
19507 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19508 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19509 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19510 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19511 +    noprint  ;
19512 +     var
19513 +       %do i=1 %to &ngcluster;
19514 +         %let gcvarname = GC&i;
19515 +         &gcvarname
19516 +        %end;
19517 +   ;
19518 +   run;
19519 +
19520 +
19521 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19522 +   data &EM_USER_GSCORECORRPLOT ;
19523 +        set &EM_USER_GSCORECORRPLOT;
19524 +        rename _X_ = X;
19525 +        rename _Y_ = Y;
19526 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19527 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19528 +   run;
19529 +
19530 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19531 +
19532 +   data &EM_USER_GSCORETREE;
19533 +        length _NAME_ $32;
19534 +        length _LABEL_ $100;
19535 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19536 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19537 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19538 +        end;else do;
19539 +         _LABEL_ = _NAME_;
19540 +        end;
19541 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19542 +
19543 +   run;
19544 +
19545 +   quit;
19546 +
19547 +%mend MakeGClusterCorrelation;
19548 +
19549 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19550 +%macro score;
19551 +
19552 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19553 +%include temp;
19554 +filename temp;
19555 +
19556 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19557 +
19558 +data _null_;
19559 +         set &EM_USER_VARCLUSMETA;
19560 +         if _N_=1 then
19561 +         call symput('_trainnum', TrainNum);
19562 +         call symput('_exportedcomp', ExportedComp);
19563 +         call symput('_hidevariable', HideVariable);
19564 +         call symput('_newTrain', NewTrain);
19565 +run;
19566 +
19567 +%if &_newTrain = N %then %do;
19568 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19569 +        %else %let _exportedCompChanged = Y;
19570 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19571 +        %else  %let _hideVariableChanged = Y;
19572 +%end;
19573 +%else %do;
19574 +        %let _exportedCompChanged = Y;
19575 +        %let _hideVariableChanged = Y;
19576 +%end;
19577 +
19578 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19579 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19580 +     %include temp;
19581 +     filename temp;
19582 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19583 +%end;
19584 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19585 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19586 +     %include temp;
19587 +     filename temp;
19588 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19589 +%end;
19590 +
19591 +  /* store  current property values */
19592 + data &EM_USER_VARCLUSMETA;
19593 +       set &EM_USER_VARCLUSMETA;
19594 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19595 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19596 + run;
19597 +
19598 +%mend score;
19599 +
19600 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19601 +
19602 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19603 +     proc sort data =&indata;
19604 +              by Cluster RsqRatio Type;
19605 +     run;
19606 +     /*----------------------------------------------------------------------
19607 +      The Type variabe is used becuse the variable need to be selected
19608 +        instead of Cluster component when only one variable is in the cluster
19609 +     +-----------------------------------------------------------------------*/
19610 +
19611 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19612 +         data &indata;
19613 +              set &indata; by cluster;
19614 +              if first.Cluster then Selected = 'YES';
19615 +              else Selected = 'NO';
19616 +         run;
19617 +         quit;
19618 +    %end;
19619 +    %else %do;
19620 +         data &indata(drop = _var _varchange);
19621 +              set &indata; retain _var 0; by Cluster;
19622 +             if first.Cluster then  _varchange = 0;
19623 +                 else _varchange =1;
19624 +             if _var ne _varchange then  Selected  = 'YES';
19625 +             else Selected = 'NO';
19626 +             if last.cluster then  _var = 0;
19627 +             else _var = _varchange;
19628 +         run;
19629 +         quit;
19630 +    %end;
19631 +%mend ChangeVariableSelectionFlag;
19632 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19633 +
19634 +%macro score1(ExportedCompChanged=,
19635 +              HideVariableChanged=);
19636 +
19637 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19638 +   %if &ExportedCompChanged = Y %then %do;
19639 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19640 +   %end;
19641 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19642 +
19643 +%mend score1;
19644 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file X is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Oct2020:19:46:52,
      Create Time=22Oct2020:12:37:18
 
NOTE: 14 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19645  *------------------------------------------------------------*;
19646  * End SCORE: VarClus;
19647  *------------------------------------------------------------*;
19648
 
19649  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19650  *------------------------------------------------------------*;
19651  * VarClus: Scoring DATA data;
19652  *------------------------------------------------------------*;
19653  data EMWS1.VarClus_TRAIN
19654  / view=EMWS1.VarClus_TRAIN
19655  ;
19656  set EMWS1.Part_TRAIN
19657  ;
19658  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19659 +*** Begin Class Look-up, Standardization, Replacement ;
19660 +
19661 +*** Generate dummy variables for Country ;
19662 +label CountryFrance = 'Country=France' ;
19663 +label CountryGermany = 'Country=Germany' ;
19664 +label CountrySpain = 'Country=Spain' ;
19665 +*** encoding is sparse, initialize to zero;
19666 +CountryFrance = 0;
19667 +CountryGermany = 0;
19668 +CountrySpain = 0;
19669 +if missing( Country ) then do;
19670 +   CountryFrance = .;
19671 +   CountryGermany = .;
19672 +   CountrySpain = .;
19673 +end;
19674 +else do;
19675 +   length _dm7 $ 7; drop _dm7 ;
19676 +   _dm7 = put( Country , $7. );
19677 +   %DMNORMIP( _dm7 )
19678 +   if _dm7 = 'FRANCE'  then do;
19679 +      CountryFrance = 1;
19680 +   end;
19681 +   else if _dm7 = 'SPAIN'  then do;
19682 +      CountrySpain = 1;
19683 +   end;
19684 +   else if _dm7 = 'GERMANY'  then do;
19685 +      CountryGermany = 1;
19686 +   end;
19687 +   else do;
19688 +      delete;
19689 +   end;
19690 +end;
19691 +
19692 +*** Generate dummy variables for Gender ;
19693 +label GenderFemale = 'Gender=Female' ;
19694 +label GenderMale = 'Gender=Male' ;
19695 +if missing( Gender ) then do;
19696 +   GenderFemale = .;
19697 +   GenderMale = .;
19698 +end;
19699 +else do;
19700 +   length _dm6 $ 6; drop _dm6 ;
19701 +   _dm6 = put( Gender , $6. );
19702 +   %DMNORMIP( _dm6 )
19703 +   if _dm6 = 'MALE'  then do;
19704 +      GenderFemale = 0;
19705 +      GenderMale = 1;
19706 +   end;
19707 +   else if _dm6 = 'FEMALE'  then do;
19708 +      GenderFemale = 1;
19709 +      GenderMale = 0;
19710 +   end;
19711 +   else do;
19712 +      delete;
19713 +   end;
19714 +end;
19715 +
19716 +*** Generate dummy variables for HasCreditCard ;
19717 +label HasCreditCardNo = 'HasCreditCard=No' ;
19718 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
19719 +if missing( HasCreditCard ) then do;
19720 +   HasCreditCardNo = .;
19721 +   HasCreditCardYes = .;
19722 +end;
19723 +else do;
19724 +   length _dm3 $ 3; drop _dm3 ;
19725 +   _dm3 = put( HasCreditCard , $3. );
19726 +   %DMNORMIP( _dm3 )
19727 +   if _dm3 = 'YES'  then do;
19728 +      HasCreditCardNo = 0;
19729 +      HasCreditCardYes = 1;
19730 +   end;
19731 +   else if _dm3 = 'NO'  then do;
19732 +      HasCreditCardNo = 1;
19733 +      HasCreditCardYes = 0;
19734 +   end;
19735 +   else do;
19736 +      delete;
19737 +   end;
19738 +end;
19739 +
19740 +*** Generate dummy variables for IsActiveMember ;
19741 +label IsActiveMemberNo = 'IsActiveMember=No' ;
19742 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
19743 +if missing( IsActiveMember ) then do;
19744 +   IsActiveMemberNo = .;
19745 +   IsActiveMemberYes = .;
19746 +end;
19747 +else do;
19748 +   length _dm3 $ 3; drop _dm3 ;
19749 +   _dm3 = put( IsActiveMember , $3. );
19750 +   %DMNORMIP( _dm3 )
19751 +   if _dm3 = 'YES'  then do;
19752 +      IsActiveMemberNo = 0;
19753 +      IsActiveMemberYes = 1;
19754 +   end;
19755 +   else if _dm3 = 'NO'  then do;
19756 +      IsActiveMemberNo = 1;
19757 +      IsActiveMemberYes = 0;
19758 +   end;
19759 +   else do;
19760 +      delete;
19761 +   end;
19762 +end;
19763 +
19764 +*** End Class Look-up, Standardization, Replacement ;
19765 +
19766 +
19767 +/*-------------------------------------------------*/
19768 +/* Varclus Score Code Begins*/
19769 +/*-------------------------------------------------*/
19770 +
19771 +Clus1 = 0 ; /*---Cluster Component 1------ */
19772 +Clus2 = 0 ; /*---Cluster Component 2------ */
19773 +Clus3 = 0 ; /*---Cluster Component 3------ */
19774 +Clus4 = 0 ; /*---Cluster Component 4------ */
19775 +Clus5 = 0 ; /*---Cluster Component 5------ */
19776 +Clus6 = 0 ; /*---Cluster Component 6------ */
19777 +Clus7 = 0 ; /*---Cluster Component 7------ */
19778 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
19779 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
19780 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
19781 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
19782 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
19783 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
19784 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
19785 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
19786 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
19787 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
19788 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
19789 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
19790 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
19791 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
19792 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
19793  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19794  quit;
19795  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19796  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19797  *------------------------------------------------------------*;
19798  * VarClus: Scoring VALIDATE data;
19799  *------------------------------------------------------------*;
19800  data EMWS1.VarClus_VALIDATE
19801  / view=EMWS1.VarClus_VALIDATE
19802  ;
19803  set EMWS1.Part_VALIDATE
19804  ;
19805  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19806 +*** Begin Class Look-up, Standardization, Replacement ;
19807 +
19808 +*** Generate dummy variables for Country ;
19809 +label CountryFrance = 'Country=France' ;
19810 +label CountryGermany = 'Country=Germany' ;
19811 +label CountrySpain = 'Country=Spain' ;
19812 +*** encoding is sparse, initialize to zero;
19813 +CountryFrance = 0;
19814 +CountryGermany = 0;
19815 +CountrySpain = 0;
19816 +if missing( Country ) then do;
19817 +   CountryFrance = .;
19818 +   CountryGermany = .;
19819 +   CountrySpain = .;
19820 +end;
19821 +else do;
19822 +   length _dm7 $ 7; drop _dm7 ;
19823 +   _dm7 = put( Country , $7. );
19824 +   %DMNORMIP( _dm7 )
19825 +   if _dm7 = 'FRANCE'  then do;
19826 +      CountryFrance = 1;
19827 +   end;
19828 +   else if _dm7 = 'SPAIN'  then do;
19829 +      CountrySpain = 1;
19830 +   end;
19831 +   else if _dm7 = 'GERMANY'  then do;
19832 +      CountryGermany = 1;
19833 +   end;
19834 +   else do;
19835 +      delete;
19836 +   end;
19837 +end;
19838 +
19839 +*** Generate dummy variables for Gender ;
19840 +label GenderFemale = 'Gender=Female' ;
19841 +label GenderMale = 'Gender=Male' ;
19842 +if missing( Gender ) then do;
19843 +   GenderFemale = .;
19844 +   GenderMale = .;
19845 +end;
19846 +else do;
19847 +   length _dm6 $ 6; drop _dm6 ;
19848 +   _dm6 = put( Gender , $6. );
19849 +   %DMNORMIP( _dm6 )
19850 +   if _dm6 = 'MALE'  then do;
19851 +      GenderFemale = 0;
19852 +      GenderMale = 1;
19853 +   end;
19854 +   else if _dm6 = 'FEMALE'  then do;
19855 +      GenderFemale = 1;
19856 +      GenderMale = 0;
19857 +   end;
19858 +   else do;
19859 +      delete;
19860 +   end;
19861 +end;
19862 +
19863 +*** Generate dummy variables for HasCreditCard ;
19864 +label HasCreditCardNo = 'HasCreditCard=No' ;
19865 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
19866 +if missing( HasCreditCard ) then do;
19867 +   HasCreditCardNo = .;
19868 +   HasCreditCardYes = .;
19869 +end;
19870 +else do;
19871 +   length _dm3 $ 3; drop _dm3 ;
19872 +   _dm3 = put( HasCreditCard , $3. );
19873 +   %DMNORMIP( _dm3 )
19874 +   if _dm3 = 'YES'  then do;
19875 +      HasCreditCardNo = 0;
19876 +      HasCreditCardYes = 1;
19877 +   end;
19878 +   else if _dm3 = 'NO'  then do;
19879 +      HasCreditCardNo = 1;
19880 +      HasCreditCardYes = 0;
19881 +   end;
19882 +   else do;
19883 +      delete;
19884 +   end;
19885 +end;
19886 +
19887 +*** Generate dummy variables for IsActiveMember ;
19888 +label IsActiveMemberNo = 'IsActiveMember=No' ;
19889 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
19890 +if missing( IsActiveMember ) then do;
19891 +   IsActiveMemberNo = .;
19892 +   IsActiveMemberYes = .;
19893 +end;
19894 +else do;
19895 +   length _dm3 $ 3; drop _dm3 ;
19896 +   _dm3 = put( IsActiveMember , $3. );
19897 +   %DMNORMIP( _dm3 )
19898 +   if _dm3 = 'YES'  then do;
19899 +      IsActiveMemberNo = 0;
19900 +      IsActiveMemberYes = 1;
19901 +   end;
19902 +   else if _dm3 = 'NO'  then do;
19903 +      IsActiveMemberNo = 1;
19904 +      IsActiveMemberYes = 0;
19905 +   end;
19906 +   else do;
19907 +      delete;
19908 +   end;
19909 +end;
19910 +
19911 +*** End Class Look-up, Standardization, Replacement ;
19912 +
19913 +
19914 +/*-------------------------------------------------*/
19915 +/* Varclus Score Code Begins*/
19916 +/*-------------------------------------------------*/
19917 +
19918 +Clus1 = 0 ; /*---Cluster Component 1------ */
19919 +Clus2 = 0 ; /*---Cluster Component 2------ */
19920 +Clus3 = 0 ; /*---Cluster Component 3------ */
19921 +Clus4 = 0 ; /*---Cluster Component 4------ */
19922 +Clus5 = 0 ; /*---Cluster Component 5------ */
19923 +Clus6 = 0 ; /*---Cluster Component 6------ */
19924 +Clus7 = 0 ; /*---Cluster Component 7------ */
19925 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
19926 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
19927 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
19928 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
19929 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
19930 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
19931 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
19932 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
19933 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
19934 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
19935 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
19936 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
19937 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
19938 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
19939 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
19940  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19941  quit;
19942  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
19943  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19944  *------------------------------------------------------------*;
19945  * VarClus: Scoring TEST data;
19946  *------------------------------------------------------------*;
19947  data EMWS1.VarClus_TEST
19948  / view=EMWS1.VarClus_TEST
19949  ;
19950  set EMWS1.Part_TEST
19951  ;
19952  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19953 +*** Begin Class Look-up, Standardization, Replacement ;
19954 +
19955 +*** Generate dummy variables for Country ;
19956 +label CountryFrance = 'Country=France' ;
19957 +label CountryGermany = 'Country=Germany' ;
19958 +label CountrySpain = 'Country=Spain' ;
19959 +*** encoding is sparse, initialize to zero;
19960 +CountryFrance = 0;
19961 +CountryGermany = 0;
19962 +CountrySpain = 0;
19963 +if missing( Country ) then do;
19964 +   CountryFrance = .;
19965 +   CountryGermany = .;
19966 +   CountrySpain = .;
19967 +end;
19968 +else do;
19969 +   length _dm7 $ 7; drop _dm7 ;
19970 +   _dm7 = put( Country , $7. );
19971 +   %DMNORMIP( _dm7 )
19972 +   if _dm7 = 'FRANCE'  then do;
19973 +      CountryFrance = 1;
19974 +   end;
19975 +   else if _dm7 = 'SPAIN'  then do;
19976 +      CountrySpain = 1;
19977 +   end;
19978 +   else if _dm7 = 'GERMANY'  then do;
19979 +      CountryGermany = 1;
19980 +   end;
19981 +   else do;
19982 +      delete;
19983 +   end;
19984 +end;
19985 +
19986 +*** Generate dummy variables for Gender ;
19987 +label GenderFemale = 'Gender=Female' ;
19988 +label GenderMale = 'Gender=Male' ;
19989 +if missing( Gender ) then do;
19990 +   GenderFemale = .;
19991 +   GenderMale = .;
19992 +end;
19993 +else do;
19994 +   length _dm6 $ 6; drop _dm6 ;
19995 +   _dm6 = put( Gender , $6. );
19996 +   %DMNORMIP( _dm6 )
19997 +   if _dm6 = 'MALE'  then do;
19998 +      GenderFemale = 0;
19999 +      GenderMale = 1;
20000 +   end;
20001 +   else if _dm6 = 'FEMALE'  then do;
20002 +      GenderFemale = 1;
20003 +      GenderMale = 0;
20004 +   end;
20005 +   else do;
20006 +      delete;
20007 +   end;
20008 +end;
20009 +
20010 +*** Generate dummy variables for HasCreditCard ;
20011 +label HasCreditCardNo = 'HasCreditCard=No' ;
20012 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
20013 +if missing( HasCreditCard ) then do;
20014 +   HasCreditCardNo = .;
20015 +   HasCreditCardYes = .;
20016 +end;
20017 +else do;
20018 +   length _dm3 $ 3; drop _dm3 ;
20019 +   _dm3 = put( HasCreditCard , $3. );
20020 +   %DMNORMIP( _dm3 )
20021 +   if _dm3 = 'YES'  then do;
20022 +      HasCreditCardNo = 0;
20023 +      HasCreditCardYes = 1;
20024 +   end;
20025 +   else if _dm3 = 'NO'  then do;
20026 +      HasCreditCardNo = 1;
20027 +      HasCreditCardYes = 0;
20028 +   end;
20029 +   else do;
20030 +      delete;
20031 +   end;
20032 +end;
20033 +
20034 +*** Generate dummy variables for IsActiveMember ;
20035 +label IsActiveMemberNo = 'IsActiveMember=No' ;
20036 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
20037 +if missing( IsActiveMember ) then do;
20038 +   IsActiveMemberNo = .;
20039 +   IsActiveMemberYes = .;
20040 +end;
20041 +else do;
20042 +   length _dm3 $ 3; drop _dm3 ;
20043 +   _dm3 = put( IsActiveMember , $3. );
20044 +   %DMNORMIP( _dm3 )
20045 +   if _dm3 = 'YES'  then do;
20046 +      IsActiveMemberNo = 0;
20047 +      IsActiveMemberYes = 1;
20048 +   end;
20049 +   else if _dm3 = 'NO'  then do;
20050 +      IsActiveMemberNo = 1;
20051 +      IsActiveMemberYes = 0;
20052 +   end;
20053 +   else do;
20054 +      delete;
20055 +   end;
20056 +end;
20057 +
20058 +*** End Class Look-up, Standardization, Replacement ;
20059 +
20060 +
20061 +/*-------------------------------------------------*/
20062 +/* Varclus Score Code Begins*/
20063 +/*-------------------------------------------------*/
20064 +
20065 +Clus1 = 0 ; /*---Cluster Component 1------ */
20066 +Clus2 = 0 ; /*---Cluster Component 2------ */
20067 +Clus3 = 0 ; /*---Cluster Component 3------ */
20068 +Clus4 = 0 ; /*---Cluster Component 4------ */
20069 +Clus5 = 0 ; /*---Cluster Component 5------ */
20070 +Clus6 = 0 ; /*---Cluster Component 6------ */
20071 +Clus7 = 0 ; /*---Cluster Component 7------ */
20072 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
20073 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
20074 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
20075 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
20076 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
20077 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
20078 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
20079 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
20080 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
20081 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
20082 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
20083 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
20084 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
20085 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
20086 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
20087  run;
 
NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
20088  quit;
20089  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
20091  *------------------------------------------------------------*;
20092  * VarClus: Computing metadata for TRAIN data;
20093  *------------------------------------------------------------*;
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                October 23, 2020
Time:                19:46:53
*------------------------------------------------------------*
20468  %let EMEXCEPTIONSTRING=;
20469  *------------------------------------------------------------*;
20470  * REPORT: VarClus;
20471  *------------------------------------------------------------*;
20472  %let EM_ACTION = REPORT;
20473  %let syscc = 0;
20474
20475  %macro main;
20476
20477     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
20478     %include temp;
20479     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
20480     %include temp;
20481     filename temp;
20482
20483    %SetProperties;
20484
20485     %if %upcase(&EM_ACTION) = CREATE %then %do;
20486         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
20487         %include temp;
20488         filename temp;
20489         %create;
20490     %end;
20491     %else
20492     %if %upcase(&EM_ACTION) = TRAIN %then %do;
20493          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
20494             %include temp;
20495             filename temp;
20496             %train;
20497     %end;
20498     %else
20499     %if %upcase(&EM_ACTION) = SCORE %then %do;
20500             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
20501             %include temp;
20502             filename temp;
20503             %score;
20504     %end;
20505     %else
20506     %if %upcase(&EM_ACTION) = REPORT %then %do;
20507             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
20508             %include temp;
20509             filename temp;
20510             %report;
20511     %end;
20512     /*
20513     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
20514         %put 'OPENING TABLE';
20515     %end;
20516     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
20517         %put 'CLOSE TABLE';
20518     %end;
20519     */
20520  %mend main;
20521  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
20522 +
20523 +/* Initialize property macro variables */
20524 +%macro SetProperties;
20525 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
20526 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
20527 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
20528 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
20529 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
20530 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
20531 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
20532 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
20533 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
20534 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
20535 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
20536 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
20537 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
20538 +
20539 +%mend SetProperties;
20540 +
20541 +%Macro MakeDummyVariables(indata=,
20542 +                          outvar=,
20543 +                          outdata=,
20544 +                          fileref=,
20545 +                          recreatecmeta=N, /* optional */
20546 +                          incmeta=,     /* optional */
20547 +                          outcmeta=,    /* optional */
20548 +                          ndummyvars=_ndummyvars
20549 +                          );
20550 +    %global &ndummyvars;
20551 +
20552 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
20553 +       class
20554 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20555 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20556 +    ;
20557 +    run;
20558 +    %let &ndummyvars = 0;
20559 +    data _null_;
20560 +    %let dsid = %sysfunc(open(work._classout));
20561 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
20562 +    %let dsid = %sysfunc(close(&dsid));
20563 +    run;
20564 +
20565 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
20566 +       input
20567 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20568 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20569 +        / level=nominal stdize=no;
20570 +       make outvar = &outvar;
20571 +       score data = &indata out =&outdata;
20572 +       code  file=  "&fileref";
20573 +    run;
20574 +    %if &recreatecmeta eq Y %then %do;
20575 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
20576 +    data _tmpds;
20577 +        set _tmpds;
20578 +           ROLE = 'INPUT';
20579 +           LEVEL = 'INTERVAL';
20580 +           CREATOR='DMZIP';
20581 +           if NAME = '_TYPE_' then delete;
20582 +    run;
20583 +    data &outcmeta;
20584 +         set &incmeta _tmpds;
20585 +    run;
20586 +    %end;
20587 +    proc datasets lib=work nolist;
20588 +      delete  _dmdbdat _dmdbcat _classout
20589 +    %if &recreatecmeta eq Y %then %do;
20590 +    _tmpds
20591 +    %end;
20592 +    ;
20593 +    quit;
20594 +%Mend MakeDummyVariables;
20595 +
20596 +/*--- Determine Optimal Number of Cluster ----
20597 +%macro FindClusNum(statds=, groupds=, minvariation=);
20598 +   %global optnclus;
20599 +   data varclus_tmp(drop=_NAME_);
20600 +      set &statDs;
20601 +      where _type_ ='PROPOR';
20602 +   run;
20603 +   proc sort data=varclus_tmp;
20604 +      by _NCL_;
20605 +   run;
20606 +   proc transpose data=varclus_tmp out=varclus_tmp;
20607 +      by _NCL_;
20608 +      var %EM_INTERVAL_INPUT
20609 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20610 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
20611 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
20612 +          %do i = 2 %to &nvar;
20613 +          %let varname = %sysfunc(varname(&dsid, &i));
20614 +          &varname
20615 +          %end;
20616 +      %end;
20617 +   ;
20618 +   run;
20619 +
20620 +   %if &minVariation eq %then %do;
20621 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
20622 +   %end;
20623 +   %if ^(0<&minVariation<100) %then %do;
20624 +       %let minVariation = 90;
20625 +   %end;
20626 +
20627 +   data _null_;
20628 +      set varclus_tmp end=eof;
20629 +      by _NCL_;
20630 +      retain flag 0;
20631 +      if first._ncl_ then flag=0;
20632 +      if .<col1 < &minVariation then flag=1;
20633 +      if last._ncl_ and ^flag then do;
20634 +         call symput('OPTNCL', _ncl_);
20635 +         stop;
20636 +      end;
20637 +     if eof then call symput('OPTNCL', _ncl_);
20638 +   run;
20639 +
20640 +   %let optnclus = &OPTNCL;
20641 +
20642 +   data varclus_tmp(drop=_NCL_ _NAME_);
20643 +      set &statDs;
20644 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
20645 +   run;
20646 +   proc sort data=varclus_tmp;
20647 +      by _TYPE_;
20648 +   run;
20649 +   proc transpose data=varclus_tmp out=varclus_tmp;
20650 +      by _TYPE_;
20651 +   run;
20652 +   proc sort data=varclus_tmp;
20653 +      by _name_ _type_;
20654 +   run;
20655 +
20656 +  proc transpose data=varclus_tmp out=&groupds;
20657 +      by _NAME_;
20658 +   run;
20659 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
20660 +      by Cluster descending Rsquare;
20661 +      where Cluster ne 0;
20662 +   run;
20663 +   proc datasets lib=work nolist mt=(DATA VIEW);
20664 +      delete varclus_tmp;
20665 +   run;
20666 +   quit;
20667 +%mend findClusNum;
20668 +*/
20669 +
20670 +%macro getNclusfromTrain(inoutstat=, nc=);
20671 +%global &nc;
20672 +data _null_;
20673 +    set &inoutstat end=eof;
20674 +    if eof then do;
20675 +    call symput("&nc", _ncl_);
20676 +    end;
20677 +run;
20678 +%mend  getNclusfromTrain;
20679 +
20680 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
20681 +
20682 +     *--- Build Code to Modify Metadata ---*;
20683 +     filename X "&deltacodefile";
20684 +     data _null_;
20685 +        FILE X;
20686 +        set &groupds end=eof;
20687 +        /*by Cluster;*/
20688 +         if _N_=1 then do;
20689 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
20690 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
20691 +           %end;
20692 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
20693 +           put "if upcase(strip(NAME)) in (";
20694 +        end;
20695 +        if Strip(upcase(Selected)) eq 'YES' then do;
20696 +           string = '"'!!trim(left(VARIABLE))!!'"';
20697 +           put string;
20698 +        end;
20699 +        if eof then do;
20700 +           put ') then ROLE="INPUT";';
20701 +           put 'else ROLE="REJECTED";';
20702 +           put 'end;';
20703 +
20704 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
20705 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
20706 +           %end;
20707 +        end;
20708 +     run;
20709 +     quit;
20710 +
20711 +     filename X;
20712 +
20713 +     quit;
20714 +%mend MakeDeltaCode;
20715 +
20716 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
20717 +    %if ^%sysfunc(exist(&statds)) %then %do;
20718 +         %goto doendc;
20719 +    %end;
20720 +
20721 +    data &corrds(drop=_TYPE_ _NCL_) ;
20722 +       set &statds;
20723 +       where _type_ eq 'CORR' ;
20724 +    run ;
20725 +    proc sort data=&corrds;
20726 +       by _NAME_ ;
20727 +    run ;
20728 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
20729 +      BY _NAME_ ;
20730 +    run ;
20731 +    data &corrplotds;
20732 +       length _Y_ $100;
20733 +       set &corrplotDs;
20734 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
20735 +    run ;
20736 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
20737 +       set &corrplotds;
20738 +       where _LABEL_ ne '' ;
20739 +       keep _TMP_ _LABEL_ ;
20740 +    run ;
20741 +    data _null_;
20742 +       nobs=0;
20743 +       dsid = open('varclus_match');
20744 +       if dsid then do;
20745 +          nobs = attrn(dsid, 'NOBS');
20746 +          dsid = close(dsid);
20747 +       end;
20748 +       call symput ('CORR_NOBS', nobs);
20749 +    run;
20750 +    %if &corr_nobs %then %do;
20751 +        proc sort data=varclus_match;
20752 +           by _name_;
20753 +        run ;
20754 +        proc sort data=&corrplotds;
20755 +           by _name_;
20756 +        run ;
20757 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
20758 +           merge varclus_match &corrplotds;
20759 +           by _NAME_ ;
20760 +           if _X_ eq '' then _X_=_NAME_ ;
20761 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20762 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
20763 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20764 +
20765 +       run ;
20766 +    %end;
20767 +    %else %do;
20768 +        proc sort data=&corrplotds;
20769 +           by _name_;
20770 +        run ;
20771 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
20772 +           set &corrplotds;
20773 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20774 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
20775 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
20776 +
20777 +        run ;
20778 +    %end;
20779 +    proc sort data=&corrplotds;
20780 +       by _X_ _Y_;
20781 +    run ;
20782 +    proc datasets lib=work nolist mt=(DATA VIEW);
20783 +       delete varclus_match;
20784 +    run;
20785 +    quit;
20786 +
20787 +%doendc:
20788 +
20789 +%mend MakeVarClusCorrData;
20790 +
20791 +%macro MakeStatPlotData(statds= , outstatplotds=);
20792 +   %if %sysfunc(exist(&statds)) %then %do;
20793 +
20794 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
20795 +          set &statDs;
20796 +          where _type_ in('MEAN', 'STD', 'N');
20797 +       run ;
20798 +       proc transpose data=varclus_tmp out=&outstatplotds;
20799 +          id _TYPE_ ;
20800 +       run ;
20801 +       data &outstatplotds;
20802 +          set &outstatplotds(obs=1000);
20803 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
20804 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
20805 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
20806 +          else SCALEDSTD= STD ;
20807 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
20808 +       run ;
20809 +       proc sort data=&outstatplotds;
20810 +          by descending SCALEDSTD ;
20811 +       run ;
20812 +       proc datasets lib=work nolist mt=(DATA VIEW);
20813 +          delete varclus_tmp;
20814 +       run;
20815 +       quit;
20816 +    %end;
20817 +
20818 +%mend MakeStatPlotData;
20819 +
20820 +
20821 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
20822 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
20823 +    data &EM_USER_OUTSTATSCORE;
20824 +          set &indata;
20825 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
20826 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
20827 +          if _TYPE_ = 'STD' then _NAME_='STD';
20828 +          DROP _TYPE_ _NCL_;
20829 +     run;
20830 +
20831 +     filename _file_  "&fileRef";
20832 +
20833 +     data _null_;
20834 +        FILE _file_ MOD;
20835 +        put ' ';
20836 +        put '/*-------------------------------------------------*/';
20837 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
20838 +        put '/*-------------------------------------------------*/';
20839 +        put ' ';
20840 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
20841 +
20842 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
20843 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
20844 +
20845 +        %let k = 1;
20846 +        %do %while(^%sysfunc(fetch(&dsid)));
20847 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20848 +                %if &k > 2 %then %do;
20849 +                 %let cn = %eval(&k-2);
20850 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
20851 +                %end;
20852 +                %let k = %eval(&k+1);
20853 +        %end;
20854 +
20855 +        %let rc = %sysfunc(rewind(&dsid));
20856 +
20857 +        %do i= 2 %to &nvar;
20858 +            %let _varname =  %sysfunc(varname(&dsid, &i));
20859 +            %do %while(^%sysfunc(fetch(&dsid)));
20860 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
20861 +                %if &_name = MEAN %then
20862 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
20863 +                %else %if &_name = STD %then
20864 +                %let _std = %sysfunc(getvarn(&dsid, &i));
20865 +                %else %do;
20866 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
20867 +                      %let abscoeff = %sysfunc(abs(&coeff));
20868 +                          %if &abscoeff >  0 %then %do;
20869 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
20870 +                           %end;
20871 +                 %end;
20872 +             %end;
20873 +             %let rc = %sysfunc(rewind(&dsid));
20874 +         %end;
20875 +
20876 +        %let dsid= %sysfunc(close(&dsid));
20877 +       run;
20878 +%mend CreateScoreCode;
20879 +
20880 +
20881 +
20882 +/*----------------------------------------------------------
20883 +    Instead of using %MakeRSquareData,
20884 +    %MakeVarClusResultTable at macro2.source is used
20885 + +----------------------------------------------------------*/
20886 +
20887 +
20888 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
20889 +
20890 +/* modifying  from ods rsquare = data */
20891 +
20892 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
20893 +    Length Cluster $16;
20894 +    length Variable $32;
20895 +    Length VariableLabel $64;
20896 +    set &indata; retain CurrentCluster;
20897 +    if NumberOfClusters ^= &ncluster then delete;
20898 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
20899 +    CurrentCluster = Cluster;
20900 +   run;
20901 +proc sort data =&outdata ;
20902 +     by Cluster RsquareRatio;
20903 +run;
20904 +data _tmprsq(drop=index);
20905 +     set &outdata; by Cluster;
20906 +     if first.Cluster then do;
20907 +     index = strip(scan(Cluster,2 ));
20908 +     Variable = "Clus"||index;
20909 +     VariableLabel = "Cluster Component "||index;
20910 +     OwnCluster = 1;
20911 +     NextClosest = .;
20912 +     RsquareRatio = 0;
20913 +     output;
20914 +     end;
20915 +run;
20916 +
20917 +proc sort data = _tmprsq ;
20918 +     by Cluster RsquareRatio;
20919 +run;
20920 +data &outdata;
20921 +     set &outdata _tmprsq;
20922 +by Cluster;
20923 +run;
20924 +
20925 +
20926 +/* Just create the Selected variable with all YES */
20927 +
20928 +data &outdata;
20929 +    set &outdata; by cluster;
20930 +    length Selected $8;
20931 +    Selected = 'YES';
20932 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20933 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20934 +    rename OwnCluster = RSqWithClusterComp;
20935 +    rename NextClosest = RSqWithNextClusComp;
20936 +run;
20937 +
20938 +
20939 +/* Selected = Y/N will be done %score section -----
20940 +
20941 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
20942 +data &outdata;
20943 +    set &outdata; by cluster;
20944 +    length Selected $8;
20945 +    if first.Cluster then Selected = 'YES';
20946 +    else Selected = 'NO';
20947 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20948 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20949 +    rename OwnCluster = RSqWithClusterComp;
20950 +    rename NextClosest = RSqWithNextClusComp;
20951 +run;
20952 +%end;
20953 +%else %do;
20954 +data &outdata;
20955 +    set &outdata; by cluster;
20956 +    if last.Cluster then Selected = 'YES';
20957 +    else Selected = 'NO';
20958 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
20959 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
20960 +    rename OwnCluster = RSqWithClusterComp;
20961 +    rename NextClosest = RSqWithNextClusComp;
20962 +run;
20963 +%end;
20964 +---------------------------------------------------------------*/
20965 +
20966 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
20967 +/* to calculate NextClosestClusRsq */
20968 +proc transpose data = &inClusRSquare  out=_clusRsq;
20969 +      by cluster;
20970 +      run;
20971 +data _clusRsq;
20972 +     set _clusRsq;
20973 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
20974 +run;
20975 +
20976 +proc sort data=_clusRsq;
20977 +    by cluster col1;
20978 +    run;
20979 +data _clusRsq(drop=_NAME_ _LABEL_);
20980 +     set _clusRsq; by cluster;
20981 +     if last.Cluster then output;
20982 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
20983 +     rename COL1 = RSqWithNextClusComp;
20984 +     rename Cluster = Variable;
20985 +     label  Cluster = "Variable";
20986 +run;
20987 +
20988 +proc sort data =&outdata;
20989 +     by Variable;
20990 +run;
20991 +data &outdata;
20992 +    merge &outdata _clusRsq;
20993 +    by Variable;
20994 +run;
20995 +proc sort data =&outdata;
20996 +by Cluster  RsquareRatio;
20997 +run;
20998 +quit;
20999 +%end;
21000 +
21001 +proc datasets lib = work nolist;
21002 +     delete _tmprsq _clusRsq;
21003 +     run;
21004 +quit;
21005 +
21006 +%mend MakeRSquareData;
21007 +
21008 +
21009 +/*-------------------------------------------------------------------------*/
21010 +
21011 +
21012 +
21013 +%macro ModifyCorr(indata=,
21014 +                  outdata=,
21015 +                  rsquare = Y
21016 +                  );
21017 +    data corr_tmp;
21018 +        set &indata;
21019 +    run;
21020 +     proc sql;
21021 +           update &indata
21022 +           set
21023 +     %let dsid = %sysfunc(open(work.corr_tmp));
21024 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21025 +          %do i = 4 %to &nvar;
21026 +          %let _name = %sysfunc(varname(&dsid, &i));
21027 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21028 +            %else  %let _name_md = &_name;
21029 +            %if &i < &nvar %then %do;
21030 +               &_name = 1- &_name_md ,
21031 +            %end;
21032 +            %else %do;
21033 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
21034 +            %end;
21035 +          %end;
21036 +      %let dsid= %sysfunc(close(&dsid));
21037 +
21038 +      select * from &indata;
21039 +      run;
21040 +      proc datasets lib = work nolist;
21041 +           delete corr_tmp;
21042 +      run;
21043 +      quit;
21044 +
21045 + %mend ModifyCorr;
21046 +
21047 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
21048 +    data &outdata(drop= _NCL_  _TYPE_);
21049 +       set &indata;
21050 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21051 +       rename _NAME_ = Cluster;
21052 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21053 +    run;
21054 +    %if &RSquare eq Y %then %do;
21055 +     data corr_tmp;
21056 +        set &outdata;
21057 +     run;
21058 +
21059 +     data &outdata(drop=i);
21060 +          set &outdata;
21061 +          %let dsid = %sysfunc(open(work.corr_tmp));
21062 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21063 +          %do i = 2 %to &nvar;
21064 +            %let _name = %sysfunc(varname(&dsid, &i));
21065 +            %let _name_md = &_name.**2;
21066 +                &_name = &_name_md;
21067 +          %end;
21068 +      %let dsid= %sysfunc(close(&dsid));
21069 +      run;
21070 +      proc datasets lib = work nolist;
21071 +           delete corr_tmp;
21072 +      run;
21073 +
21074 +    %end;
21075 +     quit;
21076 +%mend MakeClusStructCorrData;
21077 +
21078 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
21079 +    data &outdata(drop= _NCL_  _TYPE_);
21080 +       set &indata;
21081 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21082 +       rename _NAME_ = Cluster;
21083 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21084 +    run;
21085 +    data corr_tmp;
21086 +        set &outdata;
21087 +    run;
21088 +
21089 +    %let dsid = %sysfunc(open(work.corr_tmp));
21090 +    %let nclus2= %eval(&ncluster+1);
21091 +    data &outdata;
21092 +         set &outdata;
21093 +          %do i = 2 %to &nclus2;
21094 +          %let i_1 = %eval(&i-1);
21095 +            %let _name = %sysfunc(varname(&dsid, &i));
21096 +            %let _newName = Clus&i_1;
21097 +                rename &_name = &_newName; ;
21098 +                *label &_name ="Cluster &i_1";
21099 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21100 +          %end;
21101 +          keep Cluster
21102 +          %do i = 2 %to &nclus2;
21103 +                %let _name = %sysfunc(varname(&dsid, &i));
21104 +                &_name
21105 +          %end;
21106 +          ;
21107 +    %let dsid= %sysfunc(close(&dsid));
21108 +     run;
21109 +     quit;
21110 +
21111 +    %if &RSquare eq Y %then %do;
21112 +
21113 +       data corr_tmp;
21114 +        set &outdata;
21115 +     run;
21116 +
21117 +     data &outdata(drop=i);
21118 +          set &outdata;
21119 +          %let dsid = %sysfunc(open(work.corr_tmp));
21120 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21121 +          %do i = 2 %to &nvar;
21122 +            %let _name = %sysfunc(varname(&dsid, &i));
21123 +            %let _name_md = &_name.**2;
21124 +                &_name = &_name_md;
21125 +          %end;
21126 +      %let dsid= %sysfunc(close(&dsid));
21127 +      run;
21128 +    %end;
21129 +
21130 +    %if &makeplotds eq Y %then %do;
21131 +     proc transpose data = &outdata
21132 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21133 +          by cluster;
21134 +     run;
21135 +     data &plotds;
21136 +          set  &plotds;
21137 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21138 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21139 +     run;
21140 +     %end;
21141 +     proc datasets lib = work nolist;
21142 +           delete corr_tmp;
21143 +     run;
21144 +     quit;
21145 +%mend MakeInterClusCorrData;
21146 +
21147 +
21148 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21149 +
21150 +data &outlink(drop = Selected);
21151 +     set &indata;
21152 +     LINKID = _N_;
21153 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21154 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21155 +run;
21156 +data &outnode(keep=NODEID TYPE LABEL);
21157 +    set &indata;
21158 +    length TYPE $16;
21159 +    rename Variable = NODEID;
21160 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21161 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21162 +    then  TYPE = "CLUSTER";
21163 +    else  TYPE="VARIABLE";
21164 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21165 +run;
21166 +quit;
21167 +%mend MakeClusConstellData;
21168 +
21169 +
21170 +
21171 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
21172 +
21173 +data &outlink(drop = Selected);
21174 +     set &indata;
21175 +     LINKID = _N_;
21176 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
21177 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
21178 +run;
21179 +data &outnode(keep=NODEID TYPE LABEL);
21180 +    set &indata;
21181 +    length TYPE $16;
21182 +    rename Variable = NODEID;
21183 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
21184 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
21185 +    then  TYPE = "CLUSTER";
21186 +    else  TYPE="VARIABLE";
21187 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
21188 +run;
21189 +quit;
21190 +%mend MakeClusConstellData;
21191 +
21192 +
21193 +/*--- This will work only when inds is not a view data -------
21194 +
21195 +%macro getNVarNObs(inds=, nvar=, nobs=);
21196 +
21197 +    %global &nvar;
21198 +    %global &nobs;
21199 +    data _null_;
21200 +         dsid = open("&inds");
21201 +         nv = attrn(dsid, 'NVAR');
21202 +         no = attrn(dsid, 'NOBS');
21203 +         dsid = close(dsid);
21204 +         call symput("&nvar", nv);
21205 +         call symput("&nobs", no);
21206 +    run;
21207 +    quit;
21208 +%mend  getNVarNObs;
21209 +
21210 ++---------------------------------------------------------------*/
21211 +
21212 +
21213 +%macro getNVar(inds=, nvar=);
21214 +    %global &nvar;
21215 +    data _null_;
21216 +         dsid = open("&inds");
21217 +         nv = attrn(dsid, 'NVAR');
21218 +         dsid = close(dsid);
21219 +         call symput("&nvar", nv);
21220 +    run;
21221 +    quit;
21222 +%mend  getNVar;
21223 +
21224 +
21225 +
21226 +%macro getNObs(inds=, nobs=);
21227 +    %global &nobs;
21228 +    data _null_;
21229 +        set &inds end=eof;
21230 +        if eof then call symput("&nobs", _N_);
21231 +    run;
21232 +    quit;
21233 +%mend  getNObs;
21234 +
21235 +%Macro CreateVarclusMeta(trainnum=);
21236 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
21237 +    data &EM_USER_VARCLUSMETA;
21238 +         length TrainNum 8.;
21239 +         length NewTrain $8;
21240 +         length NGCluster 8.;
21241 +         length ExportedComp $16;
21242 +         length HideVariable $8;
21243 +         TrainNum = &trainnum;
21244 +         NewTrain = "Y";
21245 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
21246 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
21247 +         NGCluster = 0; /* zero means no twostage */
21248 +   run;
21249 +   quit;
21250 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
21251 +
21252 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
21253 +    data &outdata(drop= _NCL_  _TYPE_);
21254 +       set &indata;
21255 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
21256 +       %if &globalclusid ne %then %do;
21257 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21258 +       rename _NAME_ = Cluster;
21259 +       %end;
21260 +       %else %do;
21261 +        _NAME_ = upcase(_NAME_);
21262 +       rename _NAME_ = Cluster;
21263 +       %end;
21264 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21265 +    run;
21266 +    data corr_tmp;
21267 +        set &outdata;
21268 +    run;
21269 +
21270 +    %let dsid = %sysfunc(open(work.corr_tmp));
21271 +    %let nclus2= %eval(&ncluster+1);
21272 +    data &outdata;
21273 +         set &outdata;
21274 +          %do i = 2 %to &nclus2;
21275 +          %let i_1 = %eval(&i-1);
21276 +            %let _name = %sysfunc(varname(&dsid, &i));
21277 +            %if &globalclusid ne %then
21278 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
21279 +                     rename &_name = &_newName;
21280 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
21281 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
21282 +                %end;
21283 +            %else
21284 +                %do; %let _newName = CLUS&i_1;
21285 +                     rename &_name = &_newName;
21286 +                     *label &_name ="Cluster &i_1";
21287 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
21288 +                %end;
21289 +          %end;
21290 +          keep Cluster
21291 +          %do i = 2 %to &nclus2;
21292 +                %let _name = %sysfunc(varname(&dsid, &i));
21293 +                &_name
21294 +          %end;
21295 +          ;
21296 +    %let dsid= %sysfunc(close(&dsid));
21297 +     run;
21298 +     quit;
21299 +
21300 +    %if &RSquare eq Y %then %do;
21301 +
21302 +       data corr_tmp;
21303 +        set &outdata;
21304 +     run;
21305 +
21306 +     data &outdata;
21307 +          set &outdata;
21308 +          %let dsid = %sysfunc(open(work.corr_tmp));
21309 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21310 +          %do i = 2 %to &nvar;
21311 +            %let _name = %sysfunc(varname(&dsid, &i));
21312 +            %let _name_md = &_name.**2;
21313 +                &_name = &_name_md;
21314 +          %end;
21315 +      %let dsid= %sysfunc(close(&dsid));
21316 +      run;
21317 +    %end;
21318 +
21319 +    %if &makeplotds eq Y %then %do;
21320 +     proc transpose data = &outdata
21321 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21322 +          by cluster;
21323 +     run;
21324 +     data &plotds;
21325 +          set  &plotds;
21326 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21327 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
21328 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
21329 +     run;
21330 +     %end;
21331 +     proc datasets lib = work nolist;
21332 +           delete corr_tmp;
21333 +     run;
21334 +     quit;
21335 +%mend MakeInterClusCorrData;
21336 +
21337 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
21338 +    data _tmpds(drop= _NCL_);
21339 +       set &indata;
21340 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
21341 +       %if &globalclusid ne %then %do;
21342 +           _NAME_ = "GC&globalclusid.";
21343 +       rename _NAME_ = Cluster;
21344 +       %end;
21345 +       %else %do;
21346 +        _NAME_ = "CLUS";
21347 +        rename _NAME_ = Cluster;
21348 +       %end;
21349 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
21350 +    run;
21351 +    proc transpose data =_tmpds out =&outdata;
21352 +    run;
21353 +
21354 +    data &outdata(drop=COL1);
21355 +        %if &globalclusid ne %then %do;
21356 +        length GCluster $16;
21357 +        %end;
21358 +        length Cluster $32;
21359 +        length _NAME_ $32;
21360 +         set &outdata;
21361 +         _NAME_ = upcase(_NAME_);
21362 +         rename _NAME_=Variable;
21363 +         *label _NAME_="Variable";
21364 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21365 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21366 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21367 +
21368 +         %if &globalclusid ne %then %do;
21369 +          GCluster = "GC&globalclusid";
21370 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
21371 +         %end;
21372 +         %else %do;
21373 +         Cluster = "CLUS"||strip(COL1);
21374 +        %end;
21375 +         rename COL2 = RSqWithOwnClusComp;
21376 +         *label COL2 = "R-Square With Own Cluster Component";
21377 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21378 +
21379 +   run;
21380 +   proc sort data =&outdata;
21381 +        by Cluster RSqWithOwnClusComp;
21382 +   run;
21383 +   proc datasets lib = work nolist;
21384 +           delete _tmpds;
21385 +   run;
21386 +   quit;
21387 +%mend MakeOwnRSquare;
21388 +
21389 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
21390 +    data &outdata(drop= _NCL_  _TYPE_);
21391 +       %if &globalclusid ne %then %do;
21392 +        length GCluster $16;
21393 +        %end;
21394 +       set &indata;
21395 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
21396 +       %if &globalclusid ne %then %do;
21397 +         GCluster = "GC&globalclusid";
21398 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
21399 +         rename _NAME_ = Cluster;
21400 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21401 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21402 +
21403 +       %end;
21404 +       %else %do;
21405 +         _NAME_ = upcase(_NAME_);
21406 +         rename _NAME_ = Cluster;
21407 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21408 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21409 +
21410 +       %end;
21411 +     run;
21412 +    %if &RSquare eq Y %then %do;
21413 +     data corr_tmp;
21414 +          set &outdata;
21415 +     run;
21416 +     %let istart = 2;
21417 +     %if &globalclusid ne %then %let istart = 3;
21418 +     data &outdata;
21419 +          set &outdata;
21420 +          %let dsid = %sysfunc(open(work.corr_tmp));
21421 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21422 +          %do i =&istart %to &nvar;
21423 +            %let _name = %sysfunc(varname(&dsid, &i));
21424 +            %let _name_md = &_name.**2;
21425 +                &_name = &_name_md;
21426 +          %end;
21427 +      %let dsid= %sysfunc(close(&dsid));
21428 +      run;
21429 +      proc datasets lib = work nolist;
21430 +           delete corr_tmp;
21431 +      run;
21432 +    %end;
21433 +     quit;
21434 +%mend MakeClusStructCorrData;
21435 +
21436 +/*
21437 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
21438 +*/
21439 +
21440 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
21441 +
21442 +     /* The indata should be the outdata
21443 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
21444 +
21445 +     proc sort data =&indata out=_tmpclusRsq;
21446 +     by cluster;
21447 +     run;
21448 +
21449 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21450 +      by cluster;
21451 +     run;
21452 +
21453 +     proc sort data=_tmpclusRsq;
21454 +        by _NAME_ COL1;
21455 +     run;
21456 +
21457 +     data _tmpclusRsq;
21458 +         length _NAME_ $32;
21459 +         set _tmpclusRsq; by _NAME_;
21460 +          _NAME_ = upcase(_NAME_);
21461 +          %if &ncluster ne 1 %then %do;
21462 +             if last._NAME_ then delete;
21463 +          %end;
21464 +          %else %do;
21465 +             COL1 = 0;
21466 +          %end;
21467 +     run;
21468 +     /* need to sort again */
21469 +     proc sort data=_tmpclusRsq;
21470 +        by _NAME_ COL1;
21471 +     run;
21472 +
21473 +     data &outdata;
21474 +         set _tmpclusRsq; by _NAME_;
21475 +         Cluster = upcase(Cluster);
21476 +         if last._NAME_ then output;
21477 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21478 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21479 +         rename COL1 = RSqWithNextClusComp;
21480 +         Cluster = upcase(Cluster);
21481 +         rename Cluster = ClosestCluster;
21482 +         *label  Cluster = "Next Closest Cluster";
21483 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21484 +         rename _NAME_ = Variable;
21485 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21486 +    run;
21487 +
21488 +
21489 +    %if &globalclusid ne %then %do;
21490 +    data &outdata;
21491 +       length GCluster $16;
21492 +       set &outdata;
21493 +       GCluster = "GC&globalclusid";
21494 +       run;
21495 +    %end;
21496 +    proc datasets lib = work nolist;
21497 +           delete _tmpclusRsq;
21498 +    run;
21499 +    quit;
21500 +%mend FindNextClosestClusByVar;
21501 +
21502 +
21503 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
21504 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
21505 +     proc sort data =&indata out=_tmpclusRsq;
21506 +     by cluster;
21507 +     run;
21508 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
21509 +     by cluster;
21510 +     run;
21511 +     proc sort data=_tmpclusRsq;
21512 +        by _NAME_ col1;
21513 +     run;
21514 +     data _tmpclusRsq;
21515 +         length _NAME_ $32;
21516 +         set _tmpclusRsq; by _NAME_;
21517 +          _NAME_ = upcase(_NAME_);
21518 +          %if &ncluster ne 1 %then %do;
21519 +             if last._NAME_ then delete;
21520 +          %end;
21521 +          %else %do;
21522 +             COL1 = 0;
21523 +          %end;
21524 +     run;
21525 +     data &outdata;
21526 +         set _tmpclusRsq; by _NAME_;
21527 +         Cluster = upcase(Cluster);
21528 +         if last._NAME_ then output;
21529 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
21530 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
21531 +         rename COL1 = RSqWithNextClusComp;
21532 +         Cluster = upcase(Cluster);
21533 +         rename Cluster = ClosestCluster;
21534 +         *label  Cluster = "Next Closest Cluster";
21535 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
21536 +         rename _NAME_ = Variable;
21537 +         *label  _NAME_ = "Variable";
21538 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21539 +
21540 +    run;
21541 +    %if &globalclusid ne %then %do;
21542 +    data &outdata;
21543 +       length GCluster $16;
21544 +       set &outdata;
21545 +       GCluster = "GC&globalclusid";
21546 +       run;
21547 +    %end;
21548 +
21549 +    proc datasets lib = work nolist;
21550 +           delete _tmpclusRsq;
21551 +    run;
21552 +
21553 +    quit;
21554 +%mend FindNextClosestClusByCluster;
21555 +
21556 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
21557 +/*----
21558 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
21559 +-----------*/
21560 +
21561 +proc sort data =&indata1;
21562 +    by Variable;
21563 +run;
21564 +proc sort data =&indata2;
21565 +    by Variable;
21566 +run;
21567 +data &outdata;
21568 +    merge &indata1 &indata2;
21569 +    by Variable;
21570 +    length Type $16;
21571 +    Type = 'Variable';
21572 +    *label Type ='Type';
21573 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21574 +run;
21575 +
21576 +
21577 +data &indata3;
21578 +    set  &indata3 ;
21579 +    length RSqWithOwnClusComp 8.;
21580 +    Cluster = Variable;
21581 +    RSqWithOwnClusComp = 1;
21582 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
21583 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
21584 +    length Type $16;
21585 +    Type = 'ClusterComp';
21586 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
21587 +
21588 +;
21589 +run;
21590 +
21591 +proc sort data=&outdata;
21592 +    by Cluster;
21593 +run;
21594 +proc sort data =&indata3;
21595 +    by Cluster;
21596 +run;
21597 +
21598 +data &outdata;
21599 +     set &outdata &indata3;
21600 +     by Cluster;
21601 +run;
21602 +
21603 +
21604 +/* Create the Selected variable with all YES */
21605 +
21606 +data &outdata;
21607 +     set &outdata;
21608 +     length RsqRatio 8.;
21609 +     length Selected $8;
21610 +     *label RSqRatio = "1-R**2 Ratio";
21611 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
21612 +     *label Selected = "Variable Selected";
21613 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
21614 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
21615 +     Selected ='YES';
21616 +     rename _LABEL_ = Label;
21617 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
21618 +run;
21619 +
21620 +
21621 +/*----  Selected = Y/N will be assigened at the %score                   -------+
21622 +        Just create the Selected variable with all YES at the step above
21623 + +------------------------------------------------------------------------------+
21624 +
21625 +proc sort data=&outdata;
21626 +    by Cluster RsqRatio;
21627 +run;
21628 +
21629 +%if &selectedcomp eq CLUSTERCOMP %then %do;
21630 +data &outdata;
21631 +     set &outdata; by Cluster;
21632 +     length Selected $8;
21633 +     label Selected = "Variable Selected";
21634 +     if  first.Cluster then Selected ='Yes';
21635 +     else Selected = 'No';
21636 +    run;
21637 +%end;
21638 +%else %do;
21639 +data &outdata(drop = _var _varchange);
21640 +     set &outdata; retain _var 0; by Cluster;
21641 +     length Selected $8;
21642 +     label Selected = "Variable Selected";
21643 +     if first.Cluster then  _varchange = 0;
21644 +     else _varchange =1;
21645 +     if _var ne _varchange then  Selected  = 'Yes';
21646 +     else Selected = 'No';
21647 +     if last.cluster then  _var = 0;
21648 +     else _var = _varchange;
21649 +run;
21650 +%end;
21651 +
21652 +--------------------------------------------------------------*/
21653 +
21654 +quit;
21655 +%mend MakeVarClusResultTable;
21656 +
21657 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
21658 +     proc sort data =&indata;
21659 +        by cluster;
21660 +     run;
21661 +     proc transpose data =&indata
21662 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
21663 +          by cluster;
21664 +     run;
21665 +     data &outdata;
21666 +          set  &outdata;
21667 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21668 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21669 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
21670 +     run;
21671 +     %if &globalclusid ne %then %do;
21672 +     data &outdata;
21673 +          Length GCluster $16;
21674 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
21675 +          set  &outdata;
21676 +          GCluster ="GC&globalclusid.";
21677 +          run;
21678 +     %end;
21679 +
21680 +%Mend MakePlotDataFromCorrTable;
21681 +
21682 +
21683 +%macro MakeCorrelation(indata=,
21684 +                       outstat=_tmpoutstat,
21685 +                       corrmatrix=N,
21686 +                       outcorr=_tmpoutcorr,
21687 +                       includeclassvar=N,
21688 +                       target=,
21689 +                       freq=,
21690 +                       weight=);
21691 +   %if &target eq  %then %do;
21692 +
21693 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
21694 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
21695 +       %if &includeclassvar eq Y %then %do;
21696 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
21697 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
21698 +          %do i = 2 %to &nvar;
21699 +          %let varname = %sysfunc(varname(&dsid, &i));
21700 +          &varname
21701 +          %end;
21702 +       %end;
21703 +       ;
21704 +      %if &freq ne  %then %do;
21705 +          freq &freq;
21706 +      %end;
21707 +      %if &weight ne  %then %do;
21708 +          weight &weight;
21709 +      %end;
21710 +
21711 +      run;
21712 +      %if &corrmatrix eq Y %then %do;
21713 +      data  &outcorr (drop = _NCL_ _TYPE_);
21714 +           set  &outstat ;
21715 +           if _TYPE_ ='CORR' then output;
21716 +      run;
21717 +      %end;
21718 +    %end;
21719 +    %else %do;
21720 +       proc corr data=&indata outp=&outstat noprint;
21721 +            var
21722 +       %let dsid = %sysfunc(open(&indata));
21723 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
21724 +          %do i = 1 %to &nvar;
21725 +              %let _name = %sysfunc(varname(&dsid, &i));
21726 +              %if &_name ne &target %then;
21727 +              &_name
21728 +           %end;
21729 +        %let dsid= %sysfunc(close(&dsid));
21730 +        ;
21731 +        with &target;
21732 +        run;
21733 +    %end;
21734 +    quit;
21735 +%mend MakeCorrelation;
21736 +
21737 +
21738 +%macro MakeCorrelationDistance(indata=,
21739 +                               outdata=,
21740 +                               rsquare = N
21741 +                               );
21742 +    data corr_tmp;
21743 +        set &indata;
21744 +        if _N_ = 1 then do;
21745 +           output;
21746 +           stop;
21747 +         end;
21748 +    run;
21749 +    %if &outdata ne  %then %let  _outdata = &outdata;
21750 +    %else %let _outdata = &indata;
21751 +
21752 +    data &_outdata;
21753 +         set &indata;
21754 +
21755 +         %let dsid = %sysfunc(open(work.corr_tmp));
21756 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
21757 +          %do i = 2 %to &nvar;
21758 +              %let _name = %sysfunc(varname(&dsid, &i));
21759 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
21760 +              %else  %let _name_md = &_name;
21761 +              &_name = 1- &_name_md;
21762 +          %end;
21763 +      %let dsid= %sysfunc(close(&dsid));
21764 +      run;
21765 +      proc datasets lib = work nolist;
21766 +           delete corr_tmp;
21767 +      run;
21768 +      quit;
21769 +  %mend MakeCorrelationDistance;
21770 +
21771 +
21772 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
21773 +                                   rsquare = N
21774 +                                   );
21775 +    data corr_tmp;
21776 +        set &indata;
21777 +    run;
21778 +    proc sql noprint;
21779 +           update &indata
21780 +           set
21781 +     %let dsid = %sysfunc(open(work.corr_tmp));
21782 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
21783 +          %do i = 4 %to &nvar;
21784 +          %let _name = %sysfunc(varname(&dsid, &i));
21785 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
21786 +            %else  %let _name_md = &_name;
21787 +            %if &i < &nvar %then %do;
21788 +               &_name = 1- &_name_md ,
21789 +            %end;
21790 +            %else %do;
21791 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
21792 +            %end;
21793 +          %end;
21794 +      %let dsid= %sysfunc(close(&dsid));
21795 +
21796 +      select * from &indata;
21797 +      run;
21798 +     data &indata( drop = _NCL_);
21799 +           set &indata;
21800 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
21801 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
21802 +     run;
21803 +     data &indata(DROP = _NCL_);
21804 +           set &indata;
21805 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
21806 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
21807 +           rename _NAME_ = _VAR_;
21808 +     run;
21809 +     proc datasets lib = work nolist;
21810 +           delete corr_tmp;
21811 +     run;
21812 +     quit;
21813 + %mend UpdateOutStatCorrToDistance;
21814 +
21815 +
21816 +%macro HierClusWithCorr(indata= ,
21817 +                        ncluster=,
21818 +                        method = Ward,
21819 +                        outtree = _outtree,
21820 +                        idvar =_VAR_,
21821 +                        outdata=,
21822 +                        rescore = N,
21823 +                        newncluster=
21824 +                        );
21825 +      %global &newncluster;
21826 +      %if &rescore ne Y %then %do;
21827 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
21828 +                   method=&method outtree=&outtree noprint;
21829 +           id &idvar;
21830 +      run;
21831 +      %end;
21832 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
21833 +      run;
21834 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
21835 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
21836 +      run;
21837 +      data _outcontent;
21838 +          set _outcontent;
21839 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
21840 +          index = 1;
21841 +          rename NAME = _NAME_;
21842 +      run;
21843 +      proc sort data=_outcontent;
21844 +          by _NAME_;
21845 +      run;
21846 +      proc sort data =&outdata;
21847 +           by _NAME_;
21848 +      run;
21849 +      data &outdata(drop=index);
21850 +          merge &outdata _outcontent;
21851 +          by _NAME_;
21852 +          if index = . then delete;
21853 +      run;
21854 +      /*-----------------------------------------------------------*/
21855 +      data &outdata;
21856 +           length CLUSNAME $16;
21857 +           set &outdata;
21858 +           if CLUSTER > &ncluster then delete;
21859 +           CLUSNAME='GC'||strip(CLUSTER);
21860 +           *label CLUSNAME = "Cluster Name";
21861 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
21862 +           rename _NAME_ = VARIABLE ;
21863 +           *label _NAME_ = "Variable";
21864 +           *label CLUSTER = "Cluster";
21865 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
21866 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
21867 +      run;
21868 +      proc sort data=&outdata out=&outdata;
21869 +           by CLUSTER;
21870 +      run;
21871 +      proc means data =&outdata noprint;
21872 +           output out=_meanout;
21873 +      run;
21874 +      data _null_;
21875 +            set _meanout;
21876 +            if strip(_STAT_) eq 'MAX' then do;
21877 +            call symput("&newncluster", CLUSTER);
21878 +            stop;
21879 +            end;
21880 +      run;
21881 +
21882 +      proc datasets lib = work nolist;
21883 +           delete _outcontent _meanout;
21884 +      run;
21885 +      quit;
21886 +%mend  HierClusWithCorr;
21887 +
21888 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
21889 +
21890 +     data _tmpindata;
21891 +          set &indata;
21892 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
21893 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
21894 +          if _TYPE_ = 'STD' then _NAME_='STD';
21895 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
21896 +          DROP _TYPE_ _NCL_;
21897 +     run;
21898 +
21899 +     filename _file_  "&fileRef";
21900 +
21901 +     data _null_;
21902 +        FILE _file_ MOD;
21903 +        put ' ';
21904 +        put "/*-------------------------------------------------*/";
21905 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
21906 +        put "/*-------------------------------------------------*/";
21907 +        put ' ';
21908 +        %let dsid = %sysfunc(open(work._tmpindata));
21909 +
21910 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
21911 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
21912 +        %let k = 1;
21913 +        %do %while(^%sysfunc(fetch(&dsid)));
21914 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21915 +               %if &k > 2 %then %do;
21916 +                %let cn = %eval(&k-2);
21917 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
21918 +                %end;
21919 +                %let k = %eval(&k+1);
21920 +
21921 +        %end;
21922 +        %let rc = %sysfunc(rewind(&dsid));
21923 +
21924 +        %do j= 2 %to &nvar;
21925 +            %let _varname = %sysfunc(varname(&dsid, &j));
21926 +            %do %while(^%sysfunc(fetch(&dsid)));
21927 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
21928 +                %if &_name = MEAN %then
21929 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
21930 +                %else %if &_name = STD %then
21931 +                %let _std = %sysfunc(getvarn(&dsid, &j));
21932 +                %else %do;
21933 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
21934 +                      %let abscoeff = %sysfunc(abs(&coeff));
21935 +                          %if &abscoeff >  0 %then %do;
21936 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
21937 +                           %end;
21938 +                 %end;
21939 +             %end;
21940 +             %let rc = %sysfunc(rewind(&dsid));
21941 +         %end;
21942 +
21943 +        %let dsid= %sysfunc(close(&dsid));
21944 +
21945 +     run;
21946 +
21947 +     filename _file_;
21948 +     proc datasets lib = work nolist;
21949 +           delete _tmpindata;
21950 +     run;
21951 +     quit;
21952 +%mend CreateScoreCode2;
21953 +
21954 +
21955 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
21956 +
21957 +     /*--- Build Code to Modify Metadata ---*/
21958 +     filename X "&deltacodefile";
21959 +     data _null_;
21960 +        FILE X;
21961 +        set &groupds end=eof;
21962 +        if _N_=1 then do;
21963 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
21964 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
21965 +           %end;
21966 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
21967 +           put "if upcase(strip(NAME)) in (";
21968 +        end;
21969 +        if Strip(upcase(Selected)) eq 'YES' then do;
21970 +           string = '"'!!trim(left(VARIABLE))!!'"';
21971 +           put string;
21972 +        end;
21973 +        if eof then do;
21974 +           put ') then ROLE="INPUT";';
21975 +           put 'else ROLE="REJECTED";';
21976 +           put 'end;';
21977 +
21978 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
21979 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
21980 +           %end;
21981 +        end;
21982 +     run;
21983 +     quit;
21984 +
21985 +     filename X;
21986 +     quit;
21987 +%mend MakeDeltaCode2;
21988 +
21989 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
21990 +  %global &ngc;
21991 +  data _null_;
21992 +  %if &indata ne %then %do;
21993 +      %let dsid = %sysfunc(open(&indata));
21994 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
21995 +      %let dsid = %sysfunc(close(&dsid));
21996 +  %end;
21997 +  %else %do;
21998 +       %let nvar = %eval(&ninput+&ndummy); ;
21999 +  %end;
22000 +  %let numgc = %eval(&nvar/&div+2);
22001 +  %let &ngc = &numgc;
22002 +   run;
22003 +  quit;
22004 +%mend getInitialGClusterNumber;
22005 +
22006 +
22007 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
22008 +data &outlink(drop = Selected);
22009 +     set &indata;
22010 +     LINKID = _N_;
22011 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
22012 +run;
22013 +data &outnode(keep=NODEID TYPE LABEL);
22014 +    set &indata;
22015 +    length TYPE $16;
22016 +    rename VARIABLE = NODEID;
22017 +    *label  CLUSNAME="Node ID";
22018 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22019 +    TYPE = "VARIABLE";
22020 +    *label TYPE = "Node Type";
22021 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22022 +    run;
22023 +data _tmp(keep=NODEID TYPE LABEL);
22024 +    set &indata;
22025 +    length TYPE $16;
22026 +    rename CLUSNAME = NODEID;
22027 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22028 +    TYPE = "GCLUSTER";
22029 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22030 +    run;
22031 +proc sort data=_tmp;
22032 +    by NODEID;
22033 +run;
22034 +data _tmp;
22035 +    set _tmp; by NODEID;
22036 +    if first.NODEID then output;
22037 +run;
22038 +proc sort data=&outnode;
22039 +    by NODEID;
22040 +run;
22041 +data  &outnode;
22042 +    set _tmp &outnode;
22043 +run;
22044 +proc datasets lib = work nolist;
22045 +     delete _tmp;
22046 +run;
22047 +quit;
22048 +%mend MakeGobalConstellData;
22049 +
22050 +/* Make contellation plot data among GCLUSTERS */
22051 +
22052 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
22053 +
22054 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
22055 +     set &indata;
22056 +     LINKID = _N_;
22057 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
22058 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
22059 +     end;
22060 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
22061 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
22062 +     end;
22063 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
22064 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
22065 +    end;
22066 +run;
22067 +
22068 +data _tmp_outrsquare;
22069 +        set &inoutrsq;
22070 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22071 +run;
22072 +
22073 +proc freq data =_tmp_outrsquare noprint;
22074 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
22075 +run;
22076 +
22077 +data &outnode(keep=_NAME_ TYPE LABEL);
22078 +    set &outlink;
22079 +    length TYPE $16;
22080 +    length LABEL $100;
22081 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
22082 +
22083 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22084 +    TYPE = "GCLUSTER";
22085 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22086 +    end;
22087 +    else do;
22088 +    TYPE= "ROOT";
22089 +    LABEL= _NAME_;
22090 +    end;
22091 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
22092 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
22093 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
22094 +    run;
22095 +
22096 +proc sort data=&outnode;
22097 +     by _NAME_;
22098 +proc sort data=_tmp_GCLUSFREQ;
22099 +     by _NAME_;
22100 +run;
22101 +
22102 +data  &outnode;
22103 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
22104 +     if COUNT=. then COUNT=1;
22105 +run;
22106 +
22107 +proc datasets lib = work nolist;
22108 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
22109 +run;
22110 +
22111 +quit;
22112 +%Mend MakeGClusterConstData;
22113 +
22114 +
22115 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
22116 +
22117 +    data _gscoretmpds;
22118 +          set &indata;
22119 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
22120 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
22121 +          if _TYPE_ = 'STD' then _NAME_='STD';
22122 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
22123 +          DROP _TYPE_ _NCL_;
22124 +     run;
22125 +
22126 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
22127 +        GCluster Component &globalclusid ------ */
22128 +
22129 +    filename _file_  "&fileref";
22130 +
22131 +    data _null_;
22132 +        %if &globalclusid eq 1 %then %do;
22133 +          FILE _file_;
22134 +        %end;
22135 +        %else %do;
22136 +          FILE _file_ MOD;
22137 +        %end;
22138 +
22139 +        %let dsid = %sysfunc(open(work._gscoretmpds));
22140 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
22141 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
22142 +
22143 +        %let k = 1;
22144 +        %do %while(^%sysfunc(fetch(&dsid)));
22145 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22146 +                %if &k > 2 %then %do;
22147 +                put "&_name = 0 ; ";
22148 +                %end;
22149 +                %let k = %eval(&k+1);
22150 +        %end;
22151 +
22152 +        %let rc = %sysfunc(rewind(&dsid));
22153 +        %do i= 2 %to &nvar;
22154 +            %let _varname =  %sysfunc(varname(&dsid, &i));
22155 +            %do %while(^%sysfunc(fetch(&dsid)));
22156 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
22157 +                %if &_name = MEAN %then
22158 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
22159 +                %else %if &_name = STD %then
22160 +                %let _std = %sysfunc(getvarn(&dsid, &i));
22161 +                %else %do;
22162 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
22163 +                      %let abscoeff = %sysfunc(abs(&coeff));
22164 +                          %if &abscoeff >  0 %then %do;
22165 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
22166 +                           %end;
22167 +                 %end;
22168 +             %end;
22169 +             %let rc = %sysfunc(rewind(&dsid));
22170 +
22171 +         %end;
22172 +
22173 +        %let dsid= %sysfunc(close(&dsid));
22174 +       run;
22175 +
22176 +
22177 +       proc datasets lib=work nolist;
22178 +            delete _gscoretmpds;
22179 +       run;
22180 +      quit;
22181 +
22182 +%mend CreateGClusterScoreCode;
22183 +
22184 +
22185 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
22186 +
22187 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
22188 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
22189 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
22190 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
22191 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
22192 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
22193 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
22194 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
22195 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
22196 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
22197 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
22198 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
22199 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
22200 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
22201 +
22202 +   filename gsfile "&gscorecode";
22203 +
22204 +   data &EM_USER_GSCORE;
22205 +             set &indata;
22206 +             %include  gsfile;
22207 +        keep
22208 +        %do i=1 %to &ngcluster;
22209 +         %let gcvarname = GC&i;
22210 +         &gcvarname
22211 +        %end;
22212 +     ;
22213 +   run;
22214 +
22215 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
22216 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
22217 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
22218 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
22219 +    noprint  ;
22220 +     var
22221 +       %do i=1 %to &ngcluster;
22222 +         %let gcvarname = GC&i;
22223 +         &gcvarname
22224 +        %end;
22225 +   ;
22226 +   run;
22227 +
22228 +
22229 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
22230 +   data &EM_USER_GSCORECORRPLOT ;
22231 +        set &EM_USER_GSCORECORRPLOT;
22232 +        rename _X_ = X;
22233 +        rename _Y_ = Y;
22234 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22235 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
22236 +   run;
22237 +
22238 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
22239 +
22240 +   data &EM_USER_GSCORETREE;
22241 +        length _NAME_ $32;
22242 +        length _LABEL_ $100;
22243 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
22244 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
22245 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
22246 +        end;else do;
22247 +         _LABEL_ = _NAME_;
22248 +        end;
22249 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
22250 +
22251 +   run;
22252 +
22253 +   quit;
22254 +
22255 +%mend MakeGClusterCorrelation;
22256 +
22257 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
22258 +%macro report;
22259 +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
22260 +
22261 +    data _null_;
22262 +         set &EM_USER_VARCLUSMETA;
22263 +         if _N_=1 then
22264 +         call symput('_trainnum', TrainNum);
22265 +    run;
22266 +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
22267 +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
22268 +           %include temp;
22269 +           filename temp;
22270 +           %report1;
22271 +       %end;
22272 +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
22273 +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
22274 +           %include temp;
22275 +           filename temp;
22276 +           %report2;
22277 +    %end;
22278 +
22279 +   /* End of all runs, change the flag of newtrain to N */
22280 +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
22281 +    data &EM_USER_VARCLUSMETA;
22282 +         set &EM_USER_VARCLUSMETA;
22283 +         NewTrain = "N";
22284 +    run;
22285 +    quit;
22286 +%mend report;
22287 +
22288 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      57693:166
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
22289 +%macro report1;
22291 +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
22292 +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
22293 +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
22295 +   data &EM_USER_OUTVARSEL;
22296 +        set &EM_USER_OUTRSQUARE;
22297 +        if upcase(strip(SELECTED)) = 'YES' then output;
22298 +   run;
22300 +   data _tmp_outrsquare;
22301 +        set &EM_USER_OUTRSQUARE;
22302 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
22303 +   run;
22305 +   proc freq data =_tmp_outrsquare noprint;
22306 +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
22307 +   run;
22309 +   proc datasets lib = work nolist;
22310 +     delete _tmp_outrsquare;
22311 +   run;
22313 +   data &EM_USER_CLUSFREQ;
22314 +       set &EM_USER_CLUSFREQ;
22315 +       label
22316 +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
22317 +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
22318 +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
22319 +       ;
22320 +   run;
22322 +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
22323 +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
22324 +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
22326 +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
22327 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
22328 +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
22329 +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
22330 +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
22331 +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
22332 +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
22333 +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
22335 +   /*
22336 +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
22337 +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
22338 +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
22341 +%mend report1;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTVARSEL has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 15 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 7 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS1.VARCLUS_CLUSFREQ has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22344  *------------------------------------------------------------*;
22345  * End REPORT: VarClus;
22346  *------------------------------------------------------------*;
22347
 
22348  /* Reset EM Options */
22349  options formchar="|----|+|---+=|-/\<>*";
22350  options nocenter ls=256 ps=10000;
22351  goptions reset=all device=GIF NODISPLAY;
 
22352  proc sort data=WORK.EM_USER_REPORT;
22353  by ID VIEW;
22354  run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
