*------------------------------------------------------------*
* Score Log
Date:                October 23, 2020
Time:                19:46:53
*------------------------------------------------------------*
17760  %let EMEXCEPTIONSTRING=;
17761  *------------------------------------------------------------*;
17762  * SCORE: VarClus;
17763  *------------------------------------------------------------*;
17764  %let EM_ACTION = SCORE;
17765  %let syscc = 0;
17766  
17767  %macro main;
17768  
17769     filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
17770     %include temp;
17771     filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
17772     %include temp;
17773     filename temp;
17774  
17775    %SetProperties;
17776  
17777     %if %upcase(&EM_ACTION) = CREATE %then %do;
17778         filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
17779         %include temp;
17780         filename temp;
17781         %create;
17782     %end;
17783     %else
17784     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17785          filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
17786             %include temp;
17787             filename temp;
17788             %train;
17789     %end;
17790     %else
17791     %if %upcase(&EM_ACTION) = SCORE %then %do;
17792             filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
17793             %include temp;
17794             filename temp;
17795             %score;
17796     %end;
17797     %else
17798     %if %upcase(&EM_ACTION) = REPORT %then %do;
17799             filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
17800             %include temp;
17801             filename temp;
17802             %report;
17803     %end;
17804     /*
17805     %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
17806         %put 'OPENING TABLE';
17807     %end;
17808     %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
17809         %put 'CLOSE TABLE';
17810     %end;
17811     */
17812  %mend main;
17813  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
17814 +
17815 +/* Initialize property macro variables */
17816 +%macro SetProperties;
17817 +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
17818 +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
17819 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
17820 +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
17821 +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
17822 +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
17823 +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
17824 +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
17825 +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
17826 +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
17827 +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
17828 +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
17829 +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
17830 +
17831 +%mend SetProperties;
17832 +
17833 +%Macro MakeDummyVariables(indata=,
17834 +                          outvar=,
17835 +                          outdata=,
17836 +                          fileref=,
17837 +                          recreatecmeta=N, /* optional */
17838 +                          incmeta=,     /* optional */
17839 +                          outcmeta=,    /* optional */
17840 +                          ndummyvars=_ndummyvars
17841 +                          );
17842 +    %global &ndummyvars;
17843 +
17844 +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
17845 +       class
17846 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17847 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17848 +    ;
17849 +    run;
17850 +    %let &ndummyvars = 0;
17851 +    data _null_;
17852 +    %let dsid = %sysfunc(open(work._classout));
17853 +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
17854 +    %let dsid = %sysfunc(close(&dsid));
17855 +    run;
17856 +
17857 +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
17858 +       input
17859 +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
17860 +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
17861 +        / level=nominal stdize=no;
17862 +       make outvar = &outvar;
17863 +       score data = &indata out =&outdata;
17864 +       code  file=  "&fileref";
17865 +    run;
17866 +    %if &recreatecmeta eq Y %then %do;
17867 +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
17868 +    data _tmpds;
17869 +        set _tmpds;
17870 +           ROLE = 'INPUT';
17871 +           LEVEL = 'INTERVAL';
17872 +           CREATOR='DMZIP';
17873 +           if NAME = '_TYPE_' then delete;
17874 +    run;
17875 +    data &outcmeta;
17876 +         set &incmeta _tmpds;
17877 +    run;
17878 +    %end;
17879 +    proc datasets lib=work nolist;
17880 +      delete  _dmdbdat _dmdbcat _classout
17881 +    %if &recreatecmeta eq Y %then %do;
17882 +    _tmpds
17883 +    %end;
17884 +    ;
17885 +    quit;
17886 +%Mend MakeDummyVariables;
17887 +
17888 +/*--- Determine Optimal Number of Cluster ----
17889 +%macro FindClusNum(statds=, groupds=, minvariation=);
17890 +   %global optnclus;
17891 +   data varclus_tmp(drop=_NAME_);
17892 +      set &statDs;
17893 +      where _type_ ='PROPOR';
17894 +   run;
17895 +   proc sort data=varclus_tmp;
17896 +      by _NCL_;
17897 +   run;
17898 +   proc transpose data=varclus_tmp out=varclus_tmp;
17899 +      by _NCL_;
17900 +      var %EM_INTERVAL_INPUT
17901 +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17902 +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
17903 +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
17904 +          %do i = 2 %to &nvar;
17905 +          %let varname = %sysfunc(varname(&dsid, &i));
17906 +          &varname
17907 +          %end;
17908 +      %end;
17909 +   ;
17910 +   run;
17911 +
17912 +   %if &minVariation eq %then %do;
17913 +       %let minVariation = &EM_PROPERTY_MINVARIATION;
17914 +   %end;
17915 +   %if ^(0<&minVariation<100) %then %do;
17916 +       %let minVariation = 90;
17917 +   %end;
17918 +
17919 +   data _null_;
17920 +      set varclus_tmp end=eof;
17921 +      by _NCL_;
17922 +      retain flag 0;
17923 +      if first._ncl_ then flag=0;
17924 +      if .<col1 < &minVariation then flag=1;
17925 +      if last._ncl_ and ^flag then do;
17926 +         call symput('OPTNCL', _ncl_);
17927 +         stop;
17928 +      end;
17929 +     if eof then call symput('OPTNCL', _ncl_);
17930 +   run;
17931 +
17932 +   %let optnclus = &OPTNCL;
17933 +
17934 +   data varclus_tmp(drop=_NCL_ _NAME_);
17935 +      set &statDs;
17936 +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
17937 +   run;
17938 +   proc sort data=varclus_tmp;
17939 +      by _TYPE_;
17940 +   run;
17941 +   proc transpose data=varclus_tmp out=varclus_tmp;
17942 +      by _TYPE_;
17943 +   run;
17944 +   proc sort data=varclus_tmp;
17945 +      by _name_ _type_;
17946 +   run;
17947 +
17948 +  proc transpose data=varclus_tmp out=&groupds;
17949 +      by _NAME_;
17950 +   run;
17951 +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
17952 +      by Cluster descending Rsquare;
17953 +      where Cluster ne 0;
17954 +   run;
17955 +   proc datasets lib=work nolist mt=(DATA VIEW);
17956 +      delete varclus_tmp;
17957 +   run;
17958 +   quit;
17959 +%mend findClusNum;
17960 +*/
17961 +
17962 +%macro getNclusfromTrain(inoutstat=, nc=);
17963 +%global &nc;
17964 +data _null_;
17965 +    set &inoutstat end=eof;
17966 +    if eof then do;
17967 +    call symput("&nc", _ncl_);
17968 +    end;
17969 +run;
17970 +%mend  getNclusfromTrain;
17971 +
17972 +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
17973 +
17974 +     *--- Build Code to Modify Metadata ---*;
17975 +     filename X "&deltacodefile";
17976 +     data _null_;
17977 +        FILE X;
17978 +        set &groupds end=eof;
17979 +        /*by Cluster;*/
17980 +         if _N_=1 then do;
17981 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
17982 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
17983 +           %end;
17984 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
17985 +           put "if upcase(strip(NAME)) in (";
17986 +        end;
17987 +        if Strip(upcase(Selected)) eq 'YES' then do;
17988 +           string = '"'!!trim(left(VARIABLE))!!'"';
17989 +           put string;
17990 +        end;
17991 +        if eof then do;
17992 +           put ') then ROLE="INPUT";';
17993 +           put 'else ROLE="REJECTED";';
17994 +           put 'end;';
17995 +
17996 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
17997 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
17998 +           %end;
17999 +        end;
18000 +     run;
18001 +     quit;
18002 +
18003 +     filename X;
18004 +
18005 +     quit;
18006 +%mend MakeDeltaCode;
18007 +
18008 +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
18009 +    %if ^%sysfunc(exist(&statds)) %then %do;
18010 +         %goto doendc;
18011 +    %end;
18012 +
18013 +    data &corrds(drop=_TYPE_ _NCL_) ;
18014 +       set &statds;
18015 +       where _type_ eq 'CORR' ;
18016 +    run ;
18017 +    proc sort data=&corrds;
18018 +       by _NAME_ ;
18019 +    run ;
18020 +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
18021 +      BY _NAME_ ;
18022 +    run ;
18023 +    data &corrplotds;
18024 +       length _Y_ $100;
18025 +       set &corrplotDs;
18026 +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
18027 +    run ;
18028 +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
18029 +       set &corrplotds;
18030 +       where _LABEL_ ne '' ;
18031 +       keep _TMP_ _LABEL_ ;
18032 +    run ;
18033 +    data _null_;
18034 +       nobs=0;
18035 +       dsid = open('varclus_match');
18036 +       if dsid then do;
18037 +          nobs = attrn(dsid, 'NOBS');
18038 +          dsid = close(dsid);
18039 +       end;
18040 +       call symput ('CORR_NOBS', nobs);
18041 +    run;
18042 +    %if &corr_nobs %then %do;
18043 +        proc sort data=varclus_match;
18044 +           by _name_;
18045 +        run ;
18046 +        proc sort data=&corrplotds;
18047 +           by _name_;
18048 +        run ;
18049 +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
18050 +           merge varclus_match &corrplotds;
18051 +           by _NAME_ ;
18052 +           if _X_ eq '' then _X_=_NAME_ ;
18053 +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18054 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
18055 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18056 +
18057 +       run ;
18058 +    %end;
18059 +    %else %do;
18060 +        proc sort data=&corrplotds;
18061 +           by _name_;
18062 +        run ;
18063 +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
18064 +           set &corrplotds;
18065 +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18066 +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18067 +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18068 +
18069 +        run ;
18070 +    %end;
18071 +    proc sort data=&corrplotds;
18072 +       by _X_ _Y_;
18073 +    run ;
18074 +    proc datasets lib=work nolist mt=(DATA VIEW);
18075 +       delete varclus_match;
18076 +    run;
18077 +    quit;
18078 +
18079 +%doendc:
18080 +
18081 +%mend MakeVarClusCorrData;
18082 +
18083 +%macro MakeStatPlotData(statds= , outstatplotds=);
18084 +   %if %sysfunc(exist(&statds)) %then %do;
18085 +
18086 +       data varclus_tmp(drop=_NAME_ _NCL_) ;
18087 +          set &statDs;
18088 +          where _type_ in('MEAN', 'STD', 'N');
18089 +       run ;
18090 +       proc transpose data=varclus_tmp out=&outstatplotds;
18091 +          id _TYPE_ ;
18092 +       run ;
18093 +       data &outstatplotds;
18094 +          set &outstatplotds(obs=1000);
18095 +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
18096 +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18097 +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
18098 +          else SCALEDSTD= STD ;
18099 +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
18100 +       run ;
18101 +       proc sort data=&outstatplotds;
18102 +          by descending SCALEDSTD ;
18103 +       run ;
18104 +       proc datasets lib=work nolist mt=(DATA VIEW);
18105 +          delete varclus_tmp;
18106 +       run;
18107 +       quit;
18108 +    %end;
18109 +
18110 +%mend MakeStatPlotData;
18111 +
18112 +
18113 +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
18114 +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
18115 +    data &EM_USER_OUTSTATSCORE;
18116 +          set &indata;
18117 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
18118 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
18119 +          if _TYPE_ = 'STD' then _NAME_='STD';
18120 +          DROP _TYPE_ _NCL_;
18121 +     run;
18122 +
18123 +     filename _file_  "&fileRef";
18124 +
18125 +     data _null_;
18126 +        FILE _file_ MOD;
18127 +        put ' ';
18128 +        put '/*-------------------------------------------------*/';
18129 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
18130 +        put '/*-------------------------------------------------*/';
18131 +        put ' ';
18132 +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
18133 +
18134 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
18135 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
18136 +
18137 +        %let k = 1;
18138 +        %do %while(^%sysfunc(fetch(&dsid)));
18139 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18140 +                %if &k > 2 %then %do;
18141 +                 %let cn = %eval(&k-2);
18142 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
18143 +                %end;
18144 +                %let k = %eval(&k+1);
18145 +        %end;
18146 +
18147 +        %let rc = %sysfunc(rewind(&dsid));
18148 +
18149 +        %do i= 2 %to &nvar;
18150 +            %let _varname =  %sysfunc(varname(&dsid, &i));
18151 +            %do %while(^%sysfunc(fetch(&dsid)));
18152 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
18153 +                %if &_name = MEAN %then
18154 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
18155 +                %else %if &_name = STD %then
18156 +                %let _std = %sysfunc(getvarn(&dsid, &i));
18157 +                %else %do;
18158 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
18159 +                      %let abscoeff = %sysfunc(abs(&coeff));
18160 +                          %if &abscoeff >  0 %then %do;
18161 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
18162 +                           %end;
18163 +                 %end;
18164 +             %end;
18165 +             %let rc = %sysfunc(rewind(&dsid));
18166 +         %end;
18167 +
18168 +        %let dsid= %sysfunc(close(&dsid));
18169 +       run;
18170 +%mend CreateScoreCode;
18171 +
18172 +
18173 +
18174 +/*----------------------------------------------------------
18175 +    Instead of using %MakeRSquareData,
18176 +    %MakeVarClusResultTable at macro2.source is used
18177 + +----------------------------------------------------------*/
18178 +
18179 +
18180 +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
18181 +
18182 +/* modifying  from ods rsquare = data */
18183 +
18184 +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
18185 +    Length Cluster $16;
18186 +    length Variable $32;
18187 +    Length VariableLabel $64;
18188 +    set &indata; retain CurrentCluster;
18189 +    if NumberOfClusters ^= &ncluster then delete;
18190 +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
18191 +    CurrentCluster = Cluster;
18192 +   run;
18193 +proc sort data =&outdata ;
18194 +     by Cluster RsquareRatio;
18195 +run;
18196 +data _tmprsq(drop=index);
18197 +     set &outdata; by Cluster;
18198 +     if first.Cluster then do;
18199 +     index = strip(scan(Cluster,2 ));
18200 +     Variable = "Clus"||index;
18201 +     VariableLabel = "Cluster Component "||index;
18202 +     OwnCluster = 1;
18203 +     NextClosest = .;
18204 +     RsquareRatio = 0;
18205 +     output;
18206 +     end;
18207 +run;
18208 +
18209 +proc sort data = _tmprsq ;
18210 +     by Cluster RsquareRatio;
18211 +run;
18212 +data &outdata;
18213 +     set &outdata _tmprsq;
18214 +by Cluster;
18215 +run;
18216 +
18217 +
18218 +/* Just create the Selected variable with all YES */
18219 +
18220 +data &outdata;
18221 +    set &outdata; by cluster;
18222 +    length Selected $8;
18223 +    Selected = 'YES';
18224 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18225 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18226 +    rename OwnCluster = RSqWithClusterComp;
18227 +    rename NextClosest = RSqWithNextClusComp;
18228 +run;
18229 +
18230 +
18231 +/* Selected = Y/N will be done %score section -----
18232 +
18233 +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
18234 +data &outdata;
18235 +    set &outdata; by cluster;
18236 +    length Selected $8;
18237 +    if first.Cluster then Selected = 'YES';
18238 +    else Selected = 'NO';
18239 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18240 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18241 +    rename OwnCluster = RSqWithClusterComp;
18242 +    rename NextClosest = RSqWithNextClusComp;
18243 +run;
18244 +%end;
18245 +%else %do;
18246 +data &outdata;
18247 +    set &outdata; by cluster;
18248 +    if last.Cluster then Selected = 'YES';
18249 +    else Selected = 'NO';
18250 +    label  OwnCluster = 'R-Sqaure with Cluster Component';
18251 +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
18252 +    rename OwnCluster = RSqWithClusterComp;
18253 +    rename NextClosest = RSqWithNextClusComp;
18254 +run;
18255 +%end;
18256 +---------------------------------------------------------------*/
18257 +
18258 +%if %sysfunc(exist(&inClusRSquare)) %then %do;
18259 +/* to calculate NextClosestClusRsq */
18260 +proc transpose data = &inClusRSquare  out=_clusRsq;
18261 +      by cluster;
18262 +      run;
18263 +data _clusRsq;
18264 +     set _clusRsq;
18265 +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
18266 +run;
18267 +
18268 +proc sort data=_clusRsq;
18269 +    by cluster col1;
18270 +    run;
18271 +data _clusRsq(drop=_NAME_ _LABEL_);
18272 +     set _clusRsq; by cluster;
18273 +     if last.Cluster then output;
18274 +     label  COL1 = 'R-Sqaure with Next Cluster Component';
18275 +     rename COL1 = RSqWithNextClusComp;
18276 +     rename Cluster = Variable;
18277 +     label  Cluster = "Variable";
18278 +run;
18279 +
18280 +proc sort data =&outdata;
18281 +     by Variable;
18282 +run;
18283 +data &outdata;
18284 +    merge &outdata _clusRsq;
18285 +    by Variable;
18286 +run;
18287 +proc sort data =&outdata;
18288 +by Cluster  RsquareRatio;
18289 +run;
18290 +quit;
18291 +%end;
18292 +
18293 +proc datasets lib = work nolist;
18294 +     delete _tmprsq _clusRsq;
18295 +     run;
18296 +quit;
18297 +
18298 +%mend MakeRSquareData;
18299 +
18300 +
18301 +/*-------------------------------------------------------------------------*/
18302 +
18303 +
18304 +
18305 +%macro ModifyCorr(indata=,
18306 +                  outdata=,
18307 +                  rsquare = Y
18308 +                  );
18309 +    data corr_tmp;
18310 +        set &indata;
18311 +    run;
18312 +     proc sql;
18313 +           update &indata
18314 +           set
18315 +     %let dsid = %sysfunc(open(work.corr_tmp));
18316 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
18317 +          %do i = 4 %to &nvar;
18318 +          %let _name = %sysfunc(varname(&dsid, &i));
18319 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
18320 +            %else  %let _name_md = &_name;
18321 +            %if &i < &nvar %then %do;
18322 +               &_name = 1- &_name_md ,
18323 +            %end;
18324 +            %else %do;
18325 +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
18326 +            %end;
18327 +          %end;
18328 +      %let dsid= %sysfunc(close(&dsid));
18329 +
18330 +      select * from &indata;
18331 +      run;
18332 +      proc datasets lib = work nolist;
18333 +           delete corr_tmp;
18334 +      run;
18335 +      quit;
18336 +
18337 + %mend ModifyCorr;
18338 +
18339 + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
18340 +    data &outdata(drop= _NCL_  _TYPE_);
18341 +       set &indata;
18342 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18343 +       rename _NAME_ = Cluster;
18344 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18345 +    run;
18346 +    %if &RSquare eq Y %then %do;
18347 +     data corr_tmp;
18348 +        set &outdata;
18349 +     run;
18350 +
18351 +     data &outdata(drop=i);
18352 +          set &outdata;
18353 +          %let dsid = %sysfunc(open(work.corr_tmp));
18354 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18355 +          %do i = 2 %to &nvar;
18356 +            %let _name = %sysfunc(varname(&dsid, &i));
18357 +            %let _name_md = &_name.**2;
18358 +                &_name = &_name_md;
18359 +          %end;
18360 +      %let dsid= %sysfunc(close(&dsid));
18361 +      run;
18362 +      proc datasets lib = work nolist;
18363 +           delete corr_tmp;
18364 +      run;
18365 +
18366 +    %end;
18367 +     quit;
18368 +%mend MakeClusStructCorrData;
18369 +
18370 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
18371 +    data &outdata(drop= _NCL_  _TYPE_);
18372 +       set &indata;
18373 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18374 +       rename _NAME_ = Cluster;
18375 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18376 +    run;
18377 +    data corr_tmp;
18378 +        set &outdata;
18379 +    run;
18380 +
18381 +    %let dsid = %sysfunc(open(work.corr_tmp));
18382 +    %let nclus2= %eval(&ncluster+1);
18383 +    data &outdata;
18384 +         set &outdata;
18385 +          %do i = 2 %to &nclus2;
18386 +          %let i_1 = %eval(&i-1);
18387 +            %let _name = %sysfunc(varname(&dsid, &i));
18388 +            %let _newName = Clus&i_1;
18389 +                rename &_name = &_newName; ;
18390 +                *label &_name ="Cluster &i_1";
18391 +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18392 +          %end;
18393 +          keep Cluster
18394 +          %do i = 2 %to &nclus2;
18395 +                %let _name = %sysfunc(varname(&dsid, &i));
18396 +                &_name
18397 +          %end;
18398 +          ;
18399 +    %let dsid= %sysfunc(close(&dsid));
18400 +     run;
18401 +     quit;
18402 +
18403 +    %if &RSquare eq Y %then %do;
18404 +
18405 +       data corr_tmp;
18406 +        set &outdata;
18407 +     run;
18408 +
18409 +     data &outdata(drop=i);
18410 +          set &outdata;
18411 +          %let dsid = %sysfunc(open(work.corr_tmp));
18412 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18413 +          %do i = 2 %to &nvar;
18414 +            %let _name = %sysfunc(varname(&dsid, &i));
18415 +            %let _name_md = &_name.**2;
18416 +                &_name = &_name_md;
18417 +          %end;
18418 +      %let dsid= %sysfunc(close(&dsid));
18419 +      run;
18420 +    %end;
18421 +
18422 +    %if &makeplotds eq Y %then %do;
18423 +     proc transpose data = &outdata
18424 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18425 +          by cluster;
18426 +     run;
18427 +     data &plotds;
18428 +          set  &plotds;
18429 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18430 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18431 +     run;
18432 +     %end;
18433 +     proc datasets lib = work nolist;
18434 +           delete corr_tmp;
18435 +     run;
18436 +     quit;
18437 +%mend MakeInterClusCorrData;
18438 +
18439 +
18440 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18441 +
18442 +data &outlink(drop = Selected);
18443 +     set &indata;
18444 +     LINKID = _N_;
18445 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18446 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18447 +run;
18448 +data &outnode(keep=NODEID TYPE LABEL);
18449 +    set &indata;
18450 +    length TYPE $16;
18451 +    rename Variable = NODEID;
18452 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18453 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18454 +    then  TYPE = "CLUSTER";
18455 +    else  TYPE="VARIABLE";
18456 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18457 +run;
18458 +quit;
18459 +%mend MakeClusConstellData;
18460 +
18461 +
18462 +
18463 +%macro MakeClusConstellData(indata=, outlink=, outnode=);
18464 +
18465 +data &outlink(drop = Selected);
18466 +     set &indata;
18467 +     LINKID = _N_;
18468 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
18469 +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
18470 +run;
18471 +data &outnode(keep=NODEID TYPE LABEL);
18472 +    set &indata;
18473 +    length TYPE $16;
18474 +    rename Variable = NODEID;
18475 +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
18476 +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
18477 +    then  TYPE = "CLUSTER";
18478 +    else  TYPE="VARIABLE";
18479 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
18480 +run;
18481 +quit;
18482 +%mend MakeClusConstellData;
18483 +
18484 +
18485 +/*--- This will work only when inds is not a view data -------
18486 +
18487 +%macro getNVarNObs(inds=, nvar=, nobs=);
18488 +
18489 +    %global &nvar;
18490 +    %global &nobs;
18491 +    data _null_;
18492 +         dsid = open("&inds");
18493 +         nv = attrn(dsid, 'NVAR');
18494 +         no = attrn(dsid, 'NOBS');
18495 +         dsid = close(dsid);
18496 +         call symput("&nvar", nv);
18497 +         call symput("&nobs", no);
18498 +    run;
18499 +    quit;
18500 +%mend  getNVarNObs;
18501 +
18502 ++---------------------------------------------------------------*/
18503 +
18504 +
18505 +%macro getNVar(inds=, nvar=);
18506 +    %global &nvar;
18507 +    data _null_;
18508 +         dsid = open("&inds");
18509 +         nv = attrn(dsid, 'NVAR');
18510 +         dsid = close(dsid);
18511 +         call symput("&nvar", nv);
18512 +    run;
18513 +    quit;
18514 +%mend  getNVar;
18515 +
18516 +
18517 +
18518 +%macro getNObs(inds=, nobs=);
18519 +    %global &nobs;
18520 +    data _null_;
18521 +        set &inds end=eof;
18522 +        if eof then call symput("&nobs", _N_);
18523 +    run;
18524 +    quit;
18525 +%mend  getNObs;
18526 +
18527 +%Macro CreateVarclusMeta(trainnum=);
18528 +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
18529 +    data &EM_USER_VARCLUSMETA;
18530 +         length TrainNum 8.;
18531 +         length NewTrain $8;
18532 +         length NGCluster 8.;
18533 +         length ExportedComp $16;
18534 +         length HideVariable $8;
18535 +         TrainNum = &trainnum;
18536 +         NewTrain = "Y";
18537 +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
18538 +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
18539 +         NGCluster = 0; /* zero means no twostage */
18540 +   run;
18541 +   quit;
18542 +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
18543 +
18544 +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
18545 +    data &outdata(drop= _NCL_  _TYPE_);
18546 +       set &indata;
18547 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
18548 +       %if &globalclusid ne %then %do;
18549 +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18550 +       rename _NAME_ = Cluster;
18551 +       %end;
18552 +       %else %do;
18553 +        _NAME_ = upcase(_NAME_);
18554 +       rename _NAME_ = Cluster;
18555 +       %end;
18556 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18557 +    run;
18558 +    data corr_tmp;
18559 +        set &outdata;
18560 +    run;
18561 +
18562 +    %let dsid = %sysfunc(open(work.corr_tmp));
18563 +    %let nclus2= %eval(&ncluster+1);
18564 +    data &outdata;
18565 +         set &outdata;
18566 +          %do i = 2 %to &nclus2;
18567 +          %let i_1 = %eval(&i-1);
18568 +            %let _name = %sysfunc(varname(&dsid, &i));
18569 +            %if &globalclusid ne %then
18570 +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
18571 +                     rename &_name = &_newName;
18572 +                     *label &_name ="GC &globalclusid : Cluster &i_1";
18573 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
18574 +                %end;
18575 +            %else
18576 +                %do; %let _newName = CLUS&i_1;
18577 +                     rename &_name = &_newName;
18578 +                     *label &_name ="Cluster &i_1";
18579 +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
18580 +                %end;
18581 +          %end;
18582 +          keep Cluster
18583 +          %do i = 2 %to &nclus2;
18584 +                %let _name = %sysfunc(varname(&dsid, &i));
18585 +                &_name
18586 +          %end;
18587 +          ;
18588 +    %let dsid= %sysfunc(close(&dsid));
18589 +     run;
18590 +     quit;
18591 +
18592 +    %if &RSquare eq Y %then %do;
18593 +
18594 +       data corr_tmp;
18595 +        set &outdata;
18596 +     run;
18597 +
18598 +     data &outdata;
18599 +          set &outdata;
18600 +          %let dsid = %sysfunc(open(work.corr_tmp));
18601 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18602 +          %do i = 2 %to &nvar;
18603 +            %let _name = %sysfunc(varname(&dsid, &i));
18604 +            %let _name_md = &_name.**2;
18605 +                &_name = &_name_md;
18606 +          %end;
18607 +      %let dsid= %sysfunc(close(&dsid));
18608 +      run;
18609 +    %end;
18610 +
18611 +    %if &makeplotds eq Y %then %do;
18612 +     proc transpose data = &outdata
18613 +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18614 +          by cluster;
18615 +     run;
18616 +     data &plotds;
18617 +          set  &plotds;
18618 +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18619 +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
18620 +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
18621 +     run;
18622 +     %end;
18623 +     proc datasets lib = work nolist;
18624 +           delete corr_tmp;
18625 +     run;
18626 +     quit;
18627 +%mend MakeInterClusCorrData;
18628 +
18629 +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
18630 +    data _tmpds(drop= _NCL_);
18631 +       set &indata;
18632 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
18633 +       %if &globalclusid ne %then %do;
18634 +           _NAME_ = "GC&globalclusid.";
18635 +       rename _NAME_ = Cluster;
18636 +       %end;
18637 +       %else %do;
18638 +        _NAME_ = "CLUS";
18639 +        rename _NAME_ = Cluster;
18640 +       %end;
18641 +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
18642 +    run;
18643 +    proc transpose data =_tmpds out =&outdata;
18644 +    run;
18645 +
18646 +    data &outdata(drop=COL1);
18647 +        %if &globalclusid ne %then %do;
18648 +        length GCluster $16;
18649 +        %end;
18650 +        length Cluster $32;
18651 +        length _NAME_ $32;
18652 +         set &outdata;
18653 +         _NAME_ = upcase(_NAME_);
18654 +         rename _NAME_=Variable;
18655 +         *label _NAME_="Variable";
18656 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18657 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18658 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18659 +
18660 +         %if &globalclusid ne %then %do;
18661 +          GCluster = "GC&globalclusid";
18662 +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
18663 +         %end;
18664 +         %else %do;
18665 +         Cluster = "CLUS"||strip(COL1);
18666 +        %end;
18667 +         rename COL2 = RSqWithOwnClusComp;
18668 +         *label COL2 = "R-Square With Own Cluster Component";
18669 +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18670 +
18671 +   run;
18672 +   proc sort data =&outdata;
18673 +        by Cluster RSqWithOwnClusComp;
18674 +   run;
18675 +   proc datasets lib = work nolist;
18676 +           delete _tmpds;
18677 +   run;
18678 +   quit;
18679 +%mend MakeOwnRSquare;
18680 +
18681 +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
18682 +    data &outdata(drop= _NCL_  _TYPE_);
18683 +       %if &globalclusid ne %then %do;
18684 +        length GCluster $16;
18685 +        %end;
18686 +       set &indata;
18687 +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
18688 +       %if &globalclusid ne %then %do;
18689 +         GCluster = "GC&globalclusid";
18690 +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
18691 +         rename _NAME_ = Cluster;
18692 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18693 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18694 +
18695 +       %end;
18696 +       %else %do;
18697 +         _NAME_ = upcase(_NAME_);
18698 +         rename _NAME_ = Cluster;
18699 +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18700 +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18701 +
18702 +       %end;
18703 +     run;
18704 +    %if &RSquare eq Y %then %do;
18705 +     data corr_tmp;
18706 +          set &outdata;
18707 +     run;
18708 +     %let istart = 2;
18709 +     %if &globalclusid ne %then %let istart = 3;
18710 +     data &outdata;
18711 +          set &outdata;
18712 +          %let dsid = %sysfunc(open(work.corr_tmp));
18713 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18714 +          %do i =&istart %to &nvar;
18715 +            %let _name = %sysfunc(varname(&dsid, &i));
18716 +            %let _name_md = &_name.**2;
18717 +                &_name = &_name_md;
18718 +          %end;
18719 +      %let dsid= %sysfunc(close(&dsid));
18720 +      run;
18721 +      proc datasets lib = work nolist;
18722 +           delete corr_tmp;
18723 +      run;
18724 +    %end;
18725 +     quit;
18726 +%mend MakeClusStructCorrData;
18727 +
18728 +/*
18729 +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
18730 +*/
18731 +
18732 +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
18733 +
18734 +     /* The indata should be the outdata
18735 +        from %MakeClusStructCorrData(indata=, outdata=, ); */
18736 +
18737 +     proc sort data =&indata out=_tmpclusRsq;
18738 +     by cluster;
18739 +     run;
18740 +
18741 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18742 +      by cluster;
18743 +     run;
18744 +
18745 +     proc sort data=_tmpclusRsq;
18746 +        by _NAME_ COL1;
18747 +     run;
18748 +
18749 +     data _tmpclusRsq;
18750 +         length _NAME_ $32;
18751 +         set _tmpclusRsq; by _NAME_;
18752 +          _NAME_ = upcase(_NAME_);
18753 +          %if &ncluster ne 1 %then %do;
18754 +             if last._NAME_ then delete;
18755 +          %end;
18756 +          %else %do;
18757 +             COL1 = 0;
18758 +          %end;
18759 +     run;
18760 +     /* need to sort again */
18761 +     proc sort data=_tmpclusRsq;
18762 +        by _NAME_ COL1;
18763 +     run;
18764 +
18765 +     data &outdata;
18766 +         set _tmpclusRsq; by _NAME_;
18767 +         Cluster = upcase(Cluster);
18768 +         if last._NAME_ then output;
18769 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18770 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18771 +         rename COL1 = RSqWithNextClusComp;
18772 +         Cluster = upcase(Cluster);
18773 +         rename Cluster = ClosestCluster;
18774 +         *label  Cluster = "Next Closest Cluster";
18775 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18776 +         rename _NAME_ = Variable;
18777 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18778 +    run;
18779 +
18780 +
18781 +    %if &globalclusid ne %then %do;
18782 +    data &outdata;
18783 +       length GCluster $16;
18784 +       set &outdata;
18785 +       GCluster = "GC&globalclusid";
18786 +       run;
18787 +    %end;
18788 +    proc datasets lib = work nolist;
18789 +           delete _tmpclusRsq;
18790 +    run;
18791 +    quit;
18792 +%mend FindNextClosestClusByVar;
18793 +
18794 +
18795 +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
18796 +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
18797 +     proc sort data =&indata out=_tmpclusRsq;
18798 +     by cluster;
18799 +     run;
18800 +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
18801 +     by cluster;
18802 +     run;
18803 +     proc sort data=_tmpclusRsq;
18804 +        by _NAME_ col1;
18805 +     run;
18806 +     data _tmpclusRsq;
18807 +         length _NAME_ $32;
18808 +         set _tmpclusRsq; by _NAME_;
18809 +          _NAME_ = upcase(_NAME_);
18810 +          %if &ncluster ne 1 %then %do;
18811 +             if last._NAME_ then delete;
18812 +          %end;
18813 +          %else %do;
18814 +             COL1 = 0;
18815 +          %end;
18816 +     run;
18817 +     data &outdata;
18818 +         set _tmpclusRsq; by _NAME_;
18819 +         Cluster = upcase(Cluster);
18820 +         if last._NAME_ then output;
18821 +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
18822 +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
18823 +         rename COL1 = RSqWithNextClusComp;
18824 +         Cluster = upcase(Cluster);
18825 +         rename Cluster = ClosestCluster;
18826 +         *label  Cluster = "Next Closest Cluster";
18827 +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
18828 +         rename _NAME_ = Variable;
18829 +         *label  _NAME_ = "Variable";
18830 +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
18831 +
18832 +    run;
18833 +    %if &globalclusid ne %then %do;
18834 +    data &outdata;
18835 +       length GCluster $16;
18836 +       set &outdata;
18837 +       GCluster = "GC&globalclusid";
18838 +       run;
18839 +    %end;
18840 +
18841 +    proc datasets lib = work nolist;
18842 +           delete _tmpclusRsq;
18843 +    run;
18844 +
18845 +    quit;
18846 +%mend FindNextClosestClusByCluster;
18847 +
18848 +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
18849 +/*----
18850 +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
18851 +-----------*/
18852 +
18853 +proc sort data =&indata1;
18854 +    by Variable;
18855 +run;
18856 +proc sort data =&indata2;
18857 +    by Variable;
18858 +run;
18859 +data &outdata;
18860 +    merge &indata1 &indata2;
18861 +    by Variable;
18862 +    length Type $16;
18863 +    Type = 'Variable';
18864 +    *label Type ='Type';
18865 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18866 +run;
18867 +
18868 +
18869 +data &indata3;
18870 +    set  &indata3 ;
18871 +    length RSqWithOwnClusComp 8.;
18872 +    Cluster = Variable;
18873 +    RSqWithOwnClusComp = 1;
18874 +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
18875 +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
18876 +    length Type $16;
18877 +    Type = 'ClusterComp';
18878 +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
18879 +
18880 +;
18881 +run;
18882 +
18883 +proc sort data=&outdata;
18884 +    by Cluster;
18885 +run;
18886 +proc sort data =&indata3;
18887 +    by Cluster;
18888 +run;
18889 +
18890 +data &outdata;
18891 +     set &outdata &indata3;
18892 +     by Cluster;
18893 +run;
18894 +
18895 +
18896 +/* Create the Selected variable with all YES */
18897 +
18898 +data &outdata;
18899 +     set &outdata;
18900 +     length RsqRatio 8.;
18901 +     length Selected $8;
18902 +     *label RSqRatio = "1-R**2 Ratio";
18903 +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
18904 +     *label Selected = "Variable Selected";
18905 +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
18906 +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
18907 +     Selected ='YES';
18908 +     rename _LABEL_ = Label;
18909 +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
18910 +run;
18911 +
18912 +
18913 +/*----  Selected = Y/N will be assigened at the %score                   -------+
18914 +        Just create the Selected variable with all YES at the step above
18915 + +------------------------------------------------------------------------------+
18916 +
18917 +proc sort data=&outdata;
18918 +    by Cluster RsqRatio;
18919 +run;
18920 +
18921 +%if &selectedcomp eq CLUSTERCOMP %then %do;
18922 +data &outdata;
18923 +     set &outdata; by Cluster;
18924 +     length Selected $8;
18925 +     label Selected = "Variable Selected";
18926 +     if  first.Cluster then Selected ='Yes';
18927 +     else Selected = 'No';
18928 +    run;
18929 +%end;
18930 +%else %do;
18931 +data &outdata(drop = _var _varchange);
18932 +     set &outdata; retain _var 0; by Cluster;
18933 +     length Selected $8;
18934 +     label Selected = "Variable Selected";
18935 +     if first.Cluster then  _varchange = 0;
18936 +     else _varchange =1;
18937 +     if _var ne _varchange then  Selected  = 'Yes';
18938 +     else Selected = 'No';
18939 +     if last.cluster then  _var = 0;
18940 +     else _var = _varchange;
18941 +run;
18942 +%end;
18943 +
18944 +--------------------------------------------------------------*/
18945 +
18946 +quit;
18947 +%mend MakeVarClusResultTable;
18948 +
18949 +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
18950 +     proc sort data =&indata;
18951 +        by cluster;
18952 +     run;
18953 +     proc transpose data =&indata
18954 +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
18955 +          by cluster;
18956 +     run;
18957 +     data &outdata;
18958 +          set  &outdata;
18959 +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18960 +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
18961 +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
18962 +     run;
18963 +     %if &globalclusid ne %then %do;
18964 +     data &outdata;
18965 +          Length GCluster $16;
18966 +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
18967 +          set  &outdata;
18968 +          GCluster ="GC&globalclusid.";
18969 +          run;
18970 +     %end;
18971 +
18972 +%Mend MakePlotDataFromCorrTable;
18973 +
18974 +
18975 +%macro MakeCorrelation(indata=,
18976 +                       outstat=_tmpoutstat,
18977 +                       corrmatrix=N,
18978 +                       outcorr=_tmpoutcorr,
18979 +                       includeclassvar=N,
18980 +                       target=,
18981 +                       freq=,
18982 +                       weight=);
18983 +   %if &target eq  %then %do;
18984 +
18985 +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
18986 +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
18987 +       %if &includeclassvar eq Y %then %do;
18988 +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
18989 +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
18990 +          %do i = 2 %to &nvar;
18991 +          %let varname = %sysfunc(varname(&dsid, &i));
18992 +          &varname
18993 +          %end;
18994 +       %end;
18995 +       ;
18996 +      %if &freq ne  %then %do;
18997 +          freq &freq;
18998 +      %end;
18999 +      %if &weight ne  %then %do;
19000 +          weight &weight;
19001 +      %end;
19002 +
19003 +      run;
19004 +      %if &corrmatrix eq Y %then %do;
19005 +      data  &outcorr (drop = _NCL_ _TYPE_);
19006 +           set  &outstat ;
19007 +           if _TYPE_ ='CORR' then output;
19008 +      run;
19009 +      %end;
19010 +    %end;
19011 +    %else %do;
19012 +       proc corr data=&indata outp=&outstat noprint;
19013 +            var
19014 +       %let dsid = %sysfunc(open(&indata));
19015 +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
19016 +          %do i = 1 %to &nvar;
19017 +              %let _name = %sysfunc(varname(&dsid, &i));
19018 +              %if &_name ne &target %then;
19019 +              &_name
19020 +           %end;
19021 +        %let dsid= %sysfunc(close(&dsid));
19022 +        ;
19023 +        with &target;
19024 +        run;
19025 +    %end;
19026 +    quit;
19027 +%mend MakeCorrelation;
19028 +
19029 +
19030 +%macro MakeCorrelationDistance(indata=,
19031 +                               outdata=,
19032 +                               rsquare = N
19033 +                               );
19034 +    data corr_tmp;
19035 +        set &indata;
19036 +        if _N_ = 1 then do;
19037 +           output;
19038 +           stop;
19039 +         end;
19040 +    run;
19041 +    %if &outdata ne  %then %let  _outdata = &outdata;
19042 +    %else %let _outdata = &indata;
19043 +
19044 +    data &_outdata;
19045 +         set &indata;
19046 +
19047 +         %let dsid = %sysfunc(open(work.corr_tmp));
19048 +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
19049 +          %do i = 2 %to &nvar;
19050 +              %let _name = %sysfunc(varname(&dsid, &i));
19051 +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
19052 +              %else  %let _name_md = &_name;
19053 +              &_name = 1- &_name_md;
19054 +          %end;
19055 +      %let dsid= %sysfunc(close(&dsid));
19056 +      run;
19057 +      proc datasets lib = work nolist;
19058 +           delete corr_tmp;
19059 +      run;
19060 +      quit;
19061 +  %mend MakeCorrelationDistance;
19062 +
19063 +
19064 +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
19065 +                                   rsquare = N
19066 +                                   );
19067 +    data corr_tmp;
19068 +        set &indata;
19069 +    run;
19070 +    proc sql noprint;
19071 +           update &indata
19072 +           set
19073 +     %let dsid = %sysfunc(open(work.corr_tmp));
19074 +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
19075 +          %do i = 4 %to &nvar;
19076 +          %let _name = %sysfunc(varname(&dsid, &i));
19077 +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
19078 +            %else  %let _name_md = &_name;
19079 +            %if &i < &nvar %then %do;
19080 +               &_name = 1- &_name_md ,
19081 +            %end;
19082 +            %else %do;
19083 +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
19084 +            %end;
19085 +          %end;
19086 +      %let dsid= %sysfunc(close(&dsid));
19087 +
19088 +      select * from &indata;
19089 +      run;
19090 +     data &indata( drop = _NCL_);
19091 +           set &indata;
19092 +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
19093 +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
19094 +     run;
19095 +     data &indata(DROP = _NCL_);
19096 +           set &indata;
19097 +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
19098 +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
19099 +           rename _NAME_ = _VAR_;
19100 +     run;
19101 +     proc datasets lib = work nolist;
19102 +           delete corr_tmp;
19103 +     run;
19104 +     quit;
19105 + %mend UpdateOutStatCorrToDistance;
19106 +
19107 +
19108 +%macro HierClusWithCorr(indata= ,
19109 +                        ncluster=,
19110 +                        method = Ward,
19111 +                        outtree = _outtree,
19112 +                        idvar =_VAR_,
19113 +                        outdata=,
19114 +                        rescore = N,
19115 +                        newncluster=
19116 +                        );
19117 +      %global &newncluster;
19118 +      %if &rescore ne Y %then %do;
19119 +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
19120 +                   method=&method outtree=&outtree noprint;
19121 +           id &idvar;
19122 +      run;
19123 +      %end;
19124 +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
19125 +      run;
19126 +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
19127 +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
19128 +      run;
19129 +      data _outcontent;
19130 +          set _outcontent;
19131 +          if NAME in ('_TYPE_' , '_VAR_') then delete;
19132 +          index = 1;
19133 +          rename NAME = _NAME_;
19134 +      run;
19135 +      proc sort data=_outcontent;
19136 +          by _NAME_;
19137 +      run;
19138 +      proc sort data =&outdata;
19139 +           by _NAME_;
19140 +      run;
19141 +      data &outdata(drop=index);
19142 +          merge &outdata _outcontent;
19143 +          by _NAME_;
19144 +          if index = . then delete;
19145 +      run;
19146 +      /*-----------------------------------------------------------*/
19147 +      data &outdata;
19148 +           length CLUSNAME $16;
19149 +           set &outdata;
19150 +           if CLUSTER > &ncluster then delete;
19151 +           CLUSNAME='GC'||strip(CLUSTER);
19152 +           *label CLUSNAME = "Cluster Name";
19153 +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
19154 +           rename _NAME_ = VARIABLE ;
19155 +           *label _NAME_ = "Variable";
19156 +           *label CLUSTER = "Cluster";
19157 +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
19158 +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
19159 +      run;
19160 +      proc sort data=&outdata out=&outdata;
19161 +           by CLUSTER;
19162 +      run;
19163 +      proc means data =&outdata noprint;
19164 +           output out=_meanout;
19165 +      run;
19166 +      data _null_;
19167 +            set _meanout;
19168 +            if strip(_STAT_) eq 'MAX' then do;
19169 +            call symput("&newncluster", CLUSTER);
19170 +            stop;
19171 +            end;
19172 +      run;
19173 +
19174 +      proc datasets lib = work nolist;
19175 +           delete _outcontent _meanout;
19176 +      run;
19177 +      quit;
19178 +%mend  HierClusWithCorr;
19179 +
19180 +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
19181 +
19182 +     data _tmpindata;
19183 +          set &indata;
19184 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
19185 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19186 +          if _TYPE_ = 'STD' then _NAME_='STD';
19187 +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
19188 +          DROP _TYPE_ _NCL_;
19189 +     run;
19190 +
19191 +     filename _file_  "&fileRef";
19192 +
19193 +     data _null_;
19194 +        FILE _file_ MOD;
19195 +        put ' ';
19196 +        put "/*-------------------------------------------------*/";
19197 +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
19198 +        put "/*-------------------------------------------------*/";
19199 +        put ' ';
19200 +        %let dsid = %sysfunc(open(work._tmpindata));
19201 +
19202 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19203 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19204 +        %let k = 1;
19205 +        %do %while(^%sysfunc(fetch(&dsid)));
19206 +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19207 +               %if &k > 2 %then %do;
19208 +                %let cn = %eval(&k-2);
19209 +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
19210 +                %end;
19211 +                %let k = %eval(&k+1);
19212 +
19213 +        %end;
19214 +        %let rc = %sysfunc(rewind(&dsid));
19215 +
19216 +        %do j= 2 %to &nvar;
19217 +            %let _varname = %sysfunc(varname(&dsid, &j));
19218 +            %do %while(^%sysfunc(fetch(&dsid)));
19219 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19220 +                %if &_name = MEAN %then
19221 +                %let _mean = %sysfunc(getvarn(&dsid, &j));
19222 +                %else %if &_name = STD %then
19223 +                %let _std = %sysfunc(getvarn(&dsid, &j));
19224 +                %else %do;
19225 +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
19226 +                      %let abscoeff = %sysfunc(abs(&coeff));
19227 +                          %if &abscoeff >  0 %then %do;
19228 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19229 +                           %end;
19230 +                 %end;
19231 +             %end;
19232 +             %let rc = %sysfunc(rewind(&dsid));
19233 +         %end;
19234 +
19235 +        %let dsid= %sysfunc(close(&dsid));
19236 +
19237 +     run;
19238 +
19239 +     filename _file_;
19240 +     proc datasets lib = work nolist;
19241 +           delete _tmpindata;
19242 +     run;
19243 +     quit;
19244 +%mend CreateScoreCode2;
19245 +
19246 +
19247 +%macro MakeDeltaCode2(groupds=,deltacodefile=);
19248 +
19249 +     /*--- Build Code to Modify Metadata ---*/
19250 +     filename X "&deltacodefile";
19251 +     data _null_;
19252 +        FILE X;
19253 +        set &groupds end=eof;
19254 +        if _N_=1 then do;
19255 +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
19256 +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
19257 +           %end;
19258 +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
19259 +           put "if upcase(strip(NAME)) in (";
19260 +        end;
19261 +        if Strip(upcase(Selected)) eq 'YES' then do;
19262 +           string = '"'!!trim(left(VARIABLE))!!'"';
19263 +           put string;
19264 +        end;
19265 +        if eof then do;
19266 +           put ') then ROLE="INPUT";';
19267 +           put 'else ROLE="REJECTED";';
19268 +           put 'end;';
19269 +
19270 +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
19271 +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
19272 +           %end;
19273 +        end;
19274 +     run;
19275 +     quit;
19276 +
19277 +     filename X;
19278 +     quit;
19279 +%mend MakeDeltaCode2;
19280 +
19281 +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
19282 +  %global &ngc;
19283 +  data _null_;
19284 +  %if &indata ne %then %do;
19285 +      %let dsid = %sysfunc(open(&indata));
19286 +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
19287 +      %let dsid = %sysfunc(close(&dsid));
19288 +  %end;
19289 +  %else %do;
19290 +       %let nvar = %eval(&ninput+&ndummy); ;
19291 +  %end;
19292 +  %let numgc = %eval(&nvar/&div+2);
19293 +  %let &ngc = &numgc;
19294 +   run;
19295 +  quit;
19296 +%mend getInitialGClusterNumber;
19297 +
19298 +
19299 +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
19300 +data &outlink(drop = Selected);
19301 +     set &indata;
19302 +     LINKID = _N_;
19303 +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
19304 +run;
19305 +data &outnode(keep=NODEID TYPE LABEL);
19306 +    set &indata;
19307 +    length TYPE $16;
19308 +    rename VARIABLE = NODEID;
19309 +    *label  CLUSNAME="Node ID";
19310 +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19311 +    TYPE = "VARIABLE";
19312 +    *label TYPE = "Node Type";
19313 +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19314 +    run;
19315 +data _tmp(keep=NODEID TYPE LABEL);
19316 +    set &indata;
19317 +    length TYPE $16;
19318 +    rename CLUSNAME = NODEID;
19319 +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19320 +    TYPE = "GCLUSTER";
19321 +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19322 +    run;
19323 +proc sort data=_tmp;
19324 +    by NODEID;
19325 +run;
19326 +data _tmp;
19327 +    set _tmp; by NODEID;
19328 +    if first.NODEID then output;
19329 +run;
19330 +proc sort data=&outnode;
19331 +    by NODEID;
19332 +run;
19333 +data  &outnode;
19334 +    set _tmp &outnode;
19335 +run;
19336 +proc datasets lib = work nolist;
19337 +     delete _tmp;
19338 +run;
19339 +quit;
19340 +%mend MakeGobalConstellData;
19341 +
19342 +/* Make contellation plot data among GCLUSTERS */
19343 +
19344 +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
19345 +
19346 +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
19347 +     set &indata;
19348 +     LINKID = _N_;
19349 +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
19350 +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
19351 +     end;
19352 +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
19353 +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
19354 +     end;
19355 +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
19356 +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
19357 +    end;
19358 +run;
19359 +
19360 +data _tmp_outrsquare;
19361 +        set &inoutrsq;
19362 +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
19363 +run;
19364 +
19365 +proc freq data =_tmp_outrsquare noprint;
19366 +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
19367 +run;
19368 +
19369 +data &outnode(keep=_NAME_ TYPE LABEL);
19370 +    set &outlink;
19371 +    length TYPE $16;
19372 +    length LABEL $100;
19373 +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
19374 +
19375 +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19376 +    TYPE = "GCLUSTER";
19377 +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19378 +    end;
19379 +    else do;
19380 +    TYPE= "ROOT";
19381 +    LABEL= _NAME_;
19382 +    end;
19383 +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
19384 +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
19385 +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
19386 +    run;
19387 +
19388 +proc sort data=&outnode;
19389 +     by _NAME_;
19390 +proc sort data=_tmp_GCLUSFREQ;
19391 +     by _NAME_;
19392 +run;
19393 +
19394 +data  &outnode;
19395 +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
19396 +     if COUNT=. then COUNT=1;
19397 +run;
19398 +
19399 +proc datasets lib = work nolist;
19400 +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
19401 +run;
19402 +
19403 +quit;
19404 +%Mend MakeGClusterConstData;
19405 +
19406 +
19407 +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
19408 +
19409 +    data _gscoretmpds;
19410 +          set &indata;
19411 +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
19412 +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
19413 +          if _TYPE_ = 'STD' then _NAME_='STD';
19414 +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
19415 +          DROP _TYPE_ _NCL_;
19416 +     run;
19417 +
19418 +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
19419 +        GCluster Component &globalclusid ------ */
19420 +
19421 +    filename _file_  "&fileref";
19422 +
19423 +    data _null_;
19424 +        %if &globalclusid eq 1 %then %do;
19425 +          FILE _file_;
19426 +        %end;
19427 +        %else %do;
19428 +          FILE _file_ MOD;
19429 +        %end;
19430 +
19431 +        %let dsid = %sysfunc(open(work._gscoretmpds));
19432 +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
19433 +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
19434 +
19435 +        %let k = 1;
19436 +        %do %while(^%sysfunc(fetch(&dsid)));
19437 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19438 +                %if &k > 2 %then %do;
19439 +                put "&_name = 0 ; ";
19440 +                %end;
19441 +                %let k = %eval(&k+1);
19442 +        %end;
19443 +
19444 +        %let rc = %sysfunc(rewind(&dsid));
19445 +        %do i= 2 %to &nvar;
19446 +            %let _varname =  %sysfunc(varname(&dsid, &i));
19447 +            %do %while(^%sysfunc(fetch(&dsid)));
19448 +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
19449 +                %if &_name = MEAN %then
19450 +                %let _mean = %sysfunc(getvarn(&dsid, &i));
19451 +                %else %if &_name = STD %then
19452 +                %let _std = %sysfunc(getvarn(&dsid, &i));
19453 +                %else %do;
19454 +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
19455 +                      %let abscoeff = %sysfunc(abs(&coeff));
19456 +                          %if &abscoeff >  0 %then %do;
19457 +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
19458 +                           %end;
19459 +                 %end;
19460 +             %end;
19461 +             %let rc = %sysfunc(rewind(&dsid));
19462 +
19463 +         %end;
19464 +
19465 +        %let dsid= %sysfunc(close(&dsid));
19466 +       run;
19467 +
19468 +
19469 +       proc datasets lib=work nolist;
19470 +            delete _gscoretmpds;
19471 +       run;
19472 +      quit;
19473 +
19474 +%mend CreateGClusterScoreCode;
19475 +
19476 +
19477 +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
19478 +
19479 +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
19480 +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
19481 +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
19482 +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
19483 +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
19484 +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
19485 +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
19486 +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
19487 +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
19488 +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
19489 +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
19490 +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
19491 +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
19492 +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
19493 +
19494 +   filename gsfile "&gscorecode";
19495 +
19496 +   data &EM_USER_GSCORE;
19497 +             set &indata;
19498 +             %include  gsfile;
19499 +        keep
19500 +        %do i=1 %to &ngcluster;
19501 +         %let gcvarname = GC&i;
19502 +         &gcvarname
19503 +        %end;
19504 +     ;
19505 +   run;
19506 +
19507 +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
19508 +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
19509 +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
19510 +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
19511 +    noprint  ;
19512 +     var
19513 +       %do i=1 %to &ngcluster;
19514 +         %let gcvarname = GC&i;
19515 +         &gcvarname
19516 +        %end;
19517 +   ;
19518 +   run;
19519 +
19520 +
19521 +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
19522 +   data &EM_USER_GSCORECORRPLOT ;
19523 +        set &EM_USER_GSCORECORRPLOT;
19524 +        rename _X_ = X;
19525 +        rename _Y_ = Y;
19526 +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19527 +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
19528 +   run;
19529 +
19530 +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
19531 +
19532 +   data &EM_USER_GSCORETREE;
19533 +        length _NAME_ $32;
19534 +        length _LABEL_ $100;
19535 +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
19536 +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
19537 +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
19538 +        end;else do;
19539 +         _LABEL_ = _NAME_;
19540 +        end;
19541 +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
19542 +
19543 +   run;
19544 +
19545 +   quit;
19546 +
19547 +%mend MakeGClusterCorrelation;
19548 +
19549 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
19550 +%macro score;
19551 +
19552 +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
19553 +%include temp;
19554 +filename temp;
19555 +
19556 +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
19557 +
19558 +data _null_;
19559 +         set &EM_USER_VARCLUSMETA;
19560 +         if _N_=1 then
19561 +         call symput('_trainnum', TrainNum);
19562 +         call symput('_exportedcomp', ExportedComp);
19563 +         call symput('_hidevariable', HideVariable);
19564 +         call symput('_newTrain', NewTrain);
19565 +run;
19566 +
19567 +%if &_newTrain = N %then %do;
19568 +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
19569 +        %else %let _exportedCompChanged = Y;
19570 +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
19571 +        %else  %let _hideVariableChanged = Y;
19572 +%end;
19573 +%else %do;
19574 +        %let _exportedCompChanged = Y;
19575 +        %let _hideVariableChanged = Y;
19576 +%end;
19577 +
19578 +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
19579 +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
19580 +     %include temp;
19581 +     filename temp;
19582 +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19583 +%end;
19584 +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
19585 +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
19586 +     %include temp;
19587 +     filename temp;
19588 +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
19589 +%end;
19590 +
19591 +  /* store  current property values */
19592 + data &EM_USER_VARCLUSMETA;
19593 +       set &EM_USER_VARCLUSMETA;
19594 +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
19595 +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
19596 + run;
19597 +
19598 +%mend score;
19599 +
19600 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
19601 +
19602 +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
19603 +     proc sort data =&indata;
19604 +              by Cluster RsqRatio Type;
19605 +     run;
19606 +     /*----------------------------------------------------------------------
19607 +      The Type variabe is used becuse the variable need to be selected
19608 +        instead of Cluster component when only one variable is in the cluster
19609 +     +-----------------------------------------------------------------------*/
19610 +
19611 +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
19612 +         data &indata;
19613 +              set &indata; by cluster;
19614 +              if first.Cluster then Selected = 'YES';
19615 +              else Selected = 'NO';
19616 +         run;
19617 +         quit;
19618 +    %end;
19619 +    %else %do;
19620 +         data &indata(drop = _var _varchange);
19621 +              set &indata; retain _var 0; by Cluster;
19622 +             if first.Cluster then  _varchange = 0;
19623 +                 else _varchange =1;
19624 +             if _var ne _varchange then  Selected  = 'YES';
19625 +             else Selected = 'NO';
19626 +             if last.cluster then  _var = 0;
19627 +             else _var = _varchange;
19628 +         run;
19629 +         quit;
19630 +    %end;
19631 +%mend ChangeVariableSelectionFlag;
19632 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15   
NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
19633 +
19634 +%macro score1(ExportedCompChanged=,
19635 +              HideVariableChanged=);
19636 +
19637 +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
19638 +   %if &ExportedCompChanged = Y %then %do;
19639 +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
19640 +   %end;
19641 +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
19642 +
19643 +%mend score1;
19644 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS1.VARCLUS_OUTRSQUARE has 22 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file X is:
      Filename=C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=23Oct2020:19:46:52,
      Create Time=22Oct2020:12:37:18

NOTE: 14 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 93.
NOTE: There were 22 observations read from the data set EMWS1.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 1 observations read from the data set EMWS1.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS1.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19645  *------------------------------------------------------------*;
19646  * End SCORE: VarClus;
19647  *------------------------------------------------------------*;
19648  

19649  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19650  *------------------------------------------------------------*;
19651  * VarClus: Scoring DATA data;
19652  *------------------------------------------------------------*;
19653  data EMWS1.VarClus_TRAIN
19654  / view=EMWS1.VarClus_TRAIN
19655  ;
19656  set EMWS1.Part_TRAIN
19657  ;
19658  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19659 +*** Begin Class Look-up, Standardization, Replacement ;
19660 +
19661 +*** Generate dummy variables for Country ;
19662 +label CountryFrance = 'Country=France' ;
19663 +label CountryGermany = 'Country=Germany' ;
19664 +label CountrySpain = 'Country=Spain' ;
19665 +*** encoding is sparse, initialize to zero;
19666 +CountryFrance = 0;
19667 +CountryGermany = 0;
19668 +CountrySpain = 0;
19669 +if missing( Country ) then do;
19670 +   CountryFrance = .;
19671 +   CountryGermany = .;
19672 +   CountrySpain = .;
19673 +end;
19674 +else do;
19675 +   length _dm7 $ 7; drop _dm7 ;
19676 +   _dm7 = put( Country , $7. );
19677 +   %DMNORMIP( _dm7 )
19678 +   if _dm7 = 'FRANCE'  then do;
19679 +      CountryFrance = 1;
19680 +   end;
19681 +   else if _dm7 = 'SPAIN'  then do;
19682 +      CountrySpain = 1;
19683 +   end;
19684 +   else if _dm7 = 'GERMANY'  then do;
19685 +      CountryGermany = 1;
19686 +   end;
19687 +   else do;
19688 +      delete;
19689 +   end;
19690 +end;
19691 +
19692 +*** Generate dummy variables for Gender ;
19693 +label GenderFemale = 'Gender=Female' ;
19694 +label GenderMale = 'Gender=Male' ;
19695 +if missing( Gender ) then do;
19696 +   GenderFemale = .;
19697 +   GenderMale = .;
19698 +end;
19699 +else do;
19700 +   length _dm6 $ 6; drop _dm6 ;
19701 +   _dm6 = put( Gender , $6. );
19702 +   %DMNORMIP( _dm6 )
19703 +   if _dm6 = 'MALE'  then do;
19704 +      GenderFemale = 0;
19705 +      GenderMale = 1;
19706 +   end;
19707 +   else if _dm6 = 'FEMALE'  then do;
19708 +      GenderFemale = 1;
19709 +      GenderMale = 0;
19710 +   end;
19711 +   else do;
19712 +      delete;
19713 +   end;
19714 +end;
19715 +
19716 +*** Generate dummy variables for HasCreditCard ;
19717 +label HasCreditCardNo = 'HasCreditCard=No' ;
19718 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
19719 +if missing( HasCreditCard ) then do;
19720 +   HasCreditCardNo = .;
19721 +   HasCreditCardYes = .;
19722 +end;
19723 +else do;
19724 +   length _dm3 $ 3; drop _dm3 ;
19725 +   _dm3 = put( HasCreditCard , $3. );
19726 +   %DMNORMIP( _dm3 )
19727 +   if _dm3 = 'YES'  then do;
19728 +      HasCreditCardNo = 0;
19729 +      HasCreditCardYes = 1;
19730 +   end;
19731 +   else if _dm3 = 'NO'  then do;
19732 +      HasCreditCardNo = 1;
19733 +      HasCreditCardYes = 0;
19734 +   end;
19735 +   else do;
19736 +      delete;
19737 +   end;
19738 +end;
19739 +
19740 +*** Generate dummy variables for IsActiveMember ;
19741 +label IsActiveMemberNo = 'IsActiveMember=No' ;
19742 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
19743 +if missing( IsActiveMember ) then do;
19744 +   IsActiveMemberNo = .;
19745 +   IsActiveMemberYes = .;
19746 +end;
19747 +else do;
19748 +   length _dm3 $ 3; drop _dm3 ;
19749 +   _dm3 = put( IsActiveMember , $3. );
19750 +   %DMNORMIP( _dm3 )
19751 +   if _dm3 = 'YES'  then do;
19752 +      IsActiveMemberNo = 0;
19753 +      IsActiveMemberYes = 1;
19754 +   end;
19755 +   else if _dm3 = 'NO'  then do;
19756 +      IsActiveMemberNo = 1;
19757 +      IsActiveMemberYes = 0;
19758 +   end;
19759 +   else do;
19760 +      delete;
19761 +   end;
19762 +end;
19763 +
19764 +*** End Class Look-up, Standardization, Replacement ;
19765 +
19766 +
19767 +/*-------------------------------------------------*/
19768 +/* Varclus Score Code Begins*/
19769 +/*-------------------------------------------------*/
19770 +
19771 +Clus1 = 0 ; /*---Cluster Component 1------ */
19772 +Clus2 = 0 ; /*---Cluster Component 2------ */
19773 +Clus3 = 0 ; /*---Cluster Component 3------ */
19774 +Clus4 = 0 ; /*---Cluster Component 4------ */
19775 +Clus5 = 0 ; /*---Cluster Component 5------ */
19776 +Clus6 = 0 ; /*---Cluster Component 6------ */
19777 +Clus7 = 0 ; /*---Cluster Component 7------ */
19778 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
19779 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
19780 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
19781 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
19782 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
19783 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
19784 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
19785 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
19786 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
19787 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
19788 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
19789 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
19790 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
19791 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
19792 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
19793  run;

NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

19794  quit;
19795  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.

19796  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19797  *------------------------------------------------------------*;
19798  * VarClus: Scoring VALIDATE data;
19799  *------------------------------------------------------------*;
19800  data EMWS1.VarClus_VALIDATE
19801  / view=EMWS1.VarClus_VALIDATE
19802  ;
19803  set EMWS1.Part_VALIDATE
19804  ;
19805  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19806 +*** Begin Class Look-up, Standardization, Replacement ;
19807 +
19808 +*** Generate dummy variables for Country ;
19809 +label CountryFrance = 'Country=France' ;
19810 +label CountryGermany = 'Country=Germany' ;
19811 +label CountrySpain = 'Country=Spain' ;
19812 +*** encoding is sparse, initialize to zero;
19813 +CountryFrance = 0;
19814 +CountryGermany = 0;
19815 +CountrySpain = 0;
19816 +if missing( Country ) then do;
19817 +   CountryFrance = .;
19818 +   CountryGermany = .;
19819 +   CountrySpain = .;
19820 +end;
19821 +else do;
19822 +   length _dm7 $ 7; drop _dm7 ;
19823 +   _dm7 = put( Country , $7. );
19824 +   %DMNORMIP( _dm7 )
19825 +   if _dm7 = 'FRANCE'  then do;
19826 +      CountryFrance = 1;
19827 +   end;
19828 +   else if _dm7 = 'SPAIN'  then do;
19829 +      CountrySpain = 1;
19830 +   end;
19831 +   else if _dm7 = 'GERMANY'  then do;
19832 +      CountryGermany = 1;
19833 +   end;
19834 +   else do;
19835 +      delete;
19836 +   end;
19837 +end;
19838 +
19839 +*** Generate dummy variables for Gender ;
19840 +label GenderFemale = 'Gender=Female' ;
19841 +label GenderMale = 'Gender=Male' ;
19842 +if missing( Gender ) then do;
19843 +   GenderFemale = .;
19844 +   GenderMale = .;
19845 +end;
19846 +else do;
19847 +   length _dm6 $ 6; drop _dm6 ;
19848 +   _dm6 = put( Gender , $6. );
19849 +   %DMNORMIP( _dm6 )
19850 +   if _dm6 = 'MALE'  then do;
19851 +      GenderFemale = 0;
19852 +      GenderMale = 1;
19853 +   end;
19854 +   else if _dm6 = 'FEMALE'  then do;
19855 +      GenderFemale = 1;
19856 +      GenderMale = 0;
19857 +   end;
19858 +   else do;
19859 +      delete;
19860 +   end;
19861 +end;
19862 +
19863 +*** Generate dummy variables for HasCreditCard ;
19864 +label HasCreditCardNo = 'HasCreditCard=No' ;
19865 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
19866 +if missing( HasCreditCard ) then do;
19867 +   HasCreditCardNo = .;
19868 +   HasCreditCardYes = .;
19869 +end;
19870 +else do;
19871 +   length _dm3 $ 3; drop _dm3 ;
19872 +   _dm3 = put( HasCreditCard , $3. );
19873 +   %DMNORMIP( _dm3 )
19874 +   if _dm3 = 'YES'  then do;
19875 +      HasCreditCardNo = 0;
19876 +      HasCreditCardYes = 1;
19877 +   end;
19878 +   else if _dm3 = 'NO'  then do;
19879 +      HasCreditCardNo = 1;
19880 +      HasCreditCardYes = 0;
19881 +   end;
19882 +   else do;
19883 +      delete;
19884 +   end;
19885 +end;
19886 +
19887 +*** Generate dummy variables for IsActiveMember ;
19888 +label IsActiveMemberNo = 'IsActiveMember=No' ;
19889 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
19890 +if missing( IsActiveMember ) then do;
19891 +   IsActiveMemberNo = .;
19892 +   IsActiveMemberYes = .;
19893 +end;
19894 +else do;
19895 +   length _dm3 $ 3; drop _dm3 ;
19896 +   _dm3 = put( IsActiveMember , $3. );
19897 +   %DMNORMIP( _dm3 )
19898 +   if _dm3 = 'YES'  then do;
19899 +      IsActiveMemberNo = 0;
19900 +      IsActiveMemberYes = 1;
19901 +   end;
19902 +   else if _dm3 = 'NO'  then do;
19903 +      IsActiveMemberNo = 1;
19904 +      IsActiveMemberYes = 0;
19905 +   end;
19906 +   else do;
19907 +      delete;
19908 +   end;
19909 +end;
19910 +
19911 +*** End Class Look-up, Standardization, Replacement ;
19912 +
19913 +
19914 +/*-------------------------------------------------*/
19915 +/* Varclus Score Code Begins*/
19916 +/*-------------------------------------------------*/
19917 +
19918 +Clus1 = 0 ; /*---Cluster Component 1------ */
19919 +Clus2 = 0 ; /*---Cluster Component 2------ */
19920 +Clus3 = 0 ; /*---Cluster Component 3------ */
19921 +Clus4 = 0 ; /*---Cluster Component 4------ */
19922 +Clus5 = 0 ; /*---Cluster Component 5------ */
19923 +Clus6 = 0 ; /*---Cluster Component 6------ */
19924 +Clus7 = 0 ; /*---Cluster Component 7------ */
19925 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
19926 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
19927 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
19928 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
19929 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
19930 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
19931 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
19932 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
19933 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
19934 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
19935 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
19936 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
19937 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
19938 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
19939 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
19940  run;

NOTE: DATA STEP view saved on file EMWS1.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

19941  quit;
19942  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.

19943  filename emflow "C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas";
19944  *------------------------------------------------------------*;
19945  * VarClus: Scoring TEST data;
19946  *------------------------------------------------------------*;
19947  data EMWS1.VarClus_TEST
19948  / view=EMWS1.VarClus_TEST
19949  ;
19950  set EMWS1.Part_TEST
19951  ;
19952  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\20161277\Documents\CA Assignment 3\Workspaces\EMWS1\VarClus\EMFLOWSCORE.sas.
19953 +*** Begin Class Look-up, Standardization, Replacement ;
19954 +
19955 +*** Generate dummy variables for Country ;
19956 +label CountryFrance = 'Country=France' ;
19957 +label CountryGermany = 'Country=Germany' ;
19958 +label CountrySpain = 'Country=Spain' ;
19959 +*** encoding is sparse, initialize to zero;
19960 +CountryFrance = 0;
19961 +CountryGermany = 0;
19962 +CountrySpain = 0;
19963 +if missing( Country ) then do;
19964 +   CountryFrance = .;
19965 +   CountryGermany = .;
19966 +   CountrySpain = .;
19967 +end;
19968 +else do;
19969 +   length _dm7 $ 7; drop _dm7 ;
19970 +   _dm7 = put( Country , $7. );
19971 +   %DMNORMIP( _dm7 )
19972 +   if _dm7 = 'FRANCE'  then do;
19973 +      CountryFrance = 1;
19974 +   end;
19975 +   else if _dm7 = 'SPAIN'  then do;
19976 +      CountrySpain = 1;
19977 +   end;
19978 +   else if _dm7 = 'GERMANY'  then do;
19979 +      CountryGermany = 1;
19980 +   end;
19981 +   else do;
19982 +      delete;
19983 +   end;
19984 +end;
19985 +
19986 +*** Generate dummy variables for Gender ;
19987 +label GenderFemale = 'Gender=Female' ;
19988 +label GenderMale = 'Gender=Male' ;
19989 +if missing( Gender ) then do;
19990 +   GenderFemale = .;
19991 +   GenderMale = .;
19992 +end;
19993 +else do;
19994 +   length _dm6 $ 6; drop _dm6 ;
19995 +   _dm6 = put( Gender , $6. );
19996 +   %DMNORMIP( _dm6 )
19997 +   if _dm6 = 'MALE'  then do;
19998 +      GenderFemale = 0;
19999 +      GenderMale = 1;
20000 +   end;
20001 +   else if _dm6 = 'FEMALE'  then do;
20002 +      GenderFemale = 1;
20003 +      GenderMale = 0;
20004 +   end;
20005 +   else do;
20006 +      delete;
20007 +   end;
20008 +end;
20009 +
20010 +*** Generate dummy variables for HasCreditCard ;
20011 +label HasCreditCardNo = 'HasCreditCard=No' ;
20012 +label HasCreditCardYes = 'HasCreditCard=Yes' ;
20013 +if missing( HasCreditCard ) then do;
20014 +   HasCreditCardNo = .;
20015 +   HasCreditCardYes = .;
20016 +end;
20017 +else do;
20018 +   length _dm3 $ 3; drop _dm3 ;
20019 +   _dm3 = put( HasCreditCard , $3. );
20020 +   %DMNORMIP( _dm3 )
20021 +   if _dm3 = 'YES'  then do;
20022 +      HasCreditCardNo = 0;
20023 +      HasCreditCardYes = 1;
20024 +   end;
20025 +   else if _dm3 = 'NO'  then do;
20026 +      HasCreditCardNo = 1;
20027 +      HasCreditCardYes = 0;
20028 +   end;
20029 +   else do;
20030 +      delete;
20031 +   end;
20032 +end;
20033 +
20034 +*** Generate dummy variables for IsActiveMember ;
20035 +label IsActiveMemberNo = 'IsActiveMember=No' ;
20036 +label IsActiveMemberYes = 'IsActiveMember=Yes' ;
20037 +if missing( IsActiveMember ) then do;
20038 +   IsActiveMemberNo = .;
20039 +   IsActiveMemberYes = .;
20040 +end;
20041 +else do;
20042 +   length _dm3 $ 3; drop _dm3 ;
20043 +   _dm3 = put( IsActiveMember , $3. );
20044 +   %DMNORMIP( _dm3 )
20045 +   if _dm3 = 'YES'  then do;
20046 +      IsActiveMemberNo = 0;
20047 +      IsActiveMemberYes = 1;
20048 +   end;
20049 +   else if _dm3 = 'NO'  then do;
20050 +      IsActiveMemberNo = 1;
20051 +      IsActiveMemberYes = 0;
20052 +   end;
20053 +   else do;
20054 +      delete;
20055 +   end;
20056 +end;
20057 +
20058 +*** End Class Look-up, Standardization, Replacement ;
20059 +
20060 +
20061 +/*-------------------------------------------------*/
20062 +/* Varclus Score Code Begins*/
20063 +/*-------------------------------------------------*/
20064 +
20065 +Clus1 = 0 ; /*---Cluster Component 1------ */
20066 +Clus2 = 0 ; /*---Cluster Component 2------ */
20067 +Clus3 = 0 ; /*---Cluster Component 3------ */
20068 +Clus4 = 0 ; /*---Cluster Component 4------ */
20069 +Clus5 = 0 ; /*---Cluster Component 5------ */
20070 +Clus6 = 0 ; /*---Cluster Component 6------ */
20071 +Clus7 = 0 ; /*---Cluster Component 7------ */
20072 +Clus6 = Clus6+0.6962204496821 * (Age_Zscore - 0.00063679105199)/0.9982644254826;
20073 +Clus5 = Clus5+0.61961242489716 * (Balance_Zscore - 0.00447206673734)/1.00115500223567;
20074 +Clus7 = Clus7+0.7027957220957 * (Creditscore_Zscore - -0.00706061566265)/0.99485573848802;
20075 +Clus7 = Clus7+0.70279572209572 * (EstimatedSal_Zscore - 0.0034704162175)/1.00153718142553;
20076 +Clus5 = Clus5+-0.61961242489716 * (NumOfProducts - 1.5303733977336)/0.58132461113067;
20077 +Clus2 = Clus2+0.02855636022282 * (Tenure - 4.98903956901356)/2.88997914142329;
20078 +Clus6 = Clus6+-0.6962204496821 * (CountryFrance - 0.50120750510867)/0.50004499076973;
20079 +Clus4 = Clus4+0.61262181299668 * (CountryGermany - 0.24707412223667)/0.43135028143772;
20080 +Clus4 = Clus4+-0.61262181299668 * (CountrySpain - 0.25171837265465)/0.43404058677141;
20081 +Clus3 = Clus3+0.5 * (GenderFemale - 0.45587962102916)/0.49809585583933;
20082 +Clus3 = Clus3+-0.5 * (GenderMale - 0.54412037897083)/0.49809585583933;
20083 +Clus2 = Clus2+-0.49938735767893 * (HasCreditCardNo - 0.28905814601523)/0.45336708937218;
20084 +Clus2 = Clus2+0.49938735767893 * (HasCreditCardYes - 0.71094185398476)/0.45336708937218;
20085 +Clus1 = Clus1+0.5 * (IsActiveMemberNo - 0.48207319338658)/0.49972494537092;
20086 +Clus1 = Clus1+-0.5 * (IsActiveMemberYes - 0.51792680661341)/0.49972494537092;
NOTE: %INCLUDE (level 1) ending.
20087  run;

NOTE: DATA STEP view saved on file EMWS1.VARCLUS_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

20088  quit;
20089  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.

20091  *------------------------------------------------------------*;
20092  * VarClus: Computing metadata for TRAIN data;
20093  *------------------------------------------------------------*;

NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
